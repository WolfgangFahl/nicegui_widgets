{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ngwidgets API Documentation","text":""},{"location":"#ngwidgets.ai_chat","title":"<code>ai_chat</code>","text":"<p>Created on 2024-02-05</p> <p>based on https://raw.githubusercontent.com/zauberzeug/nicegui/main/examples/chat_app/main.py</p> <p>@author: wf</p>"},{"location":"#ngwidgets.basetest","title":"<code>basetest</code>","text":"<p>Created on 2021-08-19</p> <p>@author: wf</p>"},{"location":"#ngwidgets.basetest.Basetest","title":"<code>Basetest</code>","text":"<p>               Bases: <code>TestCase</code></p> <p>base test case</p> Source code in <code>ngwidgets/basetest.py</code> <pre><code>class Basetest(unittest.TestCase):\n    \"\"\"\n    base test case\n    \"\"\"\n\n    def setUp(self, debug=False, profile=True):\n        \"\"\"\n        setUp test environment\n        \"\"\"\n        unittest.TestCase.setUp(self)\n        self.debug = debug\n        self.profile = profile\n        msg = f\"test {self._testMethodName}, debug={self.debug}\"\n        self.profiler = Profiler(msg, profile=self.profile)\n\n    def tearDown(self):\n        unittest.TestCase.tearDown(self)\n        self.profiler.time()\n\n    @staticmethod\n    def inPublicCI():\n        \"\"\"\n        are we running in a public Continuous Integration Environment?\n        \"\"\"\n        publicCI = getpass.getuser() in [\"travis\", \"runner\"]\n        jenkins = \"JENKINS_HOME\" in os.environ\n        return publicCI or jenkins\n\n    @staticmethod\n    def isUser(name: str):\n        \"\"\"Checks if the system has the given name\"\"\"\n        return getpass.getuser() == name\n</code></pre>"},{"location":"#ngwidgets.basetest.Basetest.inPublicCI","title":"<code>inPublicCI()</code>  <code>staticmethod</code>","text":"<p>are we running in a public Continuous Integration Environment?</p> Source code in <code>ngwidgets/basetest.py</code> <pre><code>@staticmethod\ndef inPublicCI():\n    \"\"\"\n    are we running in a public Continuous Integration Environment?\n    \"\"\"\n    publicCI = getpass.getuser() in [\"travis\", \"runner\"]\n    jenkins = \"JENKINS_HOME\" in os.environ\n    return publicCI or jenkins\n</code></pre>"},{"location":"#ngwidgets.basetest.Basetest.isUser","title":"<code>isUser(name)</code>  <code>staticmethod</code>","text":"<p>Checks if the system has the given name</p> Source code in <code>ngwidgets/basetest.py</code> <pre><code>@staticmethod\ndef isUser(name: str):\n    \"\"\"Checks if the system has the given name\"\"\"\n    return getpass.getuser() == name\n</code></pre>"},{"location":"#ngwidgets.basetest.Basetest.setUp","title":"<code>setUp(debug=False, profile=True)</code>","text":"<p>setUp test environment</p> Source code in <code>ngwidgets/basetest.py</code> <pre><code>def setUp(self, debug=False, profile=True):\n    \"\"\"\n    setUp test environment\n    \"\"\"\n    unittest.TestCase.setUp(self)\n    self.debug = debug\n    self.profile = profile\n    msg = f\"test {self._testMethodName}, debug={self.debug}\"\n    self.profiler = Profiler(msg, profile=self.profile)\n</code></pre>"},{"location":"#ngwidgets.cmd","title":"<code>cmd</code>","text":"<p>Created on 2023-09-10</p> <p>@author: wf</p>"},{"location":"#ngwidgets.cmd.WebserverCmd","title":"<code>WebserverCmd</code>","text":"<p>               Bases: <code>object</code></p> <p>Baseclass for command line handling of Webservers</p> Source code in <code>ngwidgets/cmd.py</code> <pre><code>class WebserverCmd(object):\n    \"\"\"\n    Baseclass for command line handling of Webservers\n    \"\"\"\n\n    def __init__(self, config: WebserverConfig, webserver_cls, debug: bool = False):\n        \"\"\"\n        constructor\n        \"\"\"\n        self.config = config\n        self.version = config.version\n        self.debug = debug\n        self.webserver_cls = webserver_cls\n        self.exit_code = 0\n\n    def getArgParser(self, description: str = None, version_msg=None) -&gt; ArgumentParser:\n        \"\"\"\n        Setup command line argument parser\n\n        Args:\n            description(str): the description\n            version_msg(str): the version message\n\n        Returns:\n            ArgumentParser: the argument parser\n        \"\"\"\n        if description is None:\n            description = self.version.description\n        if version_msg is None:\n            version_msg = self.program_version_message\n        parser = ArgumentParser(\n            description=description, formatter_class=RawDescriptionHelpFormatter\n        )\n        parser.add_argument(\n            \"-a\",\n            \"--about\",\n            help=\"show about info [default: %(default)s]\",\n            action=\"store_true\",\n        )\n        parser.add_argument(\n            \"--apache\",\n            help=\"create an apache configuration file for the given domain\",\n        )\n        parser.add_argument(\n            \"-c\",\n            \"--client\",\n            action=\"store_true\",\n            help=\"start client [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"-d\",\n            \"--debug\",\n            action=\"store_true\",\n            help=\"show debug info [default: %(default)s]\",\n        )\n        parser.add_argument(\"--debugServer\", help=\"remote debug Server\")\n        parser.add_argument(\n            \"--debugPort\", type=int, help=\"remote debug Port\", default=5678\n        )\n        parser.add_argument(\n            \"--debugRemotePath\",\n            help=\"remote debug Server path mapping - remotePath - path on debug server\",\n        )\n        parser.add_argument(\n            \"--debugLocalPath\",\n            help=\"remote debug Server path mapping - localPath - path on machine where python runs\",\n        )\n\n        parser.add_argument(\n            \"-l\",\n            \"--local\",\n            action=\"store_true\",\n            help=\"run with local file system access [default: %(default)s]\",\n        )\n        parser.add_argument(\"-i\", \"--input\", help=\"input file\")\n\n        parser.add_argument(\n            \"-rol\",\n            \"--render_on_load\",\n            action=\"store_true\",\n            help=\"render on load [default: %(default)s]\",\n        )\n\n        parser.add_argument(\n            \"--host\",\n            default=\"localhost\",\n            help=\"the host to serve / listen from [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"--port\",\n            type=int,\n            default=self.config.default_port,\n            help=\"the port to serve from [default: %(default)s]\",\n        )\n        parser.add_argument(\n            \"-s\",\n            \"--serve\",\n            action=\"store_true\",\n            help=\"start webserver [default: %(default)s]\",\n        )\n        parser.add_argument(\"-V\", \"--version\", action=\"version\", version=version_msg)\n        return parser\n\n    def handle_args(self) -&gt; bool:\n        handled = False\n        if self.args.apache:\n            print(self.to_apache_config(self.config, self.args.apache))\n        if self.args.about:\n            print(self.program_version_message)\n            print(f\"see {self.version.doc_url}\")\n            webbrowser.open(self.version.doc_url)\n            handled = True\n        if self.args.client:\n            url = f\"http://{self.args.host}:{self.args.port}\"\n            webbrowser.open(url)\n            handled = True\n        if self.args.serve:\n            # instantiate the webserver\n            ws = self.webserver_cls()\n            ws.run(self.args)\n            handled = True\n        return handled\n\n    def to_apache_config(self, config: WebserverConfig, domain: str) -&gt; str:\n        \"\"\"\n        Generate Apache configuration based on the given WebserverConfig.\n\n        Args:\n            config (WebserverConfig): The webserver configuration object.\n            domain(str): the base domain to use\n        Returns:\n            str: The Apache configuration as a string.\n        \"\"\"\n        iso_timestamp = datetime.now().isoformat()\n        server_name = f\"{config.short_name}.{domain}\"\n        admin_email = f\"webmaster@{domain}\"\n        version_info = \"\"\n        if config.version:\n            version_info = f\"\"\"{config.version.name} Version {config.version.version} of {config.version.updated} ({config.version.description})\"\"\"\n\n        header_comment = f\"\"\"# Apache Configuration for {server_name}\n# {version_info}\n# Generated by WebserverCmd at {iso_timestamp}  \n# http Port: {config.default_port}\n# SSL Port: 443\n# {config.copy_right}\n# timeout: {config.timeout}\n\"\"\"\n\n        template = \"\"\"&lt;VirtualHost *:{port}&gt;\n    ServerName {server_name}\n    ServerAdmin {admin_email}\n\n    {ssl_config_part}\n    ErrorLog ${{APACHE_LOG_DIR}}/{short_name}_error{log_suffix}.log\n    CustomLog ${{APACHE_LOG_DIR}}/{short_name}{log_suffix}.log combined\n\n    RewriteEngine On\n    RewriteCond %{{HTTP:Upgrade}} =websocket [NC]\n    RewriteRule /(.*) ws://localhost:{default_port}/$1 [P,L]\n    RewriteCond %{{HTTP:Upgrade}} !=websocket [NC]\n    RewriteRule /(.*) http://localhost:{default_port}/$1 [P,L]\n\n    ProxyPassReverse / http://localhost:{default_port}/\n&lt;/VirtualHost&gt;\n\"\"\"\n\n        # For SSL Configuration\n        ssl_config = template.format(\n            port=443,\n            server_name=server_name,\n            admin_email=admin_email,\n            short_name=config.short_name,\n            log_suffix=\"_ssl\",\n            default_port=config.default_port,\n            ssl_config_part=\"Include ssl.conf\",\n        )\n\n        # For Non-SSL Configuration\n        http_config = template.format(\n            port=80,\n            server_name=server_name,\n            admin_email=admin_email,\n            short_name=config.short_name,\n            log_suffix=\"\",\n            default_port=config.default_port,\n            ssl_config_part=\"\",\n        )\n\n        apache_config = header_comment + ssl_config + http_config\n        return apache_config\n\n    def cmd_parse(self, argv: list = None):\n        \"\"\"\n        parse the argument lists and prepare\n\n        Args:\n            argv(list): list of command line arguments\n\n        \"\"\"\n        if argv is None:\n            argv = sys.argv[1:]\n        self.argv = argv\n        self.program_name = self.version.name\n        self.program_version = f\"v{self.version.version}\"\n        self.program_build_date = str(self.version.date)\n        self.program_version_message = (\n            f\"{self.program_name} ({self.program_version},{self.program_build_date})\"\n        )\n        self.parser = self.getArgParser(\n            description=self.version.description,\n            version_msg=self.program_version_message,\n        )\n        self.args = self.parser.parse_args(argv)\n        return self.args\n\n    def cmd_main(self, argv: None) -&gt; int:\n        \"\"\"\n        main program as an instance\n\n        Args:\n            argv(list): list of command line arguments\n\n        Returns:\n            int: exit code - 0 of all went well 1 for keyboard interrupt and 2 for exceptions\n        \"\"\"\n        try:\n            self.cmd_parse(argv)\n            if len(self.argv) &lt; 1:\n                self.parser.print_usage()\n                sys.exit(1)\n            self.handle_args()\n        except KeyboardInterrupt:\n            ### handle keyboard interrupt ###\n            self.exit_code = 1\n        except Exception as e:\n            if self.debug:\n                raise (e)\n            indent = len(self.program_name) * \" \"\n            sys.stderr.write(self.program_name + \": \" + repr(e) + \"\\n\")\n            sys.stderr.write(indent + \"  for help use --help\")\n            if self.args.debug:\n                print(traceback.format_exc())\n            self.exit_code = 2\n\n        return self.exit_code\n</code></pre>"},{"location":"#ngwidgets.cmd.WebserverCmd.__init__","title":"<code>__init__(config, webserver_cls, debug=False)</code>","text":"<p>constructor</p> Source code in <code>ngwidgets/cmd.py</code> <pre><code>def __init__(self, config: WebserverConfig, webserver_cls, debug: bool = False):\n    \"\"\"\n    constructor\n    \"\"\"\n    self.config = config\n    self.version = config.version\n    self.debug = debug\n    self.webserver_cls = webserver_cls\n    self.exit_code = 0\n</code></pre>"},{"location":"#ngwidgets.cmd.WebserverCmd.cmd_main","title":"<code>cmd_main(argv)</code>","text":"<p>main program as an instance</p> <p>Parameters:</p> Name Type Description Default <code>argv(list)</code> <p>list of command line arguments</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>exit code - 0 of all went well 1 for keyboard interrupt and 2 for exceptions</p> Source code in <code>ngwidgets/cmd.py</code> <pre><code>def cmd_main(self, argv: None) -&gt; int:\n    \"\"\"\n    main program as an instance\n\n    Args:\n        argv(list): list of command line arguments\n\n    Returns:\n        int: exit code - 0 of all went well 1 for keyboard interrupt and 2 for exceptions\n    \"\"\"\n    try:\n        self.cmd_parse(argv)\n        if len(self.argv) &lt; 1:\n            self.parser.print_usage()\n            sys.exit(1)\n        self.handle_args()\n    except KeyboardInterrupt:\n        ### handle keyboard interrupt ###\n        self.exit_code = 1\n    except Exception as e:\n        if self.debug:\n            raise (e)\n        indent = len(self.program_name) * \" \"\n        sys.stderr.write(self.program_name + \": \" + repr(e) + \"\\n\")\n        sys.stderr.write(indent + \"  for help use --help\")\n        if self.args.debug:\n            print(traceback.format_exc())\n        self.exit_code = 2\n\n    return self.exit_code\n</code></pre>"},{"location":"#ngwidgets.cmd.WebserverCmd.cmd_parse","title":"<code>cmd_parse(argv=None)</code>","text":"<p>parse the argument lists and prepare</p> <p>Parameters:</p> Name Type Description Default <code>argv(list)</code> <p>list of command line arguments</p> required Source code in <code>ngwidgets/cmd.py</code> <pre><code>def cmd_parse(self, argv: list = None):\n    \"\"\"\n    parse the argument lists and prepare\n\n    Args:\n        argv(list): list of command line arguments\n\n    \"\"\"\n    if argv is None:\n        argv = sys.argv[1:]\n    self.argv = argv\n    self.program_name = self.version.name\n    self.program_version = f\"v{self.version.version}\"\n    self.program_build_date = str(self.version.date)\n    self.program_version_message = (\n        f\"{self.program_name} ({self.program_version},{self.program_build_date})\"\n    )\n    self.parser = self.getArgParser(\n        description=self.version.description,\n        version_msg=self.program_version_message,\n    )\n    self.args = self.parser.parse_args(argv)\n    return self.args\n</code></pre>"},{"location":"#ngwidgets.cmd.WebserverCmd.getArgParser","title":"<code>getArgParser(description=None, version_msg=None)</code>","text":"<p>Setup command line argument parser</p> <p>Parameters:</p> Name Type Description Default <code>description(str)</code> <p>the description</p> required <code>version_msg(str)</code> <p>the version message</p> required <p>Returns:</p> Name Type Description <code>ArgumentParser</code> <code>ArgumentParser</code> <p>the argument parser</p> Source code in <code>ngwidgets/cmd.py</code> <pre><code>def getArgParser(self, description: str = None, version_msg=None) -&gt; ArgumentParser:\n    \"\"\"\n    Setup command line argument parser\n\n    Args:\n        description(str): the description\n        version_msg(str): the version message\n\n    Returns:\n        ArgumentParser: the argument parser\n    \"\"\"\n    if description is None:\n        description = self.version.description\n    if version_msg is None:\n        version_msg = self.program_version_message\n    parser = ArgumentParser(\n        description=description, formatter_class=RawDescriptionHelpFormatter\n    )\n    parser.add_argument(\n        \"-a\",\n        \"--about\",\n        help=\"show about info [default: %(default)s]\",\n        action=\"store_true\",\n    )\n    parser.add_argument(\n        \"--apache\",\n        help=\"create an apache configuration file for the given domain\",\n    )\n    parser.add_argument(\n        \"-c\",\n        \"--client\",\n        action=\"store_true\",\n        help=\"start client [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"-d\",\n        \"--debug\",\n        action=\"store_true\",\n        help=\"show debug info [default: %(default)s]\",\n    )\n    parser.add_argument(\"--debugServer\", help=\"remote debug Server\")\n    parser.add_argument(\n        \"--debugPort\", type=int, help=\"remote debug Port\", default=5678\n    )\n    parser.add_argument(\n        \"--debugRemotePath\",\n        help=\"remote debug Server path mapping - remotePath - path on debug server\",\n    )\n    parser.add_argument(\n        \"--debugLocalPath\",\n        help=\"remote debug Server path mapping - localPath - path on machine where python runs\",\n    )\n\n    parser.add_argument(\n        \"-l\",\n        \"--local\",\n        action=\"store_true\",\n        help=\"run with local file system access [default: %(default)s]\",\n    )\n    parser.add_argument(\"-i\", \"--input\", help=\"input file\")\n\n    parser.add_argument(\n        \"-rol\",\n        \"--render_on_load\",\n        action=\"store_true\",\n        help=\"render on load [default: %(default)s]\",\n    )\n\n    parser.add_argument(\n        \"--host\",\n        default=\"localhost\",\n        help=\"the host to serve / listen from [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"--port\",\n        type=int,\n        default=self.config.default_port,\n        help=\"the port to serve from [default: %(default)s]\",\n    )\n    parser.add_argument(\n        \"-s\",\n        \"--serve\",\n        action=\"store_true\",\n        help=\"start webserver [default: %(default)s]\",\n    )\n    parser.add_argument(\"-V\", \"--version\", action=\"version\", version=version_msg)\n    return parser\n</code></pre>"},{"location":"#ngwidgets.cmd.WebserverCmd.to_apache_config","title":"<code>to_apache_config(config, domain)</code>","text":"<p>Generate Apache configuration based on the given WebserverConfig.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>WebserverConfig</code> <p>The webserver configuration object.</p> required <code>domain(str)</code> <p>the base domain to use</p> required <p>Returns:     str: The Apache configuration as a string.</p> Source code in <code>ngwidgets/cmd.py</code> <pre><code>    def to_apache_config(self, config: WebserverConfig, domain: str) -&gt; str:\n        \"\"\"\n        Generate Apache configuration based on the given WebserverConfig.\n\n        Args:\n            config (WebserverConfig): The webserver configuration object.\n            domain(str): the base domain to use\n        Returns:\n            str: The Apache configuration as a string.\n        \"\"\"\n        iso_timestamp = datetime.now().isoformat()\n        server_name = f\"{config.short_name}.{domain}\"\n        admin_email = f\"webmaster@{domain}\"\n        version_info = \"\"\n        if config.version:\n            version_info = f\"\"\"{config.version.name} Version {config.version.version} of {config.version.updated} ({config.version.description})\"\"\"\n\n        header_comment = f\"\"\"# Apache Configuration for {server_name}\n# {version_info}\n# Generated by WebserverCmd at {iso_timestamp}  \n# http Port: {config.default_port}\n# SSL Port: 443\n# {config.copy_right}\n# timeout: {config.timeout}\n\"\"\"\n\n        template = \"\"\"&lt;VirtualHost *:{port}&gt;\n    ServerName {server_name}\n    ServerAdmin {admin_email}\n\n    {ssl_config_part}\n    ErrorLog ${{APACHE_LOG_DIR}}/{short_name}_error{log_suffix}.log\n    CustomLog ${{APACHE_LOG_DIR}}/{short_name}{log_suffix}.log combined\n\n    RewriteEngine On\n    RewriteCond %{{HTTP:Upgrade}} =websocket [NC]\n    RewriteRule /(.*) ws://localhost:{default_port}/$1 [P,L]\n    RewriteCond %{{HTTP:Upgrade}} !=websocket [NC]\n    RewriteRule /(.*) http://localhost:{default_port}/$1 [P,L]\n\n    ProxyPassReverse / http://localhost:{default_port}/\n&lt;/VirtualHost&gt;\n\"\"\"\n\n        # For SSL Configuration\n        ssl_config = template.format(\n            port=443,\n            server_name=server_name,\n            admin_email=admin_email,\n            short_name=config.short_name,\n            log_suffix=\"_ssl\",\n            default_port=config.default_port,\n            ssl_config_part=\"Include ssl.conf\",\n        )\n\n        # For Non-SSL Configuration\n        http_config = template.format(\n            port=80,\n            server_name=server_name,\n            admin_email=admin_email,\n            short_name=config.short_name,\n            log_suffix=\"\",\n            default_port=config.default_port,\n            ssl_config_part=\"\",\n        )\n\n        apache_config = header_comment + ssl_config + http_config\n        return apache_config\n</code></pre>"},{"location":"#ngwidgets.color_map","title":"<code>color_map</code>","text":"<p>Created on 2024-07-17</p> <p>@author: wf</p>"},{"location":"#ngwidgets.color_map.ColorMap","title":"<code>ColorMap</code>","text":"<p>A map of color ranges.</p> <p>the first column of each row has the color range from start_color to end_color the other columns are interpolated using the lum_min, lum_max and sat_f parameters</p> <p>Attributes:</p> Name Type Description <code>start_color</code> <code>Color</code> <p>The starting color of the range.</p> <code>end_color</code> <code>Color</code> <p>The ending color of the range.</p> <code>num_levels</code> <code>int</code> <p>The number of levels in the color range.</p> <code>lum_min</code> <code>float</code> <p>The minimum luminance </p> <code>lum_max</code> <code>float</code> <p>The maximum luminance</p> <code>sat_f</code> <code>float</code> <p>The saturation factor</p> Source code in <code>ngwidgets/color_map.py</code> <pre><code>class ColorMap:\n    \"\"\"\n    A map of color ranges.\n\n    the first column of each row has the color range from start_color to end_color\n    the other columns are interpolated using the lum_min, lum_max and sat_f parameters\n\n    Attributes:\n        start_color (Color): The starting color of the range.\n        end_color (Color): The ending color of the range.\n        num_levels (int): The number of levels in the color range.\n        lum_min (float): The minimum luminance \n        lum_max (float): The maximum luminance\n        sat_f (float): The saturation factor \n    \"\"\"\n    def __init__(self, \n        start_color: str=\"#ff002b\", \n        end_color: str=\"#110080\", \n        num_levels: int=5, \n        lum_min: float = 0.5, \n        lum_max: float = 0.86,\n        sat_f: float = 0.35):\n        self.start_color = Color(start_color)\n        self.end_color = Color(end_color)\n        self.num_levels = num_levels\n        self.lum_min = lum_min\n        self.lum_max = lum_max\n        self.sat_f = sat_f\n        self.main_colors = list(self.start_color.range_to(self.end_color, num_levels))\n        self.color_matrix = self._create_color_matrix()\n\n    def _map_to_color(self, main_color: Color, col_index: float) -&gt; Color:\n        \"\"\"\n        Maps a column index to a color shade based on the main color.\n        \"\"\"\n        luminance = (self.lum_max - self.lum_min) * col_index + self.lum_min\n        saturation = main_color.saturation * (1 - (1 - self.sat_f) * col_index)\n        color= Color(hue=main_color.hue, saturation=saturation, luminance=luminance)\n        return color\n\n    def _create_color_matrix(self):\n        matrix = []\n        for main_color in self.main_colors:\n            shade_row = []\n            for col in range(self.num_levels):\n                col_index = col / (self.num_levels - 1)\n                shade = self._map_to_color(main_color, col_index)\n                shade_row.append(shade)\n            matrix.append(shade_row)\n        return matrix\n\n    def get_color(self, row: int, col: int) -&gt; Color:\n        \"\"\"\n        Retrieves the color hex code at the specified row and column indices.\n        \"\"\"\n        return self.color_matrix[row][col]\n</code></pre>"},{"location":"#ngwidgets.color_map.ColorMap.get_color","title":"<code>get_color(row, col)</code>","text":"<p>Retrieves the color hex code at the specified row and column indices.</p> Source code in <code>ngwidgets/color_map.py</code> <pre><code>def get_color(self, row: int, col: int) -&gt; Color:\n    \"\"\"\n    Retrieves the color hex code at the specified row and column indices.\n    \"\"\"\n    return self.color_matrix[row][col]\n</code></pre>"},{"location":"#ngwidgets.color_schema","title":"<code>color_schema</code>","text":"<p>Created on 2023-09-13</p> <p>@author: wf</p>"},{"location":"#ngwidgets.color_schema.ColorSchema","title":"<code>ColorSchema</code>  <code>dataclass</code>","text":"<p>a nicegui color schema</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@dataclass\nclass ColorSchema:\n    \"\"\"\n    a nicegui color schema\n    \"\"\"\n\n    name: str = \"default\"\n    primary: str = \"#5898d4\"\n    secondary: str = \"#26a69a\"\n    accent: str = \"#9c27b0\"\n    dark: str = \"#1d1d1d\"\n    positive: str = \"#21ba45\"\n    negative: str = \"#c10015\"\n    info: str = \"#31ccec\"\n    warning: str = \"#f2c037\"\n\n    def apply(self):\n        \"\"\"\n        Apply this color schema to the current UI theme.\n        \"\"\"\n        ui.colors(\n            primary=self.primary,\n            secondary=self.secondary,\n            accent=self.accent,\n            dark=self.dark,\n            positive=self.positive,\n            negative=self.negative,\n            info=self.info,\n            warning=self.warning,\n        )\n\n    @classmethod\n    def get_schemas(cls):\n        \"\"\"\n        Return a list of all available color schemas.\n        \"\"\"\n        return [\n            cls.default(),\n            cls.indigo(),\n            cls.red(),\n            cls.pink_red(),\n            cls.purple(),\n            cls.deep_purple(),\n            cls.blue(),\n            cls.light_blue(),\n            cls.cyan(),\n            cls.teal(),\n            cls.green(),\n            cls.light_green(),\n            cls.lime(),\n            cls.yellow(),\n            cls.amber(),\n            cls.orange(),\n            cls.deep_orange(),\n            cls.brown(),\n            cls.grey(),\n            cls.blue_grey(),\n        ]\n\n    @classmethod\n    def default(cls):\n        \"\"\"\n        Return the default color schema.\n        \"\"\"\n        return cls()\n\n    def display(self):\n        \"\"\"\n        Display all available color schemas visually in the UI.\n        \"\"\"\n        for schema in ColorSchema.get_schemas():\n            style = (\n                \"color: white;\"\n                \"width: 75px; \"\n                \"height: 50px; \"\n                \"border: 1px solid #000; \"\n                \"display: flex; \"\n                \"justify-content: center; \"\n                \"align-items: center; \"\n                \"border-radius: 5px;\"\n            )\n            with ui.row().style(\"margin-bottom: 10px;\"):\n                ui.label(schema.name).style(style + \"background:grey;\")\n                schema._display_color(\"Primary\", schema.primary, style)\n                schema._display_color(\"Secondary\", schema.secondary, style)\n                schema._display_color(\"Accent\", schema.accent, style)\n                schema._display_color(\"Dark\", schema.dark, style)\n                schema._display_color(\"Positive\", schema.positive, style)\n                schema._display_color(\"Negative\", schema.negative, style)\n                schema._display_color(\"Info\", schema.info, style)\n                schema._display_color(\"Warning\", schema.warning, style)\n\n    def _display_color(self, name: str, color: str, style: str):\n        with ui.column():\n            ui.label(name).style(style + f\"background: {color};\")\n\n    @classmethod\n    def blue_grey(cls):\n        \"\"\"\n        Return a color schema for the Blue Grey color palette from Material Palette.\n        see https://www.materialpalette.com/grey/blue-grey\n        \"\"\"\n        return cls(\n            name=\"blue_grey\",\n            primary=\"#607D8B\",  # Blue Grey\n            secondary=\"#B0BEC5\",  # Light Blue Grey\n            accent=\"#37474F\",  # Dark Blue Grey\n            dark=\"#263238\",  # Deepest Blue Grey\n            positive=\"#4CAF50\",  # Standard Positive Green\n            negative=\"#D32F2F\",  # Standard Negative Red\n            info=\"#2196F3\",  # Standard Info Blue\n            warning=\"#FFC107\",  # Standard Warning Amber\n        )\n\n    @classmethod\n    def red(cls):\n        \"\"\"\n        Return a color schema for the Red color palette from Material Palette.\n        see https://www.materialpalette.com/red/red\n        \"\"\"\n        return cls(\n            name=\"red\",\n            primary=\"#F44336\",\n            secondary=\"#FFCDD2\",\n            accent=\"#D32F2F\",\n            dark=\"#B71C1C\",\n            positive=\"#4CAF50\",\n            negative=\"#D32F2F\",\n            info=\"#2196F3\",\n            warning=\"#FFC107\",\n        )\n\n    @classmethod\n    def purple(cls):\n        \"\"\"\n        Return a color schema for the Purple color palette from Material Palette.\n        see https://www.materialpalette.com/purple/purple\n        \"\"\"\n        return cls(\n            name=\"purple\",\n            primary=\"#9C27B0\",  # Purple\n            secondary=\"#CE93D8\",  # Light Purple\n            accent=\"#7B1FA2\",  # Dark Purple\n            dark=\"#4A148C\",  # Deepest Purple\n            positive=\"#4CAF50\",  # Standard Positive Green\n            negative=\"#D32F2F\",  # Standard Negative Red\n            info=\"#2196F3\",  # Standard Info Blue\n            warning=\"#FFC107\",  # Standard Warning Amber\n        )\n\n    @classmethod\n    def deep_purple(cls):\n        \"\"\"\n        Return a color schema for the Deep Purple color palette from Material Palette.\n        see https://www.materialpalette.com/purple/deep-purple\n        \"\"\"\n        return cls(\n            name=\"deep_purple\",\n            primary=\"#673AB7\",  # Deep Purple\n            secondary=\"#9575CD\",  # Light Deep Purple\n            accent=\"#512DA8\",  # Dark Deep Purple\n            dark=\"#311B92\",  # Deepest Deep Purple\n            positive=\"#4CAF50\",  # Standard Positive Green\n            negative=\"#D32F2F\",  # Standard Negative Red\n            info=\"#2196F3\",  # Standard Info Blue\n            warning=\"#FFC107\",  # Standard Warning Amber\n        )\n\n    @classmethod\n    def blue(cls):\n        \"\"\"\n        Return a color schema for the Blue color palette from Material Palette.\n        see https://www.materialpalette.com/blue/blue\n        \"\"\"\n        return cls(\n            name=\"blue\",\n            primary=\"#2196F3\",  # Blue\n            secondary=\"#90CAF9\",  # Light Blue\n            accent=\"#1976D2\",  # Dark Blue\n            dark=\"#0D47A1\",  # Deepest Blue\n            positive=\"#4CAF50\",  # Standard Positive Green\n            negative=\"#D32F2F\",  # Standard Negative Red\n            info=\"#2196F3\",  # Standard Info Blue\n            warning=\"#FFC107\",  # Standard Warning Amber\n        )\n\n    @classmethod\n    def light_blue(cls):\n        \"\"\"\n        Return a color schema for the Light Blue color palette from Material Palette.\n        see https://www.materialpalette.com/blue/light-blue\n        \"\"\"\n        return cls(\n            name=\"light_blue\",\n            primary=\"#03A9F4\",  # Light Blue\n            secondary=\"#81D4FA\",  # Lightest Blue\n            accent=\"#0288D1\",  # Dark Light Blue\n            dark=\"#01579B\",  # Deepest Light Blue\n            positive=\"#4CAF50\",  # Standard Positive Green\n            negative=\"#D32F2F\",  # Standard Negative Red\n            info=\"#2196F3\",  # Standard Info Blue\n            warning=\"#FFC107\",  # Standard Warning Amber\n        )\n\n    @classmethod\n    def cyan(cls):\n        \"\"\"\n        Return a color schema for the Cyan color palette from Material Palette.\n        see https://www.materialpalette.com/blue/cyan\n        \"\"\"\n        return cls(\n            name=\"cyan\",\n            primary=\"#00BCD4\",  # Cyan\n            secondary=\"#80DEEA\",  # Light Cyan\n            accent=\"#0097A7\",  # Dark Cyan\n            dark=\"#006064\",  # Deepest Cyan\n            positive=\"#4CAF50\",  # Standard Positive Green\n            negative=\"#D32F2F\",  # Standard Negative Red\n            info=\"#2196F3\",  # Standard Info Blue\n            warning=\"#FFC107\",  # Standard Warning Amber\n        )\n\n    @classmethod\n    def pink_red(cls):\n        \"\"\"\n        Return a color schema for the Pink/Red color palette from Material Palette.\n        see https://www.materialpalette.com/pink/red\n        \"\"\"\n        return cls(\n            name=\"pink_red\",\n            primary=\"#E91E63\",  # Pink\n            secondary=\"#F8BBD0\",  # Light Pink\n            accent=\"#C2185B\",  # Dark Pink\n            dark=\"#880E4F\",  # Deepest Pink\n            positive=\"#4CAF50\",  # Standard Positive Green\n            negative=\"#D32F2F\",  # Standard Negative Red\n            info=\"#2196F3\",  # Standard Info Blue\n            warning=\"#FFC107\",  # Standard Warning Amber\n        )\n\n    @classmethod\n    def teal(cls):\n        \"\"\"\n        Return a color schema for the Teal color palette from Material Palette.\n        see https://www.materialpalette.com/teal/teal\n        \"\"\"\n        return cls(\n            name=\"teal\",\n            primary=\"#009688\",\n            secondary=\"#80CBC4\",\n            accent=\"#00796B\",\n            dark=\"#004D40\",\n            positive=\"#4CAF50\",\n            negative=\"#D32F2F\",\n            info=\"#2196F3\",\n            warning=\"#FFC107\",\n        )\n\n    @classmethod\n    def lime(cls):\n        \"\"\"\n        Return a color schema for the Lime color palette from Material Palette.\n        see https://www.materialpalette.com/lime/lime\n        \"\"\"\n        return cls(\n            name=\"lime\",\n            primary=\"#CDDC39\",\n            secondary=\"#F0F4C3\",\n            accent=\"#AFB42B\",\n            dark=\"#827717\",\n            positive=\"#4CAF50\",\n            negative=\"#D32F2F\",\n            info=\"#2196F3\",\n            warning=\"#FFC107\",\n        )\n\n    @classmethod\n    def indigo(cls):\n        \"\"\"\n        Return a color schema for the Indigo color palette from Material Palette.\n        see https://www.materialpalette.com/indigo/indigo\n        \"\"\"\n        color_schema = cls(\n            name=\"indigo\",\n            primary=\"#3F51B5\",\n            secondary=\"#5C6BC0\",\n            accent=\"#8A72AC\",\n            dark=\"#1A237E\",\n            positive=\"#28A745\",\n            negative=\"#D32F2F\",\n            info=\"#536DFE\",\n            warning=\"#FFB74D\",\n        )\n        return color_schema\n\n    @classmethod\n    def light_green(cls):\n        \"\"\"\n        Return a color schema for the Light Green color palette from Material Palette.\n        see https://www.materialpalette.com/green/light-green\n        \"\"\"\n        return cls(\n            name=\"light_green\",\n            primary=\"#8BC34A\",  # Light Green\n            secondary=\"#DCEDC8\",  # Lightest Green\n            accent=\"#689F38\",  # Dark Light Green\n            dark=\"#33691E\",  # Deepest Light Green\n            positive=\"#4CAF50\",  # Standard Positive Green\n            negative=\"#D32F2F\",  # Standard Negative Red\n            info=\"#2196F3\",  # Standard Info Blue\n            warning=\"#FFC107\",  # Standard Warning Amber\n        )\n\n    @classmethod\n    def green(cls):\n        \"\"\"\n        Return a color schema for the Green color palette from Material Palette.\n        see https://www.materialpalette.com/green/green\n        \"\"\"\n        return cls(\n            name=\"green\",\n            primary=\"#4CAF50\",\n            secondary=\"#C8E6C9\",\n            accent=\"#388E3C\",\n            dark=\"#1B5E20\",\n            positive=\"#4CAF50\",\n            negative=\"#D32F2F\",\n            info=\"#2196F3\",\n            warning=\"#FFC107\",\n        )\n\n    @classmethod\n    def yellow(cls):\n        \"\"\"\n        Return a color schema for the Yellow color palette from Material Palette.\n        see https://www.materialpalette.com/yellow/yellow\n        \"\"\"\n        return cls(\n            name=\"yellow\",\n            primary=\"#FFEB3B\",\n            secondary=\"#FFF9C4\",\n            accent=\"#FBC02D\",\n            dark=\"#F57F17\",\n            positive=\"#4CAF50\",\n            negative=\"#D32F2F\",\n            info=\"#2196F3\",\n            warning=\"#FFC107\",\n        )\n\n    @classmethod\n    def amber(cls):\n        \"\"\"\n        Return a color schema for the Amber color palette from Material Palette.\n        see https://www.materialpalette.com/amber/amber\n        \"\"\"\n        return cls(\n            name=\"amber\",\n            primary=\"#FFC107\",\n            secondary=\"#FFECB3\",\n            accent=\"#FFA000\",\n            dark=\"#FF8F00\",\n            positive=\"#4CAF50\",\n            negative=\"#D32F2F\",\n            info=\"#2196F3\",\n            warning=\"#FFC107\",\n        )\n\n    @classmethod\n    def orange(cls):\n        \"\"\"\n        Return a color schema for the Orange color palette from Material Palette.\n        see https://www.materialpalette.com/orange/orange\n        \"\"\"\n        return cls(\n            name=\"orange\",\n            primary=\"#FF9800\",\n            secondary=\"#FFE0B2\",\n            accent=\"#FF5722\",\n            dark=\"#E64A19\",\n            positive=\"#4CAF50\",\n            negative=\"#D32F2F\",\n            info=\"#2196F3\",\n            warning=\"#FFC107\",\n        )\n\n    @classmethod\n    def deep_orange(cls):\n        \"\"\"\n        Return a color schema for the Deep Orange color palette from Material Palette.\n        see https://www.materialpalette.com/orange/deep-orange\n        \"\"\"\n        return cls(\n            name=\"deep_orange\",\n            primary=\"#FF5722\",\n            secondary=\"#FFCCBC\",\n            accent=\"#E64A19\",\n            dark=\"#BF360C\",\n            positive=\"#4CAF50\",\n            negative=\"#D32F2F\",\n            info=\"#2196F3\",\n            warning=\"#FFC107\",\n        )\n\n    @classmethod\n    def brown(cls):\n        \"\"\"\n        Return a color schema for the Brown color palette from Material Palette.\n        see https://www.materialpalette.com/brown/brown\n        \"\"\"\n        return cls(\n            name=\"brown\",\n            primary=\"#795548\",\n            secondary=\"#D7CCC8\",\n            accent=\"#5D4037\",\n            dark=\"#3E2723\",\n            positive=\"#4CAF50\",\n            negative=\"#D32F2F\",\n            info=\"#2196F3\",\n            warning=\"#FFC107\",\n        )\n\n    @classmethod\n    def grey(cls):\n        \"\"\"\n        Return a color schema for the Grey color palette from Material Palette.\n        see https://www.materialpalette.com/grey/grey\n        \"\"\"\n        return cls(\n            name=\"grey\",\n            primary=\"#9E9E9E\",\n            secondary=\"#F5F5F5\",\n            accent=\"#616161\",\n            dark=\"#212121\",\n            positive=\"#4CAF50\",\n            negative=\"#D32F2F\",\n            info=\"#2196F3\",\n            warning=\"#FFC107\",\n        )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.amber","title":"<code>amber()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Amber color palette from Material Palette. see https://www.materialpalette.com/amber/amber</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef amber(cls):\n    \"\"\"\n    Return a color schema for the Amber color palette from Material Palette.\n    see https://www.materialpalette.com/amber/amber\n    \"\"\"\n    return cls(\n        name=\"amber\",\n        primary=\"#FFC107\",\n        secondary=\"#FFECB3\",\n        accent=\"#FFA000\",\n        dark=\"#FF8F00\",\n        positive=\"#4CAF50\",\n        negative=\"#D32F2F\",\n        info=\"#2196F3\",\n        warning=\"#FFC107\",\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.apply","title":"<code>apply()</code>","text":"<p>Apply this color schema to the current UI theme.</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>def apply(self):\n    \"\"\"\n    Apply this color schema to the current UI theme.\n    \"\"\"\n    ui.colors(\n        primary=self.primary,\n        secondary=self.secondary,\n        accent=self.accent,\n        dark=self.dark,\n        positive=self.positive,\n        negative=self.negative,\n        info=self.info,\n        warning=self.warning,\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.blue","title":"<code>blue()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Blue color palette from Material Palette. see https://www.materialpalette.com/blue/blue</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef blue(cls):\n    \"\"\"\n    Return a color schema for the Blue color palette from Material Palette.\n    see https://www.materialpalette.com/blue/blue\n    \"\"\"\n    return cls(\n        name=\"blue\",\n        primary=\"#2196F3\",  # Blue\n        secondary=\"#90CAF9\",  # Light Blue\n        accent=\"#1976D2\",  # Dark Blue\n        dark=\"#0D47A1\",  # Deepest Blue\n        positive=\"#4CAF50\",  # Standard Positive Green\n        negative=\"#D32F2F\",  # Standard Negative Red\n        info=\"#2196F3\",  # Standard Info Blue\n        warning=\"#FFC107\",  # Standard Warning Amber\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.blue_grey","title":"<code>blue_grey()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Blue Grey color palette from Material Palette. see https://www.materialpalette.com/grey/blue-grey</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef blue_grey(cls):\n    \"\"\"\n    Return a color schema for the Blue Grey color palette from Material Palette.\n    see https://www.materialpalette.com/grey/blue-grey\n    \"\"\"\n    return cls(\n        name=\"blue_grey\",\n        primary=\"#607D8B\",  # Blue Grey\n        secondary=\"#B0BEC5\",  # Light Blue Grey\n        accent=\"#37474F\",  # Dark Blue Grey\n        dark=\"#263238\",  # Deepest Blue Grey\n        positive=\"#4CAF50\",  # Standard Positive Green\n        negative=\"#D32F2F\",  # Standard Negative Red\n        info=\"#2196F3\",  # Standard Info Blue\n        warning=\"#FFC107\",  # Standard Warning Amber\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.brown","title":"<code>brown()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Brown color palette from Material Palette. see https://www.materialpalette.com/brown/brown</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef brown(cls):\n    \"\"\"\n    Return a color schema for the Brown color palette from Material Palette.\n    see https://www.materialpalette.com/brown/brown\n    \"\"\"\n    return cls(\n        name=\"brown\",\n        primary=\"#795548\",\n        secondary=\"#D7CCC8\",\n        accent=\"#5D4037\",\n        dark=\"#3E2723\",\n        positive=\"#4CAF50\",\n        negative=\"#D32F2F\",\n        info=\"#2196F3\",\n        warning=\"#FFC107\",\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.cyan","title":"<code>cyan()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Cyan color palette from Material Palette. see https://www.materialpalette.com/blue/cyan</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef cyan(cls):\n    \"\"\"\n    Return a color schema for the Cyan color palette from Material Palette.\n    see https://www.materialpalette.com/blue/cyan\n    \"\"\"\n    return cls(\n        name=\"cyan\",\n        primary=\"#00BCD4\",  # Cyan\n        secondary=\"#80DEEA\",  # Light Cyan\n        accent=\"#0097A7\",  # Dark Cyan\n        dark=\"#006064\",  # Deepest Cyan\n        positive=\"#4CAF50\",  # Standard Positive Green\n        negative=\"#D32F2F\",  # Standard Negative Red\n        info=\"#2196F3\",  # Standard Info Blue\n        warning=\"#FFC107\",  # Standard Warning Amber\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.deep_orange","title":"<code>deep_orange()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Deep Orange color palette from Material Palette. see https://www.materialpalette.com/orange/deep-orange</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef deep_orange(cls):\n    \"\"\"\n    Return a color schema for the Deep Orange color palette from Material Palette.\n    see https://www.materialpalette.com/orange/deep-orange\n    \"\"\"\n    return cls(\n        name=\"deep_orange\",\n        primary=\"#FF5722\",\n        secondary=\"#FFCCBC\",\n        accent=\"#E64A19\",\n        dark=\"#BF360C\",\n        positive=\"#4CAF50\",\n        negative=\"#D32F2F\",\n        info=\"#2196F3\",\n        warning=\"#FFC107\",\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.deep_purple","title":"<code>deep_purple()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Deep Purple color palette from Material Palette. see https://www.materialpalette.com/purple/deep-purple</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef deep_purple(cls):\n    \"\"\"\n    Return a color schema for the Deep Purple color palette from Material Palette.\n    see https://www.materialpalette.com/purple/deep-purple\n    \"\"\"\n    return cls(\n        name=\"deep_purple\",\n        primary=\"#673AB7\",  # Deep Purple\n        secondary=\"#9575CD\",  # Light Deep Purple\n        accent=\"#512DA8\",  # Dark Deep Purple\n        dark=\"#311B92\",  # Deepest Deep Purple\n        positive=\"#4CAF50\",  # Standard Positive Green\n        negative=\"#D32F2F\",  # Standard Negative Red\n        info=\"#2196F3\",  # Standard Info Blue\n        warning=\"#FFC107\",  # Standard Warning Amber\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.default","title":"<code>default()</code>  <code>classmethod</code>","text":"<p>Return the default color schema.</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef default(cls):\n    \"\"\"\n    Return the default color schema.\n    \"\"\"\n    return cls()\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.display","title":"<code>display()</code>","text":"<p>Display all available color schemas visually in the UI.</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>def display(self):\n    \"\"\"\n    Display all available color schemas visually in the UI.\n    \"\"\"\n    for schema in ColorSchema.get_schemas():\n        style = (\n            \"color: white;\"\n            \"width: 75px; \"\n            \"height: 50px; \"\n            \"border: 1px solid #000; \"\n            \"display: flex; \"\n            \"justify-content: center; \"\n            \"align-items: center; \"\n            \"border-radius: 5px;\"\n        )\n        with ui.row().style(\"margin-bottom: 10px;\"):\n            ui.label(schema.name).style(style + \"background:grey;\")\n            schema._display_color(\"Primary\", schema.primary, style)\n            schema._display_color(\"Secondary\", schema.secondary, style)\n            schema._display_color(\"Accent\", schema.accent, style)\n            schema._display_color(\"Dark\", schema.dark, style)\n            schema._display_color(\"Positive\", schema.positive, style)\n            schema._display_color(\"Negative\", schema.negative, style)\n            schema._display_color(\"Info\", schema.info, style)\n            schema._display_color(\"Warning\", schema.warning, style)\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.get_schemas","title":"<code>get_schemas()</code>  <code>classmethod</code>","text":"<p>Return a list of all available color schemas.</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef get_schemas(cls):\n    \"\"\"\n    Return a list of all available color schemas.\n    \"\"\"\n    return [\n        cls.default(),\n        cls.indigo(),\n        cls.red(),\n        cls.pink_red(),\n        cls.purple(),\n        cls.deep_purple(),\n        cls.blue(),\n        cls.light_blue(),\n        cls.cyan(),\n        cls.teal(),\n        cls.green(),\n        cls.light_green(),\n        cls.lime(),\n        cls.yellow(),\n        cls.amber(),\n        cls.orange(),\n        cls.deep_orange(),\n        cls.brown(),\n        cls.grey(),\n        cls.blue_grey(),\n    ]\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.green","title":"<code>green()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Green color palette from Material Palette. see https://www.materialpalette.com/green/green</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef green(cls):\n    \"\"\"\n    Return a color schema for the Green color palette from Material Palette.\n    see https://www.materialpalette.com/green/green\n    \"\"\"\n    return cls(\n        name=\"green\",\n        primary=\"#4CAF50\",\n        secondary=\"#C8E6C9\",\n        accent=\"#388E3C\",\n        dark=\"#1B5E20\",\n        positive=\"#4CAF50\",\n        negative=\"#D32F2F\",\n        info=\"#2196F3\",\n        warning=\"#FFC107\",\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.grey","title":"<code>grey()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Grey color palette from Material Palette. see https://www.materialpalette.com/grey/grey</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef grey(cls):\n    \"\"\"\n    Return a color schema for the Grey color palette from Material Palette.\n    see https://www.materialpalette.com/grey/grey\n    \"\"\"\n    return cls(\n        name=\"grey\",\n        primary=\"#9E9E9E\",\n        secondary=\"#F5F5F5\",\n        accent=\"#616161\",\n        dark=\"#212121\",\n        positive=\"#4CAF50\",\n        negative=\"#D32F2F\",\n        info=\"#2196F3\",\n        warning=\"#FFC107\",\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.indigo","title":"<code>indigo()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Indigo color palette from Material Palette. see https://www.materialpalette.com/indigo/indigo</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef indigo(cls):\n    \"\"\"\n    Return a color schema for the Indigo color palette from Material Palette.\n    see https://www.materialpalette.com/indigo/indigo\n    \"\"\"\n    color_schema = cls(\n        name=\"indigo\",\n        primary=\"#3F51B5\",\n        secondary=\"#5C6BC0\",\n        accent=\"#8A72AC\",\n        dark=\"#1A237E\",\n        positive=\"#28A745\",\n        negative=\"#D32F2F\",\n        info=\"#536DFE\",\n        warning=\"#FFB74D\",\n    )\n    return color_schema\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.light_blue","title":"<code>light_blue()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Light Blue color palette from Material Palette. see https://www.materialpalette.com/blue/light-blue</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef light_blue(cls):\n    \"\"\"\n    Return a color schema for the Light Blue color palette from Material Palette.\n    see https://www.materialpalette.com/blue/light-blue\n    \"\"\"\n    return cls(\n        name=\"light_blue\",\n        primary=\"#03A9F4\",  # Light Blue\n        secondary=\"#81D4FA\",  # Lightest Blue\n        accent=\"#0288D1\",  # Dark Light Blue\n        dark=\"#01579B\",  # Deepest Light Blue\n        positive=\"#4CAF50\",  # Standard Positive Green\n        negative=\"#D32F2F\",  # Standard Negative Red\n        info=\"#2196F3\",  # Standard Info Blue\n        warning=\"#FFC107\",  # Standard Warning Amber\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.light_green","title":"<code>light_green()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Light Green color palette from Material Palette. see https://www.materialpalette.com/green/light-green</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef light_green(cls):\n    \"\"\"\n    Return a color schema for the Light Green color palette from Material Palette.\n    see https://www.materialpalette.com/green/light-green\n    \"\"\"\n    return cls(\n        name=\"light_green\",\n        primary=\"#8BC34A\",  # Light Green\n        secondary=\"#DCEDC8\",  # Lightest Green\n        accent=\"#689F38\",  # Dark Light Green\n        dark=\"#33691E\",  # Deepest Light Green\n        positive=\"#4CAF50\",  # Standard Positive Green\n        negative=\"#D32F2F\",  # Standard Negative Red\n        info=\"#2196F3\",  # Standard Info Blue\n        warning=\"#FFC107\",  # Standard Warning Amber\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.lime","title":"<code>lime()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Lime color palette from Material Palette. see https://www.materialpalette.com/lime/lime</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef lime(cls):\n    \"\"\"\n    Return a color schema for the Lime color palette from Material Palette.\n    see https://www.materialpalette.com/lime/lime\n    \"\"\"\n    return cls(\n        name=\"lime\",\n        primary=\"#CDDC39\",\n        secondary=\"#F0F4C3\",\n        accent=\"#AFB42B\",\n        dark=\"#827717\",\n        positive=\"#4CAF50\",\n        negative=\"#D32F2F\",\n        info=\"#2196F3\",\n        warning=\"#FFC107\",\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.orange","title":"<code>orange()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Orange color palette from Material Palette. see https://www.materialpalette.com/orange/orange</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef orange(cls):\n    \"\"\"\n    Return a color schema for the Orange color palette from Material Palette.\n    see https://www.materialpalette.com/orange/orange\n    \"\"\"\n    return cls(\n        name=\"orange\",\n        primary=\"#FF9800\",\n        secondary=\"#FFE0B2\",\n        accent=\"#FF5722\",\n        dark=\"#E64A19\",\n        positive=\"#4CAF50\",\n        negative=\"#D32F2F\",\n        info=\"#2196F3\",\n        warning=\"#FFC107\",\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.pink_red","title":"<code>pink_red()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Pink/Red color palette from Material Palette. see https://www.materialpalette.com/pink/red</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef pink_red(cls):\n    \"\"\"\n    Return a color schema for the Pink/Red color palette from Material Palette.\n    see https://www.materialpalette.com/pink/red\n    \"\"\"\n    return cls(\n        name=\"pink_red\",\n        primary=\"#E91E63\",  # Pink\n        secondary=\"#F8BBD0\",  # Light Pink\n        accent=\"#C2185B\",  # Dark Pink\n        dark=\"#880E4F\",  # Deepest Pink\n        positive=\"#4CAF50\",  # Standard Positive Green\n        negative=\"#D32F2F\",  # Standard Negative Red\n        info=\"#2196F3\",  # Standard Info Blue\n        warning=\"#FFC107\",  # Standard Warning Amber\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.purple","title":"<code>purple()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Purple color palette from Material Palette. see https://www.materialpalette.com/purple/purple</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef purple(cls):\n    \"\"\"\n    Return a color schema for the Purple color palette from Material Palette.\n    see https://www.materialpalette.com/purple/purple\n    \"\"\"\n    return cls(\n        name=\"purple\",\n        primary=\"#9C27B0\",  # Purple\n        secondary=\"#CE93D8\",  # Light Purple\n        accent=\"#7B1FA2\",  # Dark Purple\n        dark=\"#4A148C\",  # Deepest Purple\n        positive=\"#4CAF50\",  # Standard Positive Green\n        negative=\"#D32F2F\",  # Standard Negative Red\n        info=\"#2196F3\",  # Standard Info Blue\n        warning=\"#FFC107\",  # Standard Warning Amber\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.red","title":"<code>red()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Red color palette from Material Palette. see https://www.materialpalette.com/red/red</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef red(cls):\n    \"\"\"\n    Return a color schema for the Red color palette from Material Palette.\n    see https://www.materialpalette.com/red/red\n    \"\"\"\n    return cls(\n        name=\"red\",\n        primary=\"#F44336\",\n        secondary=\"#FFCDD2\",\n        accent=\"#D32F2F\",\n        dark=\"#B71C1C\",\n        positive=\"#4CAF50\",\n        negative=\"#D32F2F\",\n        info=\"#2196F3\",\n        warning=\"#FFC107\",\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.teal","title":"<code>teal()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Teal color palette from Material Palette. see https://www.materialpalette.com/teal/teal</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef teal(cls):\n    \"\"\"\n    Return a color schema for the Teal color palette from Material Palette.\n    see https://www.materialpalette.com/teal/teal\n    \"\"\"\n    return cls(\n        name=\"teal\",\n        primary=\"#009688\",\n        secondary=\"#80CBC4\",\n        accent=\"#00796B\",\n        dark=\"#004D40\",\n        positive=\"#4CAF50\",\n        negative=\"#D32F2F\",\n        info=\"#2196F3\",\n        warning=\"#FFC107\",\n    )\n</code></pre>"},{"location":"#ngwidgets.color_schema.ColorSchema.yellow","title":"<code>yellow()</code>  <code>classmethod</code>","text":"<p>Return a color schema for the Yellow color palette from Material Palette. see https://www.materialpalette.com/yellow/yellow</p> Source code in <code>ngwidgets/color_schema.py</code> <pre><code>@classmethod\ndef yellow(cls):\n    \"\"\"\n    Return a color schema for the Yellow color palette from Material Palette.\n    see https://www.materialpalette.com/yellow/yellow\n    \"\"\"\n    return cls(\n        name=\"yellow\",\n        primary=\"#FFEB3B\",\n        secondary=\"#FFF9C4\",\n        accent=\"#FBC02D\",\n        dark=\"#F57F17\",\n        positive=\"#4CAF50\",\n        negative=\"#D32F2F\",\n        info=\"#2196F3\",\n        warning=\"#FFC107\",\n    )\n</code></pre>"},{"location":"#ngwidgets.combobox","title":"<code>combobox</code>","text":"<p>Created on 2024-07-04</p> <p>@author: wf</p>"},{"location":"#ngwidgets.combobox.ComboBox","title":"<code>ComboBox</code>","text":"<p>A ComboBox class that encapsulates a UI selection control which allows both drop-down and free-form text input, suitable for dynamic user interfaces.</p> <p>Attributes:</p> Name Type Description <code>label_base</code> <code>str</code> <p>The base text for the combobox label.</p> <code>options</code> <code>Iterable[str]</code> <p>The current list of options available in the combobox.</p> <code>select</code> <code>Select</code> <p>The UI component instance, allowing for both selection and direct input.</p> Source code in <code>ngwidgets/combobox.py</code> <pre><code>class ComboBox:\n    \"\"\"\n    A ComboBox class that encapsulates a UI selection control which allows both drop-down and free-form text input,\n    suitable for dynamic user interfaces.\n\n    Attributes:\n        label_base (str): The base text for the combobox label.\n        options (Iterable[str]): The current list of options available in the combobox.\n        select (ui.Select): The UI component instance, allowing for both selection and direct input.\n    \"\"\"\n\n    def __init__(\n        self, label: str, options: Iterable[str], width_chars: int = 40, **kwargs\n    ):\n        self.label_base = label\n        self.width_chars = width_chars\n        self.options = self.prepare_options(options)\n        self.select = None\n        self.kwargs = kwargs\n        self.setup_ui()\n\n    def prepare_options(self, options: Union[Iterable[str], Dict[str, str]]):\n        if isinstance(options, dict):\n            return options  # Use directly as dict supports 'items' which include both keys and values\n        if not isinstance(options, list):\n            options = list(options)\n        if all(options):\n            options = sorted(options)\n        return options  # Fallback if options is neither iterable nor dict\n\n    def setup_ui(self):\n        \"\"\"Initializes the UI component for the combobox with optional text input capability.\"\"\"\n        self.select = ui.select(\n            label=f\"{self.label_base} ({len(self.options)})\",\n            options=self.options,\n            with_input=True,  # Allows users to either select from the dropdown or enter custom text.\n            **self.kwargs,  # Pass all additional keyword arguments to the select component.\n        )\n        self.select.style(f\"width: {self.width_chars}ch\")  #\n\n    def update_options(\n        self, new_options: Iterable[str], limit: int = None, options_count: int = None\n    ):\n        \"\"\"Updates the options available in the combobox and refreshes the label, applying a limit to the number of items displayed if specified,\n        and showing total available options if different from displayed due to the limit.\n\n        Args:\n            new_options (Interable[str]): The new options to update in the combobox.\n            limit (int, optional): Maximum number of options to display. If None, all options are displayed.\n            options_count (int, optional): The total count of available options, relevant only if a limit is set.\n        \"\"\"\n        new_options = self.prepare_options(new_options)\n\n        # Apply limit if specified\n        if (\n            limit is not None\n            and isinstance(new_options, list)\n            and len(new_options) &gt; limit\n        ):\n            new_options = new_options[:limit]\n            # Use options_count to show how many are available in total\n            total_options = (\n                options_count if options_count is not None else len(new_options)\n            )\n            label_text = f\"{self.label_base} ({len(new_options)}/{total_options})\"\n        else:\n            label_text = f\"{self.label_base} ({len(new_options)})\"\n\n        self.options = new_options\n        self.select.options = self.options\n        self.select._props[\"label\"] = label_text = label_text\n\n        # Explicitly update the UI to reflect changes\n        self.select.update()\n</code></pre>"},{"location":"#ngwidgets.combobox.ComboBox.setup_ui","title":"<code>setup_ui()</code>","text":"<p>Initializes the UI component for the combobox with optional text input capability.</p> Source code in <code>ngwidgets/combobox.py</code> <pre><code>def setup_ui(self):\n    \"\"\"Initializes the UI component for the combobox with optional text input capability.\"\"\"\n    self.select = ui.select(\n        label=f\"{self.label_base} ({len(self.options)})\",\n        options=self.options,\n        with_input=True,  # Allows users to either select from the dropdown or enter custom text.\n        **self.kwargs,  # Pass all additional keyword arguments to the select component.\n    )\n    self.select.style(f\"width: {self.width_chars}ch\")  #\n</code></pre>"},{"location":"#ngwidgets.combobox.ComboBox.update_options","title":"<code>update_options(new_options, limit=None, options_count=None)</code>","text":"<p>Updates the options available in the combobox and refreshes the label, applying a limit to the number of items displayed if specified, and showing total available options if different from displayed due to the limit.</p> <p>Parameters:</p> Name Type Description Default <code>new_options</code> <code>Interable[str]</code> <p>The new options to update in the combobox.</p> required <code>limit</code> <code>int</code> <p>Maximum number of options to display. If None, all options are displayed.</p> <code>None</code> <code>options_count</code> <code>int</code> <p>The total count of available options, relevant only if a limit is set.</p> <code>None</code> Source code in <code>ngwidgets/combobox.py</code> <pre><code>def update_options(\n    self, new_options: Iterable[str], limit: int = None, options_count: int = None\n):\n    \"\"\"Updates the options available in the combobox and refreshes the label, applying a limit to the number of items displayed if specified,\n    and showing total available options if different from displayed due to the limit.\n\n    Args:\n        new_options (Interable[str]): The new options to update in the combobox.\n        limit (int, optional): Maximum number of options to display. If None, all options are displayed.\n        options_count (int, optional): The total count of available options, relevant only if a limit is set.\n    \"\"\"\n    new_options = self.prepare_options(new_options)\n\n    # Apply limit if specified\n    if (\n        limit is not None\n        and isinstance(new_options, list)\n        and len(new_options) &gt; limit\n    ):\n        new_options = new_options[:limit]\n        # Use options_count to show how many are available in total\n        total_options = (\n            options_count if options_count is not None else len(new_options)\n        )\n        label_text = f\"{self.label_base} ({len(new_options)}/{total_options})\"\n    else:\n        label_text = f\"{self.label_base} ({len(new_options)})\"\n\n    self.options = new_options\n    self.select.options = self.options\n    self.select._props[\"label\"] = label_text = label_text\n\n    # Explicitly update the UI to reflect changes\n    self.select.update()\n</code></pre>"},{"location":"#ngwidgets.components","title":"<code>components</code>","text":"<p>Created on 2023-12-16</p> <p>This components module has the classes Component and Components for managing components of an online software components bazaar It was created for nicegui components but may be adapted to other context by modifying the topic,</p> <p>Prompts for LLM:  - Create Python classes Component and Components for managing UI components, including loading and saving functionality. - Develop a data class in Python to represent a UI component with the attributes:     name: The title or identifier of the component.     source: A web link directing to where the component's code can be found.     demo_url: A web link to an image or video showing the component in action.     doc_url: A web link to any documentation or detailed information about the component.     issue: Reference to any known issues or bugs related to the component, typically tracked on platforms like GitHub.     fixed: Date marking when any known issues or bugs with the component were resolved. - Implement methods in Components to load and save a collection of Component instances from/to a YAML file.</p> <p>Main author: OpenAI's language model (instructed by WF)</p>"},{"location":"#ngwidgets.components.Component","title":"<code>Component</code>","text":"<p>Represents a single component with its associated metadata.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the component.</p> <code>description(str)</code> <code>str</code> <p>a multiline description of the component</p> <code>source</code> <code>Optional[str]</code> <p>The source code URL of the component, if available.</p> <code>demo_url</code> <code>Optional[str]</code> <p>The URL of an online demo of the component, if available.</p> <code>demo_image_url</code> <code>Optional[str]</code> <p>The URL of a picture and/or video demonstrating the component, if available.</p> <code>doc_url</code> <code>Optional[str]</code> <p>The URL of the documentation for the component, if available.</p> <code>issue</code> <code>Optional[str]</code> <p>The identifier for any related issue (github), if applicable.</p> <code>fixed</code> <code>Optional[str]</code> <p>The date on which any related issue was fixed, if applicable.</p> Source code in <code>ngwidgets/components.py</code> <pre><code>@lod_storable\nclass Component:\n    \"\"\"\n    Represents a single component with its associated metadata.\n\n    Attributes:\n        name (str): The name of the component.\n        description(str): a multiline description of the component\n        source (Optional[str]): The source code URL of the component, if available.\n        demo_url (Optional[str]): The URL of an online demo of the component, if available.\n        demo_image_url (Optional[str]): The URL of a picture and/or video demonstrating the component, if available.\n        doc_url (Optional[str]): The URL of the documentation for the component, if available.\n        issue (Optional[str]): The identifier for any related issue (github), if applicable.\n        fixed (Optional[str]): The date on which any related issue was fixed, if applicable.\n    \"\"\"\n\n    name: str\n    description: Optional[str] = None\n    source: Optional[str] = None\n    demo_url: Optional[str] = None\n    demo_image_url: Optional[str] = None\n    doc_url: Optional[str] = None\n    issue: Optional[int] = None\n    fixed: Optional[str] = None\n</code></pre>"},{"location":"#ngwidgets.components.Components","title":"<code>Components</code>","text":"<p>Components</p> Source code in <code>ngwidgets/components.py</code> <pre><code>@lod_storable\nclass Components:\n    \"\"\"\n    Components\n    \"\"\"\n\n    version: Optional[str] = None\n    components: List[Component] = field(default_factory=list)\n</code></pre>"},{"location":"#ngwidgets.components_view","title":"<code>components_view</code>","text":"<p>Created on 2023-12-16</p> <p>@author: wf</p>"},{"location":"#ngwidgets.components_view.ComponentView","title":"<code>ComponentView</code>","text":"<p>Display a single component</p> Source code in <code>ngwidgets/components_view.py</code> <pre><code>class ComponentView:\n    \"\"\"\n    Display a single component\n    \"\"\"\n\n    def __init__(self, project: Project, component: Component):\n        self.project = project\n        self.component = component\n\n    def setup(self, container) -&gt; ui.card:\n        \"\"\"\n        Setup a card for the component\n        \"\"\"\n        with container:\n            self.card = ui.card()\n            with self.card:\n                with ui.row().classes(\"flex w-full items-center\"):\n                    # Title\n                    title = f\"{self.component.name}\"\n                    ui.label(title).classes(\"text-2xl\")\n                    html_markup = \"\"\n                    delim = \"\"\n                    if self.component.demo_url:\n                        link = Link.create(self.component.demo_url, \"demo\")\n                        html_markup += link\n                        delim = \" \"\n                    if self.component.source:\n                        url = self.project.components_url.replace(\n                            \"/.components.yaml\", self.component.source\n                        )\n                        link = Link.create(url, self.component.name)\n                        html_markup += delim + link\n                        delim = \" \"\n                    if self.component.issue:\n                        url = f\"{self.project.github}/issues/{self.component.issue}\"\n                        link = Link.create(url, f\"#{self.component.issue}\")\n                        html_markup += delim + link\n                        delim = \" \"\n                    ui.html(html_markup)\n                    if self.component.demo_image_url:\n                        ui.image(self.component.demo_image_url)\n                    if self.component.description:\n                        ui.label(self.component.description)\n</code></pre>"},{"location":"#ngwidgets.components_view.ComponentView.setup","title":"<code>setup(container)</code>","text":"<p>Setup a card for the component</p> Source code in <code>ngwidgets/components_view.py</code> <pre><code>def setup(self, container) -&gt; ui.card:\n    \"\"\"\n    Setup a card for the component\n    \"\"\"\n    with container:\n        self.card = ui.card()\n        with self.card:\n            with ui.row().classes(\"flex w-full items-center\"):\n                # Title\n                title = f\"{self.component.name}\"\n                ui.label(title).classes(\"text-2xl\")\n                html_markup = \"\"\n                delim = \"\"\n                if self.component.demo_url:\n                    link = Link.create(self.component.demo_url, \"demo\")\n                    html_markup += link\n                    delim = \" \"\n                if self.component.source:\n                    url = self.project.components_url.replace(\n                        \"/.components.yaml\", self.component.source\n                    )\n                    link = Link.create(url, self.component.name)\n                    html_markup += delim + link\n                    delim = \" \"\n                if self.component.issue:\n                    url = f\"{self.project.github}/issues/{self.component.issue}\"\n                    link = Link.create(url, f\"#{self.component.issue}\")\n                    html_markup += delim + link\n                    delim = \" \"\n                ui.html(html_markup)\n                if self.component.demo_image_url:\n                    ui.image(self.component.demo_image_url)\n                if self.component.description:\n                    ui.label(self.component.description)\n</code></pre>"},{"location":"#ngwidgets.components_view.ComponentsView","title":"<code>ComponentsView</code>","text":"<p>Display a collection of components in a grid layout</p> Source code in <code>ngwidgets/components_view.py</code> <pre><code>class ComponentsView:\n    \"\"\"\n    Display a collection of components in a grid layout\n    \"\"\"\n\n    def __init__(\n        self, webserver: \"InputWebserver\", projects: Projects, project: Project\n    ):\n        self.webserver = webserver\n        self.projects = projects\n        self.project = project\n        self.components = project.get_components(projects.default_directory)\n        self.displayed_components = []\n        self.container = None\n        self.slider = None\n        self.page_size = 8\n\n    def setup(self):\n        \"\"\"\n        Set up the UI elements to render the collection of components\n        as a grid layout with four columns.\n        \"\"\"\n        self.project_container = ui.grid(columns=4)\n        self.project_view = ProjectView(self.project)\n        self.project_view.setup(self.project_container)\n        if self.components:\n            self.slider = ui.slider(\n                min=1,\n                max=len(self.components.components) // self.page_size + 1,\n                step=1,\n                value=1,\n                on_change=self.update_display,\n            )\n            self.container = ui.grid(columns=4)\n        self.update_display()\n\n    def update_display(self, *_args):\n        \"\"\"\n        Update the displayed components based on the slider's position\n        \"\"\"\n        if not self.components:\n            return\n        start_index = (self.slider.value - 1) * self.page_size\n        end_index = start_index + self.page_size\n        displayed_components = self.components.components[start_index:end_index]\n\n        # Clear existing components in the container\n        self.container.clear()\n\n        # Add new components to the container\n        with self.container:\n            for component in displayed_components:\n                cv = ComponentView(self.project, component)\n                cv.setup(self.container)\n</code></pre>"},{"location":"#ngwidgets.components_view.ComponentsView.setup","title":"<code>setup()</code>","text":"<p>Set up the UI elements to render the collection of components as a grid layout with four columns.</p> Source code in <code>ngwidgets/components_view.py</code> <pre><code>def setup(self):\n    \"\"\"\n    Set up the UI elements to render the collection of components\n    as a grid layout with four columns.\n    \"\"\"\n    self.project_container = ui.grid(columns=4)\n    self.project_view = ProjectView(self.project)\n    self.project_view.setup(self.project_container)\n    if self.components:\n        self.slider = ui.slider(\n            min=1,\n            max=len(self.components.components) // self.page_size + 1,\n            step=1,\n            value=1,\n            on_change=self.update_display,\n        )\n        self.container = ui.grid(columns=4)\n    self.update_display()\n</code></pre>"},{"location":"#ngwidgets.components_view.ComponentsView.update_display","title":"<code>update_display(*_args)</code>","text":"<p>Update the displayed components based on the slider's position</p> Source code in <code>ngwidgets/components_view.py</code> <pre><code>def update_display(self, *_args):\n    \"\"\"\n    Update the displayed components based on the slider's position\n    \"\"\"\n    if not self.components:\n        return\n    start_index = (self.slider.value - 1) * self.page_size\n    end_index = start_index + self.page_size\n    displayed_components = self.components.components[start_index:end_index]\n\n    # Clear existing components in the container\n    self.container.clear()\n\n    # Add new components to the container\n    with self.container:\n        for component in displayed_components:\n            cv = ComponentView(self.project, component)\n            cv.setup(self.container)\n</code></pre>"},{"location":"#ngwidgets.dateparser","title":"<code>dateparser</code>","text":"<p>Created on 2023-12-03</p> <p>@author: wf</p>"},{"location":"#ngwidgets.dateparser.DateParser","title":"<code>DateParser</code>","text":"<p>A parser for converting date strings with timezone information into ISO 8601 format.</p> <p>Attributes:</p> Name Type Description <code>aliases</code> <code>list</code> <p>A list of tuples mapping timezone string aliases to their canonical form.</p> <code>whois_timezone_info</code> <code>dict</code> <p>A dictionary mapping timezone abbreviations to their UTC offsets.</p> Source code in <code>ngwidgets/dateparser.py</code> <pre><code>class DateParser:\n    \"\"\"A parser for converting date strings with timezone information into ISO 8601 format.\n\n    Attributes:\n        aliases (list): A list of tuples mapping timezone string aliases to their canonical form.\n        whois_timezone_info (dict): A dictionary mapping timezone abbreviations to their UTC offsets.\n    \"\"\"\n\n    def __init__(self):\n        # https://stackoverflow.com/a/54629675/1497139\n        self.aliases = [\n            ('\"GMT\"', \"(GMT)\"),\n            (\"(WET DST)\", \"(WEST)\"),\n            (\"+0200 (MET DST)\", \"+0200\"),\n            (\"+0200 (METDST)\", \"+0200\"),\n            (\" METDST\", \" +0200\"),\n            (\" MET DST\", \" +0200\"),\n            (\"(GMT)\", \"+0000\"),\n            (\"+0100 (GMT Daylight Time)\", \"+0100\"),\n            (\"+0100 (Etc/GMT)\", \"-0100\"),\n            (\"Etc/GMT\", \"-0000\"),\n            (\" pst\", \" PST\"),  # Convert lowercase 'pst' to uppercase 'PST'\n            (\" est\", \" EST\"),\n            (\"(MSK/MSD)\", \"(MSK)\"),\n            (\"(GMT Standard Time)\", \"(GMT)\"),\n            (\"(Mountain Daylight Time)\", \"(MDT)\"),\n            (\" Eastern Daylight Time\", \"-0800 (EDT)\"),\n            (\"(Eastern Standard Time)\", \"(EST)\"),\n            (\"(Eastern Daylight Time)\", \"(EDT)\"),\n            (\"(Pacific Daylight Time)\", \"(PDT)\"),\n            (\"(Eastern Standard Time)\", \"(EST)\"),\n        ]\n        self.regexp_aliases = [\n            # remove superfluous (added by ...)\n            (r\"\\(added by [^\\)]+\\)\", \"\"),\n            # Regular expression to remove conflicting timezone information like (GMT-1)\n            # but only if it follows a standard timezone offset like +0100\n            # example +0100 (GMT-1)\n            (r\"(\\+\\d{4}|\\-\\d{4}) \\(GMT[+-]\\d+\\)\", r\"\\1\"),\n            # Regular expression to correct conflicting timezone information like +-0100\n            # +-0100\n            (r\"\\+\\-(\\d{4})\", r\"-\\1\"),  # Convert +-0100 to -0100\n            # Regular expression to correct timezone information like +-800\n            (r\"\\+\\-(\\d{3})\", r\"-0\\1\"),  # Convert +-800 to -0800\n        ]\n        # Add generic aliases for a range of timezones\n        for hour in range(-12, 15):  # Ranges from GMT-12 to GMT+14\n            sign = \"+\" if hour &gt;= 0 else \"-\"\n            hour_abs = abs(hour)\n\n            # Example: (\"(GMT+00:00)\",\"+0000\")\n            self.aliases.append(\n                (f\"(GMT{sign}{hour_abs:02d}:00)\", f\"{sign}{hour_abs:02d}00\")\n            )\n            # Example: (\"(GMT-1)\",\"-0100\"),\n            self.aliases.append((f\"(GMT{sign}{hour})\", f\"{sign}0{hour_abs}00\"))\n\n            # Handling Etc/GMT formats\n            # Example: (\"Etc/GMT+1\", \"+0100\")\n            gmt_sign = \"\" if hour &lt;= 0 else \"+\"\n            self.aliases.append((f\"Etc/GMT{gmt_sign}{hour}\", f\"{sign}{hour_abs:02d}00\"))\n\n        self.timezone_hours = {\n            \"AoE\": {\"offset\": -12, \"description\": \"Anywhere on Earth\"},\n            \"Y\": {\"offset\": -12, \"description\": \"Yankee Time Zone\"},\n            \"NUT\": {\"offset\": -11, \"description\": \"Niue Time\"},\n            \"SST\": {\"offset\": -11, \"description\": \"Samoa Standard Time\"},\n            \"X\": {\"offset\": -11, \"description\": \"X-ray Time Zone\"},\n            \"CKT\": {\"offset\": -10, \"description\": \"Cook Island Time\"},\n            \"HST\": {\"offset\": -10, \"description\": \"Hawaii Standard Time\"},\n            \"TAHT\": {\"offset\": -10, \"description\": \"Tahiti Time\"},\n            \"W\": {\"offset\": -10, \"description\": \"Whiskey Time Zone\"},\n            \"AKST\": {\"offset\": -9, \"description\": \"Alaska Standard Time\"},\n            \"GAMT\": {\"offset\": -9, \"description\": \"Gambier Time\"},\n            \"HDT\": {\"offset\": -9, \"description\": \"Hawaii-Aleutian Daylight Time\"},\n            \"V\": {\"offset\": -9, \"description\": \"Victor Time Zone\"},\n            \"AKDT\": {\"offset\": -8, \"description\": \"Alaska Daylight Time\"},\n            \"PST\": {\"offset\": -8, \"description\": \"Pacific Standard Time\"},\n            \"PT\": {\"offset\": -8, \"description\": \"Pacific Time\"},\n            \"U\": {\"offset\": -8, \"description\": \"Uniform Time Zone\"},\n            \"MST\": {\"offset\": -7, \"description\": \"Mountain Standard Time\"},\n            \"MT\": {\"offset\": -7, \"description\": \"Mountain Time\"},\n            \"PDT\": {\"offset\": -7, \"description\": \"Pacific Daylight Time\"},\n            \"T\": {\"offset\": -7, \"description\": \"Tango Time Zone\"},\n            \"CST\": {\"offset\": -6, \"description\": \"Central Standard Time\"},\n            \"CT\": {\"offset\": -6, \"description\": \"Central Time\"},\n            \"EAST\": {\"offset\": -6, \"description\": \"Easter Island Standard Time\"},\n            \"GALT\": {\"offset\": -6, \"description\": \"Galapagos Time\"},\n            \"MDT\": {\"offset\": -6, \"description\": \"Mountain Daylight Time\"},\n            \"S\": {\"offset\": -6, \"description\": \"Sierra Time Zone\"},\n            \"ACT\": {\"offset\": -5, \"description\": \"Acre Time\"},\n            \"CDT\": {\"offset\": -5, \"description\": \"Central Daylight Time\"},\n            \"CIST\": {\"offset\": -5, \"description\": \"Clipperton Island Standard Time\"},\n            \"COT\": {\"offset\": -5, \"description\": \"Colombia Time\"},\n            \"EASST\": {\"offset\": -5, \"description\": \"Easter Island Summer Time\"},\n            \"ECT\": {\"offset\": -5, \"description\": \"Ecuador Time\"},\n            \"EST\": {\"offset\": -5, \"description\": \"Eastern Standard Time\"},\n            \"ET\": {\"offset\": -5, \"description\": \"Eastern Time\"},\n            \"PET\": {\"offset\": -5, \"description\": \"Peru Time\"},\n            \"R\": {\"offset\": -5, \"description\": \"Romeo Time Zone\"},\n            \"AMT\": {\"offset\": -4, \"description\": \"Amazon Time\"},\n            \"AT\": {\"offset\": -4, \"description\": \"Atlantic Time\"},\n            \"BOT\": {\"offset\": -4, \"description\": \"Bolivia Time\"},\n            \"CIDST\": {\"offset\": -4, \"description\": \"Cambridge Bay Daylight Time\"},\n            \"CLT\": {\"offset\": -4, \"description\": \"Chile Standard Time\"},\n            \"EDT\": {\"offset\": -4, \"description\": \"Eastern Daylight Time\"},\n            \"FKT\": {\"offset\": -4, \"description\": \"Falkland Islands Time\"},\n            \"GYT\": {\"offset\": -4, \"description\": \"Guyana Time\"},\n            \"PYT\": {\"offset\": -4, \"description\": \"Paraguay Time\"},\n            \"Q\": {\"offset\": -4, \"description\": \"Quebec Time Zone\"},\n            \"VET\": {\"offset\": -4, \"description\": \"Venezuelan Standard Time\"},\n            \"AMST\": {\"offset\": -3, \"description\": \"Amazon Summer Time\"},\n            \"ART\": {\"offset\": -3, \"description\": \"Argentina Time\"},\n            \"BRT\": {\"offset\": -3, \"description\": \"Brasilia Time\"},\n            \"CLST\": {\"offset\": -3, \"description\": \"Chile Summer Time\"},\n            \"FKST\": {\"offset\": -3, \"description\": \"Falkland Islands Summer Time\"},\n            \"GFT\": {\"offset\": -3, \"description\": \"French Guiana Time\"},\n            \"P\": {\"offset\": -3, \"description\": \"Papa Time Zone\"},\n            \"PMST\": {\"offset\": -3, \"description\": \"Pierre &amp; Miquelon Standard Time\"},\n            \"PYST\": {\"offset\": -3, \"description\": \"Paraguay Summer Time\"},\n            \"ROTT\": {\"offset\": -3, \"description\": \"Rothera Time\"},\n            \"SRT\": {\"offset\": -3, \"description\": \"Suriname Time\"},\n            \"UYT\": {\"offset\": -3, \"description\": \"Uruguay Time\"},\n            \"WARST\": {\"offset\": -3, \"description\": \"Western Argentina Summer Time\"},\n            \"WGT\": {\"offset\": -3, \"description\": \"West Greenland Time\"},\n            \"BRST\": {\"offset\": -2, \"description\": \"Brasilia Summer Time\"},\n            \"FNT\": {\"offset\": -2, \"description\": \"Fernando de Noronha Time\"},\n            \"O\": {\"offset\": -2, \"description\": \"Oscar Time Zone\"},\n            \"PMDT\": {\"offset\": -2, \"description\": \"Pierre &amp; Miquelon Daylight Time\"},\n            \"UYST\": {\"offset\": -2, \"description\": \"Uruguay Summer Time\"},\n            \"WGST\": {\"offset\": -2, \"description\": \"West Greenland Summer Time\"},\n            \"AZOT\": {\"offset\": -1, \"description\": \"Azores Standard Time\"},\n            \"CVT\": {\"offset\": -1, \"description\": \"Cape Verde Time\"},\n            \"EGT\": {\"offset\": -1, \"description\": \"Eastern Greenland Time\"},\n            \"N\": {\"offset\": -1, \"description\": \"November Time Zone\"},\n            \"AZOST\": {\"offset\": 0, \"description\": \"Azores Summer Time\"},\n            \"EGST\": {\"offset\": 0, \"description\": \"Eastern Greenland Summer Time\"},\n            \"GMT\": {\"offset\": 0, \"description\": \"Greenwich Mean Time\"},\n            \"UT\": {\"offset\": 0, \"description\": \"Universal Time\"},\n            \"UTC\": {\"offset\": 0, \"description\": \"Coordinated Universal Time\"},\n            \"WET\": {\"offset\": 0, \"description\": \"Western European Time\"},\n            \"WT\": {\"offset\": 0, \"description\": \"Western Sahara Standard Time\"},\n            \"Z\": {\"offset\": 0, \"description\": \"Zulu Time Zone\"},\n            \"A\": {\"offset\": 1, \"description\": \"Alpha Time Zone\"},\n            \"CET\": {\"offset\": 1, \"description\": \"Central European Time\"},\n            \"MET\": {\"offset\": 1, \"description\": \"Middle European Time\"},\n            \"MEZ\": {\"offset\": 1, \"description\": \"Middle European Time\"},\n            \"WAT\": {\"offset\": 1, \"description\": \"West Africa Time\"},\n            \"WEST\": {\"offset\": 1, \"description\": \"Western European Summer Time\"},\n            \"B\": {\"offset\": 2, \"description\": \"Bravo Time Zone\"},\n            \"CAT\": {\"offset\": 2, \"description\": \"Central Africa Time\"},\n            \"CEDT\": {\"offset\": 2, \"description\": \"Central European Daylight Time\"},\n            \"CES\": {\"offset\": 2, \"description\": \"Central European Summer Time\"},\n            \"CEST\": {\"offset\": 2, \"description\": \"Central European Summer Time\"},\n            \"EET\": {\"offset\": 2, \"description\": \"Eastern European Time\"},\n            \"MES\": {\"offset\": 2, \"description\": \"Middle European Summer Time\"},\n            \"MEST\": {\"offset\": 2, \"description\": \"Middle European Summer Time\"},\n            \"MESZ\": {\"offset\": 2, \"description\": \"Middle European Summer Time\"},\n            \"METDST\": {\n                \"offset\": 2,\n                \"description\": \"Middle European Time Daylight Saving Time\",\n            },\n            \"MET DST\": {\n                \"offset\": 2,\n                \"description\": \"Middle European Time Daylight Saving Time\",\n            },\n            \"SAST\": {\"offset\": 2, \"description\": \"South Africa Standard Time\"},\n            \"WAST\": {\"offset\": 2, \"description\": \"West Africa Summer Time\"},\n            \"NDT\": {\"offset\": 2.5, \"description\": \"Newfoundland Daylight Time\"},\n            \"AST\": {\"offset\": 3, \"description\": \"Arabia Standard Time\"},\n            \"C\": {\"offset\": 3, \"description\": \"Charlie Time Zone\"},\n            \"EAT\": {\"offset\": 3, \"description\": \"East Africa Time\"},\n            \"EEST\": {\"offset\": 3, \"description\": \"Eastern European Summer Time\"},\n            \"FET\": {\"offset\": 3, \"description\": \"Further-Eastern European Time\"},\n            \"IDT\": {\"offset\": 3, \"description\": \"Israel Daylight Time\"},\n            \"MSK\": {\"offset\": 3, \"description\": \"Moscow Time\"},\n            \"SYOT\": {\"offset\": 3, \"description\": \"Syowa Time\"},\n            \"TRT\": {\"offset\": 3, \"description\": \"Turkey Time\"},\n            \"IRST\": {\"offset\": 3.5, \"description\": \"Iran Standard Time\"},\n            \"NST\": {\"offset\": 3.5, \"description\": \"Newfoundland Standard Time\"},\n            \"ADT\": {\"offset\": 4, \"description\": \"Atlantic Daylight Time\"},\n            \"AZT\": {\"offset\": 4, \"description\": \"Azerbaijan Time\"},\n            \"D\": {\"offset\": 4, \"description\": \"Delta Time Zone\"},\n            \"GET\": {\"offset\": 4, \"description\": \"Georgia Standard Time\"},\n            \"GST\": {\"offset\": 4, \"description\": \"Gulf Standard Time\"},\n            \"KUYT\": {\"offset\": 4, \"description\": \"Kuybyshev Time\"},\n            \"MSD\": {\"offset\": 4, \"description\": \"Moscow Daylight Time\"},\n            \"MUT\": {\"offset\": 4, \"description\": \"Mauritius Time\"},\n            \"RET\": {\"offset\": 4, \"description\": \"R\u00e9union Time\"},\n            \"SAMT\": {\"offset\": 4, \"description\": \"Samara Time\"},\n            \"SCT\": {\"offset\": 4, \"description\": \"Seychelles Time\"},\n            \"AFT\": {\"offset\": 4.5, \"description\": \"Afghanistan Time\"},\n            \"IRDT\": {\"offset\": 4.5, \"description\": \"Iran Daylight Time\"},\n            \"AQTT\": {\"offset\": 5, \"description\": \"Aqtobe Time\"},\n            \"AZST\": {\"offset\": 5, \"description\": \"Azerbaijan Summer Time\"},\n            \"E\": {\"offset\": 5, \"description\": \"Echo Time Zone\"},\n            \"MAWT\": {\"offset\": 5, \"description\": \"Mawson Station Time\"},\n            \"MVT\": {\"offset\": 5, \"description\": \"Maldives Time\"},\n            \"ORAT\": {\"offset\": 5, \"description\": \"Oral Time\"},\n            \"PKT\": {\"offset\": 5, \"description\": \"Pakistan Standard Time\"},\n            \"TFT\": {\"offset\": 5, \"description\": \"French Southern and Antarctic Time\"},\n            \"TJT\": {\"offset\": 5, \"description\": \"Tajikistan Time\"},\n            \"TMT\": {\"offset\": 5, \"description\": \"Turkmenistan Time\"},\n            \"UZT\": {\"offset\": 5, \"description\": \"Uzbekistan Time\"},\n            \"YEKT\": {\"offset\": 5, \"description\": \"Yekaterinburg Time\"},\n            \"IST\": {\"offset\": 5.5, \"description\": \"Indian Standard Time\"},\n            \"NPT\": {\"offset\": 5.5, \"description\": \"Nepal Time\"},\n            \"ALMT\": {\"offset\": 6, \"description\": \"Alma-Ata Time\"},\n            \"BST\": {\"offset\": 6, \"description\": \"Bangladesh Standard Time\"},\n            \"BTT\": {\"offset\": 6, \"description\": \"Bhutan Time\"},\n            \"F\": {\"offset\": 6, \"description\": \"Foxtrot Time Zone\"},\n            \"IOT\": {\"offset\": 6, \"description\": \"Indian Ocean Time\"},\n            \"KGT\": {\"offset\": 6, \"description\": \"Kyrgyzstan Time\"},\n            \"OMST\": {\"offset\": 6, \"description\": \"Omsk Time\"},\n            \"QYZT\": {\"offset\": 6, \"description\": \"Qyzylorda Time\"},\n            \"VOST\": {\"offset\": 6, \"description\": \"Vostok Station Time\"},\n            \"YEKST\": {\"offset\": 6, \"description\": \"Yekaterinburg Summer Time\"},\n            \"CCT\": {\"offset\": 6.5, \"description\": \"Cocos Islands Time\"},\n            \"MMT\": {\"offset\": 6.5, \"description\": \"Myanmar Time\"},\n            \"CXT\": {\"offset\": 7, \"description\": \"Christmas Island Time\"},\n            \"DAVT\": {\"offset\": 7, \"description\": \"Davis Time\"},\n            \"G\": {\"offset\": 7, \"description\": \"Golf Time Zone\"},\n            \"HOVT\": {\"offset\": 7, \"description\": \"Hovd Time\"},\n            \"ICT\": {\"offset\": 7, \"description\": \"Indochina Time\"},\n            \"KRAT\": {\"offset\": 7, \"description\": \"Krasnoyarsk Time\"},\n            \"NOVST\": {\"offset\": 7, \"description\": \"Novosibirsk Summer Time\"},\n            \"NOVT\": {\"offset\": 7, \"description\": \"Novosibirsk Time\"},\n            \"OMSST\": {\"offset\": 7, \"description\": \"Omsk Summer Time\"},\n            \"WIB\": {\"offset\": 7, \"description\": \"Western Indonesia Time\"},\n            \"AWST\": {\"offset\": 8, \"description\": \"Australian Western Standard Time\"},\n            \"BNT\": {\"offset\": 8, \"description\": \"Brunei Time\"},\n            \"CAST\": {\"offset\": 8, \"description\": \"Casey Time\"},\n            \"CHOT\": {\"offset\": 8, \"description\": \"Choibalsan Time\"},\n            \"H\": {\"offset\": 8, \"description\": \"Hotel Time Zone\"},\n            \"HKT\": {\"offset\": 8, \"description\": \"Hong Kong Time\"},\n            \"HOVST\": {\"offset\": 8, \"description\": \"Hovd Summer Time\"},\n            \"IRKT\": {\"offset\": 8, \"description\": \"Irkutsk Time\"},\n            \"KRAST\": {\"offset\": 8, \"description\": \"Krasnoyarsk Summer Time\"},\n            \"MYT\": {\"offset\": 8, \"description\": \"Malaysia Time\"},\n            \"PHT\": {\"offset\": 8, \"description\": \"Philippine Time\"},\n            \"SGT\": {\"offset\": 8, \"description\": \"Singapore Time\"},\n            \"ULAT\": {\"offset\": 8, \"description\": \"Ulaanbaatar Time\"},\n            \"WITA\": {\"offset\": 8, \"description\": \"Central Indonesia Time\"},\n            \"ACWST\": {\n                \"offset\": 8.75,\n                \"description\": \"Australian Central Western Standard Time\",\n            },\n            \"AWDT\": {\"offset\": 9, \"description\": \"Australian Western Daylight Time\"},\n            \"CHOST\": {\"offset\": 9, \"description\": \"Choibalsan Summer Time\"},\n            \"I\": {\"offset\": 9, \"description\": \"India Time Zone\"},\n            \"IRKST\": {\"offset\": 9, \"description\": \"Irkutsk Summer Time\"},\n            \"JST\": {\"offset\": 9, \"description\": \"Japan Standard Time\"},\n            \"KST\": {\"offset\": 9, \"description\": \"Korea Standard Time\"},\n            \"PWT\": {\"offset\": 9, \"description\": \"Palau Time\"},\n            \"TLT\": {\"offset\": 9, \"description\": \"Timor Leste Time\"},\n            \"ULAST\": {\"offset\": 9, \"description\": \"Ulaanbaatar Summer Time\"},\n            \"WIT\": {\"offset\": 9, \"description\": \"Eastern Indonesia Time\"},\n            \"YAKT\": {\"offset\": 9, \"description\": \"Yakutsk Time\"},\n            \"ACST\": {\"offset\": 9.5, \"description\": \"Australian Central Standard Time\"},\n            \"MART\": {\"offset\": 9.5, \"description\": \"Marquesas Time\"},\n            \"AEST\": {\"offset\": 10, \"description\": \"Australian Eastern Standard Time\"},\n            \"AET\": {\"offset\": 10, \"description\": \"Australian Eastern Time\"},\n            \"CHUT\": {\"offset\": 10, \"description\": \"Chuuk Time\"},\n            \"ChST\": {\"offset\": 10, \"description\": \"Chamorro Standard Time\"},\n            \"DDUT\": {\"offset\": 10, \"description\": \"Dumont d'Urville Time\"},\n            \"K\": {\"offset\": 10, \"description\": \"Kilo Time Zone\"},\n            \"PGT\": {\"offset\": 10, \"description\": \"Papua New Guinea Time\"},\n            \"VLAT\": {\"offset\": 10, \"description\": \"Vladivostok Time\"},\n            \"YAKST\": {\"offset\": 10, \"description\": \"Yakutsk Summer Time\"},\n            \"YAPT\": {\"offset\": 10, \"description\": \"Yap Time\"},\n            # Continuing from the previous part...\n            \"ACDT\": {\"offset\": 10.5, \"description\": \"Australian Central Daylight Time\"},\n            \"LHST\": {\"offset\": 10.5, \"description\": \"Lord Howe Standard Time\"},\n            \"AEDT\": {\"offset\": 11, \"description\": \"Australian Eastern Daylight Time\"},\n            \"KOST\": {\"offset\": 11, \"description\": \"Kosrae Time\"},\n            \"L\": {\"offset\": 11, \"description\": \"Lima Time Zone\"},\n            \"LHDT\": {\"offset\": 11, \"description\": \"Lord Howe Daylight Time\"},\n            \"MAGT\": {\"offset\": 11, \"description\": \"Magadan Time\"},\n            \"NCT\": {\"offset\": 11, \"description\": \"New Caledonia Time\"},\n            \"NFT\": {\"offset\": 11, \"description\": \"Norfolk Time\"},\n            \"PONT\": {\"offset\": 11, \"description\": \"Pohnpei Time\"},\n            \"SAKT\": {\"offset\": 11, \"description\": \"Sakhalin Time\"},\n            \"SBT\": {\"offset\": 11, \"description\": \"Solomon Islands Time\"},\n            \"SRET\": {\"offset\": 11, \"description\": \"Srednekolymsk Time\"},\n            \"VLAST\": {\"offset\": 11, \"description\": \"Vladivostok Summer Time\"},\n            \"VUT\": {\"offset\": 11, \"description\": \"Vanuatu Time\"},\n            \"ANAST\": {\"offset\": 12, \"description\": \"Anadyr Summer Time\"},\n            \"ANAT\": {\"offset\": 12, \"description\": \"Anadyr Time\"},\n            \"FJT\": {\"offset\": 12, \"description\": \"Fiji Time\"},\n            \"GILT\": {\"offset\": 12, \"description\": \"Gilbert Island Time\"},\n            \"M\": {\"offset\": 12, \"description\": \"Mike Time Zone\"},\n            \"MAGST\": {\"offset\": 12, \"description\": \"Magadan Summer Time\"},\n            \"MHT\": {\"offset\": 12, \"description\": \"Marshall Islands Time\"},\n            \"NRT\": {\"offset\": 12, \"description\": \"Nauru Time\"},\n            \"NZST\": {\"offset\": 12, \"description\": \"New Zealand Standard Time\"},\n            \"PETST\": {\"offset\": 12, \"description\": \"Kamchatka Summer Time\"},\n            \"PETT\": {\"offset\": 12, \"description\": \"Kamchatka Time\"},\n            \"TVT\": {\"offset\": 12, \"description\": \"Tuvalu Time\"},\n            \"WAKT\": {\"offset\": 12, \"description\": \"Wake Island Time\"},\n            \"WFT\": {\"offset\": 12, \"description\": \"Wallis and Futuna Time\"},\n            \"CHAST\": {\"offset\": 12.75, \"description\": \"Chatham Standard Time\"},\n            \"FJST\": {\"offset\": 13, \"description\": \"Fiji Summer Time\"},\n            \"NZDT\": {\"offset\": 13, \"description\": \"New Zealand Daylight Time\"},\n            \"PHOT\": {\"offset\": 13, \"description\": \"Phoenix Island Time\"},\n            \"TKT\": {\"offset\": 13, \"description\": \"Tokelau Time\"},\n            \"TOT\": {\"offset\": 13, \"description\": \"Tonga Time\"},\n            \"CHADT\": {\"offset\": 13.75, \"description\": \"Chatham Daylight Time\"},\n            \"LINT\": {\"offset\": 14, \"description\": \"Line Islands Time\"},\n            \"TOST\": {\"offset\": 14, \"description\": \"Tonga Summer Time\"},\n            \"WST\": {\"offset\": 14, \"description\": \"West Samoa Time\"},\n        }\n        # Convert timezone offsets from hours to seconds and create tzinfos dictionary\n        self.tzinfos = {}\n        for tz, info in self.timezone_hours.items():\n            offset_in_seconds = int(info[\"offset\"] * 3600)\n            self.tzinfos[tz] = offset_in_seconds\n\n    def parse_date(self, date_str) -&gt; str:\n        \"\"\"\n        Parses a date string and converts it to ISO 8601 format.\n\n        Args:\n            date_str (str): The date string to be parsed.\n\n        Returns:\n            str:  the ISO 8601 date string\n        \"\"\"\n        # Apply regex replacements\n        for pattern, replacement in self.regexp_aliases:\n            date_str = re.sub(pattern, replacement, date_str)\n\n        # Apply simple string replacements\n        for alias, replacement in self.aliases:\n            date_str = date_str.replace(alias, replacement)\n\n        parsed_date = parser.parse(date_str, tzinfos=self.tzinfos)\n        parsed_date_z = parsed_date.astimezone(pytz.utc)\n        # Convert to ISO 8601 format\n        iso_date_str = parsed_date_z.isoformat()\n        iso_date_str_z = iso_date_str.replace(\"+00:00\", \"Z\")\n        return iso_date_str_z\n</code></pre>"},{"location":"#ngwidgets.dateparser.DateParser.parse_date","title":"<code>parse_date(date_str)</code>","text":"<p>Parses a date string and converts it to ISO 8601 format.</p> <p>Parameters:</p> Name Type Description Default <code>date_str</code> <code>str</code> <p>The date string to be parsed.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the ISO 8601 date string</p> Source code in <code>ngwidgets/dateparser.py</code> <pre><code>def parse_date(self, date_str) -&gt; str:\n    \"\"\"\n    Parses a date string and converts it to ISO 8601 format.\n\n    Args:\n        date_str (str): The date string to be parsed.\n\n    Returns:\n        str:  the ISO 8601 date string\n    \"\"\"\n    # Apply regex replacements\n    for pattern, replacement in self.regexp_aliases:\n        date_str = re.sub(pattern, replacement, date_str)\n\n    # Apply simple string replacements\n    for alias, replacement in self.aliases:\n        date_str = date_str.replace(alias, replacement)\n\n    parsed_date = parser.parse(date_str, tzinfos=self.tzinfos)\n    parsed_date_z = parsed_date.astimezone(pytz.utc)\n    # Convert to ISO 8601 format\n    iso_date_str = parsed_date_z.isoformat()\n    iso_date_str_z = iso_date_str.replace(\"+00:00\", \"Z\")\n    return iso_date_str_z\n</code></pre>"},{"location":"#ngwidgets.debouncer","title":"<code>debouncer</code>","text":"<p>Debouncing module for managing rapid  function calls and providing UI feedback. Created on 2024-06-08</p>"},{"location":"#ngwidgets.debouncer.Debouncer","title":"<code>Debouncer</code>","text":"<p>A class to manage debouncing of function calls.</p> <p>This class allows for debouncing function calls which can be either CPU-bound or I/O-bound. It includes optional callbacks that execute at the start and completion of the debounced function.</p> Source code in <code>ngwidgets/debouncer.py</code> <pre><code>class Debouncer:\n    \"\"\"A class to manage debouncing of function calls.\n\n    This class allows for debouncing function calls which can be either CPU-bound or I/O-bound.\n    It includes optional callbacks that execute at the start and completion of the debounced function.\n    \"\"\"\n\n    def __init__(\n        self,\n        delay: float = 0.330,\n        debounce_cpu_bound: bool = False,\n        debounce_task_name: str = \"Debounce Task\",\n        debug: bool = False,\n    ):\n        \"\"\"\n        Initialize the Debouncer with a specific delay.\n\n        Args:\n            delay (float): The debouncing delay in seconds. Default is 0.330 seconds.\n            debounce_cpu_bound (bool): If True, use CPU-bound execution; otherwise use I/O-bound execution.\n            debounce_task_name (str): The name to use for the task.\n            debug(bool): if True show debug info\n        \"\"\"\n        self.delay = delay\n        self.counter = 0\n        self.debounce_cpu_bound = debounce_cpu_bound\n        self.debounce_task_name = debounce_task_name\n        self.debug = debug\n        self.task: Optional[asyncio.Task] = None\n\n    def log(self, call_type: str, func, *args, **kwargs):\n        \"\"\"\n        log the call\n        \"\"\"\n        if self.debug:\n            print(f\"calling {call_type} #{self.counter}. time\")\n            print(\"function:\", func.__name__)\n            print(\"args:\", args, kwargs)\n\n    async def debounce(\n        self,\n        func: Callable,\n        *args,\n        on_start: Optional[Callable[[], Any]] = None,\n        on_done: Optional[Callable[[], Any]] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Debounce the given function call, using either CPU-bound or I/O-bound execution based on the flag.\n        Optional callbacks can be specified for execution at the start and end of the function.\n\n        Args:\n            func (Callable): The function to be debounced.\n            on_start (Optional[Callable[[], Any]]): Function to call just before the delay starts.\n            on_done (Optional[Callable[[], Any]]): Function to call after the function execution completes.\n            *args: Positional arguments passed to the function.\n            **kwargs: Keyword arguments passed to the function.\n        \"\"\"\n        self.counter += 1\n        # abort any running task\n        if self.task and not self.task.done():\n            self.task.cancel()\n\n        async def task_func():\n            if on_start:\n                on_start()\n            # debounce by waiting\n            if self.counter &gt; 1:\n                await asyncio.sleep(self.delay)\n            try:\n                if asyncio.iscoroutinefunction(func):\n                    self.log(\"coroutine\", func, *args, **kwargs)\n                    await func(*args, **kwargs)\n                elif self.debounce_cpu_bound:\n                    self.log(\"cpu_bound\", func, *args, **kwargs)\n                    await run.cpu_bound(func, *args, **kwargs)\n                else:\n                    self.log(\"io_bound\", func, *args, **kwargs)\n                    await run.io_bound(func, *args, **kwargs)\n            except Exception as e:\n                print(f\"Error during task execution: {e}\")\n            finally:\n                if on_done:\n                    on_done()\n\n        self.task = background_tasks.create(task_func(), name=self.debounce_task_name)\n</code></pre>"},{"location":"#ngwidgets.debouncer.Debouncer.__init__","title":"<code>__init__(delay=0.33, debounce_cpu_bound=False, debounce_task_name='Debounce Task', debug=False)</code>","text":"<p>Initialize the Debouncer with a specific delay.</p> <p>Parameters:</p> Name Type Description Default <code>delay</code> <code>float</code> <p>The debouncing delay in seconds. Default is 0.330 seconds.</p> <code>0.33</code> <code>debounce_cpu_bound</code> <code>bool</code> <p>If True, use CPU-bound execution; otherwise use I/O-bound execution.</p> <code>False</code> <code>debounce_task_name</code> <code>str</code> <p>The name to use for the task.</p> <code>'Debounce Task'</code> <code>debug(bool)</code> <p>if True show debug info</p> required Source code in <code>ngwidgets/debouncer.py</code> <pre><code>def __init__(\n    self,\n    delay: float = 0.330,\n    debounce_cpu_bound: bool = False,\n    debounce_task_name: str = \"Debounce Task\",\n    debug: bool = False,\n):\n    \"\"\"\n    Initialize the Debouncer with a specific delay.\n\n    Args:\n        delay (float): The debouncing delay in seconds. Default is 0.330 seconds.\n        debounce_cpu_bound (bool): If True, use CPU-bound execution; otherwise use I/O-bound execution.\n        debounce_task_name (str): The name to use for the task.\n        debug(bool): if True show debug info\n    \"\"\"\n    self.delay = delay\n    self.counter = 0\n    self.debounce_cpu_bound = debounce_cpu_bound\n    self.debounce_task_name = debounce_task_name\n    self.debug = debug\n    self.task: Optional[asyncio.Task] = None\n</code></pre>"},{"location":"#ngwidgets.debouncer.Debouncer.debounce","title":"<code>debounce(func, *args, on_start=None, on_done=None, **kwargs)</code>  <code>async</code>","text":"<p>Debounce the given function call, using either CPU-bound or I/O-bound execution based on the flag. Optional callbacks can be specified for execution at the start and end of the function.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>The function to be debounced.</p> required <code>on_start</code> <code>Optional[Callable[[], Any]]</code> <p>Function to call just before the delay starts.</p> <code>None</code> <code>on_done</code> <code>Optional[Callable[[], Any]]</code> <p>Function to call after the function execution completes.</p> <code>None</code> <code>*args</code> <p>Positional arguments passed to the function.</p> <code>()</code> <code>**kwargs</code> <p>Keyword arguments passed to the function.</p> <code>{}</code> Source code in <code>ngwidgets/debouncer.py</code> <pre><code>async def debounce(\n    self,\n    func: Callable,\n    *args,\n    on_start: Optional[Callable[[], Any]] = None,\n    on_done: Optional[Callable[[], Any]] = None,\n    **kwargs,\n):\n    \"\"\"\n    Debounce the given function call, using either CPU-bound or I/O-bound execution based on the flag.\n    Optional callbacks can be specified for execution at the start and end of the function.\n\n    Args:\n        func (Callable): The function to be debounced.\n        on_start (Optional[Callable[[], Any]]): Function to call just before the delay starts.\n        on_done (Optional[Callable[[], Any]]): Function to call after the function execution completes.\n        *args: Positional arguments passed to the function.\n        **kwargs: Keyword arguments passed to the function.\n    \"\"\"\n    self.counter += 1\n    # abort any running task\n    if self.task and not self.task.done():\n        self.task.cancel()\n\n    async def task_func():\n        if on_start:\n            on_start()\n        # debounce by waiting\n        if self.counter &gt; 1:\n            await asyncio.sleep(self.delay)\n        try:\n            if asyncio.iscoroutinefunction(func):\n                self.log(\"coroutine\", func, *args, **kwargs)\n                await func(*args, **kwargs)\n            elif self.debounce_cpu_bound:\n                self.log(\"cpu_bound\", func, *args, **kwargs)\n                await run.cpu_bound(func, *args, **kwargs)\n            else:\n                self.log(\"io_bound\", func, *args, **kwargs)\n                await run.io_bound(func, *args, **kwargs)\n        except Exception as e:\n            print(f\"Error during task execution: {e}\")\n        finally:\n            if on_done:\n                on_done()\n\n    self.task = background_tasks.create(task_func(), name=self.debounce_task_name)\n</code></pre>"},{"location":"#ngwidgets.debouncer.Debouncer.log","title":"<code>log(call_type, func, *args, **kwargs)</code>","text":"<p>log the call</p> Source code in <code>ngwidgets/debouncer.py</code> <pre><code>def log(self, call_type: str, func, *args, **kwargs):\n    \"\"\"\n    log the call\n    \"\"\"\n    if self.debug:\n        print(f\"calling {call_type} #{self.counter}. time\")\n        print(\"function:\", func.__name__)\n        print(\"args:\", args, kwargs)\n</code></pre>"},{"location":"#ngwidgets.debouncer.DebouncerUI","title":"<code>DebouncerUI</code>","text":"<p>A class to manage UI feedback for debouncing, using a specific UI container.</p> Source code in <code>ngwidgets/debouncer.py</code> <pre><code>class DebouncerUI:\n    \"\"\"A class to manage UI feedback for debouncing, using a specific UI container.\"\"\"\n\n    def __init__(\n        self,\n        parent,\n        delay: float = 0.330,\n        debounce_cpu_bound: bool = False,\n        debounce_task_name: str = \"Debounce Task\",\n        debug: bool = False,\n    ):\n        \"\"\"\n        Initialize the Debouncer UI within a specified parent container.\n\n        Args:\n            parent: The container in which the UI feedback should be managed.\n            delay (float): The debouncing delay in seconds.\n            debounce_cpu_bound (bool): If True, use CPU-bound execution; otherwise use I/O-bound execution.\n            debounce_task_name (str): The name to use for the task.\n            debug(bool): if True show debug info\n        \"\"\"\n        self.parent = parent\n        self.debouncer = Debouncer(\n            delay=delay,\n            debounce_cpu_bound=debounce_cpu_bound,\n            debounce_task_name=debounce_task_name,\n            debug=debug,\n        )\n        self.spinner = None\n\n    def debounce(\n        self,\n        func: Callable,\n        *args,\n        on_start: Optional[Callable[[], Any]] = None,\n        on_done: Optional[Callable[[], Any]] = None,\n        **kwargs,\n    ):\n        \"\"\"\n        Debounce the given function call, managing UI feedback appropriately.\n\n        Args:\n            func (Callable): The function to be debounced.\n            *args: Positional arguments passed to the function.\n            **kwargs: Keyword arguments passed to the function.\n        \"\"\"\n\n        def ui_on_start():\n            \"\"\"\n            Default on start behavior is to add a spinner.\n            \"\"\"\n            with self.parent:\n                if not self.spinner:\n                    self.spinner = ui.spinner()\n            if on_start:\n                on_start()\n\n        def ui_on_done():\n            \"\"\"\n            Default behavior is to remove the spinner.\n            \"\"\"\n            if on_done:\n                on_done()\n            if self.spinner:\n                try:\n                    self.parent.remove(self.spinner)\n                except KeyError:\n                    pass\n                self.spinner = None\n\n        debounce_result = self.debouncer.debounce(\n            func, *args, on_start=ui_on_start, on_done=ui_on_done, **kwargs\n        )\n        return debounce_result\n</code></pre>"},{"location":"#ngwidgets.debouncer.DebouncerUI.__init__","title":"<code>__init__(parent, delay=0.33, debounce_cpu_bound=False, debounce_task_name='Debounce Task', debug=False)</code>","text":"<p>Initialize the Debouncer UI within a specified parent container.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <p>The container in which the UI feedback should be managed.</p> required <code>delay</code> <code>float</code> <p>The debouncing delay in seconds.</p> <code>0.33</code> <code>debounce_cpu_bound</code> <code>bool</code> <p>If True, use CPU-bound execution; otherwise use I/O-bound execution.</p> <code>False</code> <code>debounce_task_name</code> <code>str</code> <p>The name to use for the task.</p> <code>'Debounce Task'</code> <code>debug(bool)</code> <p>if True show debug info</p> required Source code in <code>ngwidgets/debouncer.py</code> <pre><code>def __init__(\n    self,\n    parent,\n    delay: float = 0.330,\n    debounce_cpu_bound: bool = False,\n    debounce_task_name: str = \"Debounce Task\",\n    debug: bool = False,\n):\n    \"\"\"\n    Initialize the Debouncer UI within a specified parent container.\n\n    Args:\n        parent: The container in which the UI feedback should be managed.\n        delay (float): The debouncing delay in seconds.\n        debounce_cpu_bound (bool): If True, use CPU-bound execution; otherwise use I/O-bound execution.\n        debounce_task_name (str): The name to use for the task.\n        debug(bool): if True show debug info\n    \"\"\"\n    self.parent = parent\n    self.debouncer = Debouncer(\n        delay=delay,\n        debounce_cpu_bound=debounce_cpu_bound,\n        debounce_task_name=debounce_task_name,\n        debug=debug,\n    )\n    self.spinner = None\n</code></pre>"},{"location":"#ngwidgets.debouncer.DebouncerUI.debounce","title":"<code>debounce(func, *args, on_start=None, on_done=None, **kwargs)</code>","text":"<p>Debounce the given function call, managing UI feedback appropriately.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>The function to be debounced.</p> required <code>*args</code> <p>Positional arguments passed to the function.</p> <code>()</code> <code>**kwargs</code> <p>Keyword arguments passed to the function.</p> <code>{}</code> Source code in <code>ngwidgets/debouncer.py</code> <pre><code>def debounce(\n    self,\n    func: Callable,\n    *args,\n    on_start: Optional[Callable[[], Any]] = None,\n    on_done: Optional[Callable[[], Any]] = None,\n    **kwargs,\n):\n    \"\"\"\n    Debounce the given function call, managing UI feedback appropriately.\n\n    Args:\n        func (Callable): The function to be debounced.\n        *args: Positional arguments passed to the function.\n        **kwargs: Keyword arguments passed to the function.\n    \"\"\"\n\n    def ui_on_start():\n        \"\"\"\n        Default on start behavior is to add a spinner.\n        \"\"\"\n        with self.parent:\n            if not self.spinner:\n                self.spinner = ui.spinner()\n        if on_start:\n            on_start()\n\n    def ui_on_done():\n        \"\"\"\n        Default behavior is to remove the spinner.\n        \"\"\"\n        if on_done:\n            on_done()\n        if self.spinner:\n            try:\n                self.parent.remove(self.spinner)\n            except KeyError:\n                pass\n            self.spinner = None\n\n    debounce_result = self.debouncer.debounce(\n        func, *args, on_start=ui_on_start, on_done=ui_on_done, **kwargs\n    )\n    return debounce_result\n</code></pre>"},{"location":"#ngwidgets.dict_edit","title":"<code>dict_edit</code>","text":"<p>Created on 2023-06-22</p> <p>@author: wf</p>"},{"location":"#ngwidgets.dict_edit.DictEdit","title":"<code>DictEdit</code>","text":"<p>NiceGUI based user interface for dictionary or dataclass editing that can be customized for each field in a form.</p> <p>Attributes:</p> Name Type Description <code>d</code> <code>Union[dict, dataclass]</code> <p>The data to be edited, converted to a dict if a dataclass.</p> <code>form_ui_def</code> <code>FormUiDef</code> <p>The UI definition for the form (if any).</p> <code>card</code> <code>card</code> <p>The card element containing the form.</p> <code>inputs</code> <code>Dict[str, Input]</code> <p>A dictionary mapping field names to input elements.</p> Source code in <code>ngwidgets/dict_edit.py</code> <pre><code>class DictEdit:\n    \"\"\"\n    NiceGUI based user interface for dictionary or dataclass editing\n    that can be customized for each field in a form.\n\n    Attributes:\n        d (Union[dict, dataclass]): The data to be edited, converted to a dict if a dataclass.\n        form_ui_def (FormUiDef): The UI definition for the form (if any).\n        card (ui.card): The card element containing the form.\n        inputs (Dict[str, Input]): A dictionary mapping field names to input elements.\n    \"\"\"\n\n    empty = \"\u2753\"\n\n    def __init__(\n        self,\n        data_to_edit: Union[dict, dataclass],\n        form_ui_def: Optional[FormUiDef] = None,\n        customization: Optional[Dict[str, Dict[str, Any]]] = None,\n    ):\n        \"\"\"\n        Initialize the DictEdit instance with the given data and optional UI definition.\n\n        Args:\n            data_to_edit (Union[dict, dataclass]): The dictionary or dataclass to be edited.\n            form_ui_def (Optional[FormUiDef]): The UI definition for the form. If not provided,\n                                               it will be generated automatically.\n            customization (Optional[Dict[str, Dict[str, Any]]]): Customizations for the form fields.\n        \"\"\"\n        self.data_to_edit = data_to_edit\n        self.d = asdict(data_to_edit) if is_dataclass(data_to_edit) else data_to_edit\n        self.form_ui_def = form_ui_def or (\n            FormUiDef.from_dataclass(data_to_edit)\n            if is_dataclass(data_to_edit)\n            else FormUiDef.from_dict(self.d)\n        )\n        if customization:\n            self.customize(customization)\n        self.setup()\n\n    def customize(self, customization: Dict[str, Dict[str, Any]]):\n        \"\"\"\n        Customizes the UI fields based on the given customization dictionary.\n\n        Args:\n            customization (Dict[str, Dict[str, Any]]): A dictionary where each key corresponds to\n                                                       a field name, and the value is another dictionary\n                                                       specifying 'label', 'size', and optionally 'validation'.\n\n        Example:\n            customization = {\n                'given_name': {'label': 'Given Name', 'size': 50},\n                'family_name': {'label': 'Family Name', 'size': 50}\n            }\n        \"\"\"\n        if \"_form_\" in customization:\n            form_mod = customization[\"_form_\"]\n            self.form_ui_def.title = form_mod.get(\"title\", self.form_ui_def.title)\n            self.form_ui_def.icon = form_mod.get(\"icon\", self.form_ui_def.icon)\n        for field_name, mods in customization.items():\n            field_def = self.form_ui_def.ui_fields.get(field_name, None)\n            if field_def:\n                field_def.label = mods.get(\"label\", field_def.label)\n                field_def.size = mods.get(\"size\", field_def.size)\n                if \"validation\" in mods:\n                    field_def.validation = mods[\"validation\"]\n\n    def setup(self):\n        \"\"\"Sets up the UI by creating a card and expansion for the form based on form_ui_def.\"\"\"\n        with ui.card() as self.card:\n            with ui.expansion(\n                text=self.form_ui_def.title, icon=self.form_ui_def.icon\n            ).classes(\"w-full\") as self.expansion:\n                self.inputs = self._create_inputs()\n            if is_dataclass(self.data_to_edit) and hasattr(\n                self.data_to_edit, \"ui_label\"\n            ):\n                bind_from(\n                    self.expansion._props,\n                    \"label\",\n                    self.data_to_edit,\n                    \"ui_label\",\n                    backward=lambda x: f\"{self.form_ui_def.title}: {x if x else DictEdit.empty}\",\n                )\n\n    def _create_inputs(self) -&gt; Dict[str, Input]:\n        \"\"\"Creates input elements for the form based on the FormUiDef.\"\"\"\n        inputs = {}\n        for field_def in self.form_ui_def.ui_fields.values():\n            value = self.d.get(field_def.field_name)\n            if field_def.field_type is str:\n                input_field = ui.input(label=field_def.label, value=value).props(\n                    f\"size={field_def.size}\"\n                )  # Text input for strings\n            elif field_def.field_type in [int, float]:\n                input_field = ui.number(\n                    label=field_def.label, value=value\n                )  # Number input for ints and floats\n            elif field_def.field_type is bool:\n                input_field = ui.checkbox(\n                    field_def.label, value=value\n                )  # Checkbox for booleans\n            elif field_def.field_type in [datetime, date]:\n                with ui.input(\"Date\") as input_field:\n                    with input_field.add_slot(\"append\"):\n                        ui.icon(\"edit_calendar\").on(\n                            \"click\", lambda: menu.open()\n                        ).classes(\"cursor-pointer\")\n                    with ui.menu() as menu:\n                        ui.date().bind_value(input_field)\n            else:\n                input_field = ui.input(\n                    label=field_def.label, value=value\n                )  # Default to text input\n\n            input_field.bind_value(self.d, field_def.field_name)\n            if field_def.validation:\n                input_field.validation = {\"Invalid input\": field_def.validation}\n            inputs[field_def.field_name] = input_field\n        return inputs\n\n    def add_on_change_handler(self, key: str, handler: Callable):\n        \"\"\"Adds an on_change event handler to the input corresponding to the given key.\"\"\"\n        if key in self.inputs:\n            self.inputs[key].on_change(handler)\n</code></pre>"},{"location":"#ngwidgets.dict_edit.DictEdit.__init__","title":"<code>__init__(data_to_edit, form_ui_def=None, customization=None)</code>","text":"<p>Initialize the DictEdit instance with the given data and optional UI definition.</p> <p>Parameters:</p> Name Type Description Default <code>data_to_edit</code> <code>Union[dict, dataclass]</code> <p>The dictionary or dataclass to be edited.</p> required <code>form_ui_def</code> <code>Optional[FormUiDef]</code> <p>The UI definition for the form. If not provided,                                it will be generated automatically.</p> <code>None</code> <code>customization</code> <code>Optional[Dict[str, Dict[str, Any]]]</code> <p>Customizations for the form fields.</p> <code>None</code> Source code in <code>ngwidgets/dict_edit.py</code> <pre><code>def __init__(\n    self,\n    data_to_edit: Union[dict, dataclass],\n    form_ui_def: Optional[FormUiDef] = None,\n    customization: Optional[Dict[str, Dict[str, Any]]] = None,\n):\n    \"\"\"\n    Initialize the DictEdit instance with the given data and optional UI definition.\n\n    Args:\n        data_to_edit (Union[dict, dataclass]): The dictionary or dataclass to be edited.\n        form_ui_def (Optional[FormUiDef]): The UI definition for the form. If not provided,\n                                           it will be generated automatically.\n        customization (Optional[Dict[str, Dict[str, Any]]]): Customizations for the form fields.\n    \"\"\"\n    self.data_to_edit = data_to_edit\n    self.d = asdict(data_to_edit) if is_dataclass(data_to_edit) else data_to_edit\n    self.form_ui_def = form_ui_def or (\n        FormUiDef.from_dataclass(data_to_edit)\n        if is_dataclass(data_to_edit)\n        else FormUiDef.from_dict(self.d)\n    )\n    if customization:\n        self.customize(customization)\n    self.setup()\n</code></pre>"},{"location":"#ngwidgets.dict_edit.DictEdit.add_on_change_handler","title":"<code>add_on_change_handler(key, handler)</code>","text":"<p>Adds an on_change event handler to the input corresponding to the given key.</p> Source code in <code>ngwidgets/dict_edit.py</code> <pre><code>def add_on_change_handler(self, key: str, handler: Callable):\n    \"\"\"Adds an on_change event handler to the input corresponding to the given key.\"\"\"\n    if key in self.inputs:\n        self.inputs[key].on_change(handler)\n</code></pre>"},{"location":"#ngwidgets.dict_edit.DictEdit.customize","title":"<code>customize(customization)</code>","text":"<p>Customizes the UI fields based on the given customization dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>customization</code> <code>Dict[str, Dict[str, Any]]</code> <p>A dictionary where each key corresponds to                                        a field name, and the value is another dictionary                                        specifying 'label', 'size', and optionally 'validation'.</p> required Example <p>customization = {     'given_name': {'label': 'Given Name', 'size': 50},     'family_name': {'label': 'Family Name', 'size': 50} }</p> Source code in <code>ngwidgets/dict_edit.py</code> <pre><code>def customize(self, customization: Dict[str, Dict[str, Any]]):\n    \"\"\"\n    Customizes the UI fields based on the given customization dictionary.\n\n    Args:\n        customization (Dict[str, Dict[str, Any]]): A dictionary where each key corresponds to\n                                                   a field name, and the value is another dictionary\n                                                   specifying 'label', 'size', and optionally 'validation'.\n\n    Example:\n        customization = {\n            'given_name': {'label': 'Given Name', 'size': 50},\n            'family_name': {'label': 'Family Name', 'size': 50}\n        }\n    \"\"\"\n    if \"_form_\" in customization:\n        form_mod = customization[\"_form_\"]\n        self.form_ui_def.title = form_mod.get(\"title\", self.form_ui_def.title)\n        self.form_ui_def.icon = form_mod.get(\"icon\", self.form_ui_def.icon)\n    for field_name, mods in customization.items():\n        field_def = self.form_ui_def.ui_fields.get(field_name, None)\n        if field_def:\n            field_def.label = mods.get(\"label\", field_def.label)\n            field_def.size = mods.get(\"size\", field_def.size)\n            if \"validation\" in mods:\n                field_def.validation = mods[\"validation\"]\n</code></pre>"},{"location":"#ngwidgets.dict_edit.DictEdit.setup","title":"<code>setup()</code>","text":"<p>Sets up the UI by creating a card and expansion for the form based on form_ui_def.</p> Source code in <code>ngwidgets/dict_edit.py</code> <pre><code>def setup(self):\n    \"\"\"Sets up the UI by creating a card and expansion for the form based on form_ui_def.\"\"\"\n    with ui.card() as self.card:\n        with ui.expansion(\n            text=self.form_ui_def.title, icon=self.form_ui_def.icon\n        ).classes(\"w-full\") as self.expansion:\n            self.inputs = self._create_inputs()\n        if is_dataclass(self.data_to_edit) and hasattr(\n            self.data_to_edit, \"ui_label\"\n        ):\n            bind_from(\n                self.expansion._props,\n                \"label\",\n                self.data_to_edit,\n                \"ui_label\",\n                backward=lambda x: f\"{self.form_ui_def.title}: {x if x else DictEdit.empty}\",\n            )\n</code></pre>"},{"location":"#ngwidgets.dict_edit.FieldUiDef","title":"<code>FieldUiDef</code>  <code>dataclass</code>","text":"<p>A generic user interface definition for a field.</p> Source code in <code>ngwidgets/dict_edit.py</code> <pre><code>@dataclass\nclass FieldUiDef:\n    \"\"\"\n    A generic user interface definition for a field.\n    \"\"\"\n\n    field_name: str\n    label: str\n    size: int = 80\n    field_type: Optional[type] = None\n    validation: Optional[Callable[[Any], bool]] = None\n\n    @staticmethod\n    def from_field(field) -&gt; \"FieldUiDef\":\n        \"\"\"Automatically creates a FieldUiDef from a dataclass field\"\"\"\n        return FieldUiDef(\n            field_name=field.name, label=field.name, field_type=field.type\n        )\n\n    @staticmethod\n    def from_key_value(key: str, value) -&gt; \"FieldUiDef\":\n        \"\"\"Automatically create a FieldUiDef from a key,value pair\"\"\"\n        # Choose a default type for None values, e.g., str\n        field_type = type(value) if value is not None else str\n        return FieldUiDef(field_name=key, label=key, field_type=field_type)\n</code></pre>"},{"location":"#ngwidgets.dict_edit.FieldUiDef.from_field","title":"<code>from_field(field)</code>  <code>staticmethod</code>","text":"<p>Automatically creates a FieldUiDef from a dataclass field</p> Source code in <code>ngwidgets/dict_edit.py</code> <pre><code>@staticmethod\ndef from_field(field) -&gt; \"FieldUiDef\":\n    \"\"\"Automatically creates a FieldUiDef from a dataclass field\"\"\"\n    return FieldUiDef(\n        field_name=field.name, label=field.name, field_type=field.type\n    )\n</code></pre>"},{"location":"#ngwidgets.dict_edit.FieldUiDef.from_key_value","title":"<code>from_key_value(key, value)</code>  <code>staticmethod</code>","text":"<p>Automatically create a FieldUiDef from a key,value pair</p> Source code in <code>ngwidgets/dict_edit.py</code> <pre><code>@staticmethod\ndef from_key_value(key: str, value) -&gt; \"FieldUiDef\":\n    \"\"\"Automatically create a FieldUiDef from a key,value pair\"\"\"\n    # Choose a default type for None values, e.g., str\n    field_type = type(value) if value is not None else str\n    return FieldUiDef(field_name=key, label=key, field_type=field_type)\n</code></pre>"},{"location":"#ngwidgets.dict_edit.FormUiDef","title":"<code>FormUiDef</code>  <code>dataclass</code>","text":"<p>A definition for the entire form's UI.</p> Source code in <code>ngwidgets/dict_edit.py</code> <pre><code>@dataclass\nclass FormUiDef:\n    \"\"\"\n    A definition for the entire form's UI.\n    \"\"\"\n\n    title: str\n    icon: Optional[str] = \"house\"\n    ui_fields: Dict[str, FieldUiDef] = field(default_factory=dict)\n\n    @staticmethod\n    def from_dataclass(data: dataclass) -&gt; \"FormUiDef\":\n        \"\"\"Automatically creates a FormUiDef from a dataclass.\"\"\"\n        ui_fields = {}\n        for field in fields(data):\n            ui_fields[field.name] = FieldUiDef.from_field(field)\n        return FormUiDef(title=data.__class__.__name__, ui_fields=ui_fields)\n\n    @staticmethod\n    def from_dict(dictionary: dict) -&gt; \"FormUiDef\":\n        \"\"\"Automatically creates a FormUiDef from a dictionary.\"\"\"\n        ui_fields = {\n            key: FieldUiDef.from_key_value(key, value)\n            for key, value in dictionary.items()\n        }\n        return FormUiDef(title=\"Dictionary Form\", ui_fields=ui_fields)\n</code></pre>"},{"location":"#ngwidgets.dict_edit.FormUiDef.from_dataclass","title":"<code>from_dataclass(data)</code>  <code>staticmethod</code>","text":"<p>Automatically creates a FormUiDef from a dataclass.</p> Source code in <code>ngwidgets/dict_edit.py</code> <pre><code>@staticmethod\ndef from_dataclass(data: dataclass) -&gt; \"FormUiDef\":\n    \"\"\"Automatically creates a FormUiDef from a dataclass.\"\"\"\n    ui_fields = {}\n    for field in fields(data):\n        ui_fields[field.name] = FieldUiDef.from_field(field)\n    return FormUiDef(title=data.__class__.__name__, ui_fields=ui_fields)\n</code></pre>"},{"location":"#ngwidgets.dict_edit.FormUiDef.from_dict","title":"<code>from_dict(dictionary)</code>  <code>staticmethod</code>","text":"<p>Automatically creates a FormUiDef from a dictionary.</p> Source code in <code>ngwidgets/dict_edit.py</code> <pre><code>@staticmethod\ndef from_dict(dictionary: dict) -&gt; \"FormUiDef\":\n    \"\"\"Automatically creates a FormUiDef from a dictionary.\"\"\"\n    ui_fields = {\n        key: FieldUiDef.from_key_value(key, value)\n        for key, value in dictionary.items()\n    }\n    return FormUiDef(title=\"Dictionary Form\", ui_fields=ui_fields)\n</code></pre>"},{"location":"#ngwidgets.editor","title":"<code>editor</code>","text":"<p>Created on 2022-11-27</p> <p>@author: wf</p>"},{"location":"#ngwidgets.editor.Editor","title":"<code>Editor</code>","text":"<p>helper class to open the system defined editor</p> <p>see https://stackoverflow.com/questions/1442841/lauch-default-editor-like-webbrowser-module</p> Source code in <code>ngwidgets/editor.py</code> <pre><code>class Editor:\n    \"\"\"\n    helper class to open the system defined editor\n\n    see https://stackoverflow.com/questions/1442841/lauch-default-editor-like-webbrowser-module\n    \"\"\"\n\n    @classmethod\n    def extract_text(cls, html_text: str) -&gt; str:\n        \"\"\"\n        extract the text from the given html_text\n\n        Args:\n            html_text(str): the input for the html text\n\n        Returns:\n            str: the plain text\n        \"\"\"\n        soup = BeautifulSoup(html_text, features=\"html.parser\")\n\n        # kill all script and style elements\n        for script in soup([\"script\", \"style\"]):\n            script.extract()  # rip it out\n\n        # get text\n        text = soup.get_text()\n\n        # break into lines and remove leading and trailing space on each\n        lines = (line.strip() for line in text.splitlines())\n        # break multi-headlines into a line each\n        chunks = (phrase.strip() for line in lines for phrase in line.split(\"  \"))\n        # drop blank lines\n        text = \"\\n\".join(chunk for chunk in chunks if chunk)\n        return text\n\n    @classmethod\n    def open(cls, file_source: str, extract_text: bool = True) -&gt; str:\n        \"\"\"\n        open an editor for the given file_source\n\n        Args:\n            file_source(str): the path to the file\n            extract_text(bool): if True extract the text from html sources\n\n        Returns:\n            str: the path to the file e.g. a temporary file if the file_source points to an url\n        \"\"\"\n        # handle urls\n        # https://stackoverflow.com/a/45886824/1497139\n        if file_source.startswith(\"http\"):\n            url_source = urlopen(file_source)\n            # https://stackoverflow.com/a/19156107/1497139\n            charset = url_source.headers.get_content_charset()\n            # if charset fails here you might want to set it to utf-8 as a default!\n            text = url_source.read().decode(charset)\n            if extract_text:\n                # https://stackoverflow.com/a/24618186/1497139\n                text = cls.extract_text(text)\n\n            return cls.open_tmp_text(text)\n\n        editor_cmd = None\n        editor_env = os.getenv(\"EDITOR\")\n        if editor_env:\n            editor_cmd = editor_env\n        if platform == \"darwin\":\n            if not editor_env:\n                # https://stackoverflow.com/questions/22390709/how-can-i-open-the-atom-editor-from-the-command-line-in-os-x\n                editor_cmd = \"/usr/local/bin/atom\"\n        os_cmd = f\"{editor_cmd} {file_source}\"\n        os.system(os_cmd)\n        return file_source\n\n    @classmethod\n    def open_tmp_text(cls, text: str, file_name: str = None) -&gt; str:\n        \"\"\"\n        open an editor for the given text in a newly created temporary file\n\n        Args:\n            text(str): the text to write to a temporary file and then open\n            file_name(str): the name to use for the file\n\n        Returns:\n            str: the path to the temp file\n        \"\"\"\n        # see https://stackoverflow.com/a/8577226/1497139\n        # https://stackoverflow.com/a/3924253/1497139\n        with tempfile.NamedTemporaryFile(delete=False) as tmp:\n            with open(tmp.name, \"w\") as tmp_file:\n                tmp_file.write(text)\n                tmp_file.close()\n            if file_name is None:\n                file_path = tmp.name\n            else:\n                # https://stackoverflow.com/questions/3167154/how-to-split-a-dos-path-into-its-components-in-python\n                path = Path(tmp.name)\n                # https://stackoverflow.com/a/49798311/1497139\n                file_path = path.parent / file_name\n                os.rename(tmp.name, file_path)\n\n            return cls.open(str(file_path))\n</code></pre>"},{"location":"#ngwidgets.editor.Editor.extract_text","title":"<code>extract_text(html_text)</code>  <code>classmethod</code>","text":"<p>extract the text from the given html_text</p> <p>Parameters:</p> Name Type Description Default <code>html_text(str)</code> <p>the input for the html text</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the plain text</p> Source code in <code>ngwidgets/editor.py</code> <pre><code>@classmethod\ndef extract_text(cls, html_text: str) -&gt; str:\n    \"\"\"\n    extract the text from the given html_text\n\n    Args:\n        html_text(str): the input for the html text\n\n    Returns:\n        str: the plain text\n    \"\"\"\n    soup = BeautifulSoup(html_text, features=\"html.parser\")\n\n    # kill all script and style elements\n    for script in soup([\"script\", \"style\"]):\n        script.extract()  # rip it out\n\n    # get text\n    text = soup.get_text()\n\n    # break into lines and remove leading and trailing space on each\n    lines = (line.strip() for line in text.splitlines())\n    # break multi-headlines into a line each\n    chunks = (phrase.strip() for line in lines for phrase in line.split(\"  \"))\n    # drop blank lines\n    text = \"\\n\".join(chunk for chunk in chunks if chunk)\n    return text\n</code></pre>"},{"location":"#ngwidgets.editor.Editor.open","title":"<code>open(file_source, extract_text=True)</code>  <code>classmethod</code>","text":"<p>open an editor for the given file_source</p> <p>Parameters:</p> Name Type Description Default <code>file_source(str)</code> <p>the path to the file</p> required <code>extract_text(bool)</code> <p>if True extract the text from html sources</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the path to the file e.g. a temporary file if the file_source points to an url</p> Source code in <code>ngwidgets/editor.py</code> <pre><code>@classmethod\ndef open(cls, file_source: str, extract_text: bool = True) -&gt; str:\n    \"\"\"\n    open an editor for the given file_source\n\n    Args:\n        file_source(str): the path to the file\n        extract_text(bool): if True extract the text from html sources\n\n    Returns:\n        str: the path to the file e.g. a temporary file if the file_source points to an url\n    \"\"\"\n    # handle urls\n    # https://stackoverflow.com/a/45886824/1497139\n    if file_source.startswith(\"http\"):\n        url_source = urlopen(file_source)\n        # https://stackoverflow.com/a/19156107/1497139\n        charset = url_source.headers.get_content_charset()\n        # if charset fails here you might want to set it to utf-8 as a default!\n        text = url_source.read().decode(charset)\n        if extract_text:\n            # https://stackoverflow.com/a/24618186/1497139\n            text = cls.extract_text(text)\n\n        return cls.open_tmp_text(text)\n\n    editor_cmd = None\n    editor_env = os.getenv(\"EDITOR\")\n    if editor_env:\n        editor_cmd = editor_env\n    if platform == \"darwin\":\n        if not editor_env:\n            # https://stackoverflow.com/questions/22390709/how-can-i-open-the-atom-editor-from-the-command-line-in-os-x\n            editor_cmd = \"/usr/local/bin/atom\"\n    os_cmd = f\"{editor_cmd} {file_source}\"\n    os.system(os_cmd)\n    return file_source\n</code></pre>"},{"location":"#ngwidgets.editor.Editor.open_tmp_text","title":"<code>open_tmp_text(text, file_name=None)</code>  <code>classmethod</code>","text":"<p>open an editor for the given text in a newly created temporary file</p> <p>Parameters:</p> Name Type Description Default <code>text(str)</code> <p>the text to write to a temporary file and then open</p> required <code>file_name(str)</code> <p>the name to use for the file</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the path to the temp file</p> Source code in <code>ngwidgets/editor.py</code> <pre><code>@classmethod\ndef open_tmp_text(cls, text: str, file_name: str = None) -&gt; str:\n    \"\"\"\n    open an editor for the given text in a newly created temporary file\n\n    Args:\n        text(str): the text to write to a temporary file and then open\n        file_name(str): the name to use for the file\n\n    Returns:\n        str: the path to the temp file\n    \"\"\"\n    # see https://stackoverflow.com/a/8577226/1497139\n    # https://stackoverflow.com/a/3924253/1497139\n    with tempfile.NamedTemporaryFile(delete=False) as tmp:\n        with open(tmp.name, \"w\") as tmp_file:\n            tmp_file.write(text)\n            tmp_file.close()\n        if file_name is None:\n            file_path = tmp.name\n        else:\n            # https://stackoverflow.com/questions/3167154/how-to-split-a-dos-path-into-its-components-in-python\n            path = Path(tmp.name)\n            # https://stackoverflow.com/a/49798311/1497139\n            file_path = path.parent / file_name\n            os.rename(tmp.name, file_path)\n\n        return cls.open(str(file_path))\n</code></pre>"},{"location":"#ngwidgets.file_selector","title":"<code>file_selector</code>","text":"<p>Created on 2023-07-24</p> <p>@author: wf</p>"},{"location":"#ngwidgets.file_selector.FileSelector","title":"<code>FileSelector</code>","text":"<p>nicegui FileSelector</p> Source code in <code>ngwidgets/file_selector.py</code> <pre><code>class FileSelector:\n    \"\"\"\n    nicegui FileSelector\n    \"\"\"\n\n    def __init__(\n        self,\n        path: str,\n        extensions: dict = None,\n        handler: Callable = None,\n        filter_func: Callable[[str], bool] = None,\n        create_ui: bool = True,\n    ):\n        \"\"\"\n        constructor\n\n        Args:\n            path (str): The path to the directory to start building the tree from.\n            extensions(dict): the extensions to filter for as a dictionary with name as key and extension as value\n            handler(Callable): handler function to call on selection\n            filter_func(Callable): optional filter function\n            create_ui(bool): if True create the self.tree ui.tree nicegui component - allows for testing the structure without ui by setting to False\n        \"\"\"\n        self.path = path\n        if extensions is None:\n            extensions = {\"srt\": \".SRT\", \"gpx\": \".gpx\"}\n        self.extensions = extensions\n        self.handler = handler\n        self.filter_func = filter_func\n        # Initialize the file_count property\n        self.file_count = 0\n        # generate the tree structure\n        self.tree_structure = self.get_dir_tree(self.path, self.extensions)\n\n        if create_ui:\n            # create the ui.tree object\n            self.tree = ui.tree(\n                [self.tree_structure], label_key=\"label\", on_select=self.select_file\n            )\n\n    def get_path_items(self, path: str) -&gt; List[str]:\n        \"\"\"\n        Get sorted list of items in a specified directory path, filtering out non-relevant files like `._` files.\n\n        Args:\n            path (str): The directory path to list items from.\n\n        Returns:\n            List[str]: A sorted list of relevant items from the directory.\n                       Returns an empty list if an error occurs.\n\n        \"\"\"\n        items = []\n\n        try:\n            all_items = os.listdir(path)\n\n            for item in all_items:\n                if not item.startswith(\"._\"):\n                    if not self.filter_func or self.filter_func(item):\n                        items.append(item)\n\n            items.sort()\n        except BaseException:\n            pass\n\n        return items\n\n    def get_dir_tree(\n        self, path: str, extensions: dict, id_path: List[int] = [1]\n    ) -&gt; Optional[Dict[str, Union[str, List[Dict]]]]:\n        \"\"\"\n        Recursive function to construct a directory tree.\n\n        Args:\n            path (str): The path to the directory to start building the tree from.\n            extensions(dict): the extensions to filter for as a dictionary with name as key and extension as value\n            id_path (List[int]): List of integers representing the current path in the tree.\n\n        Returns:\n            dict: A dictionary representing the directory tree. For each directory or .scad file found,\n            it will add a dictionary to the 'children' list of its parent directory's dictionary.\n        \"\"\"\n        path = os.path.abspath(path)\n        id_string = \".\".join(map(str, id_path))\n        items = self.get_path_items(path)\n        children = []\n        item_counter = 1  # counter for generating child id\n\n        # Iterating over directories first\n        for name in items:\n            item_path = os.path.join(path, name)\n            child_id_path = id_path + [item_counter]\n\n            if os.path.isdir(item_path):\n                dir_tree = self.get_dir_tree(item_path, extensions, child_id_path)\n                if dir_tree:\n                    children.append(dir_tree)\n                    item_counter += 1\n\n        # Then iterating over files\n        # Check if an empty string is an allowed extension\n        allow_no_extension = \"\" in extensions.values()\n        for name in items:\n            item_path = os.path.join(path, name)\n            child_id_path = id_path + [item_counter]\n\n            # make sure the item is a file\n            if not os.path.isdir(item_path):\n\n                # Check if the item has an extension that matches the allowed extensions\n                has_allowed_extension = any(\n                    name.endswith(ext) for ext in extensions.values() if ext\n                )\n\n                # Check if the item has no extension and no extension is allowed\n                is_no_extension_allowed = allow_no_extension and \".\" not in name\n\n                # Proceed if the item either has an allowed extension or no extension is allowed\n                if has_allowed_extension or is_no_extension_allowed:\n                    children.append(\n                        {\n                            \"id\": \".\".join(map(str, child_id_path)),\n                            \"label\": name,\n                            \"value\": item_path,\n                        }\n                    )\n                    self.file_count += 1  # Increment file_count for each file added\n\n                    item_counter += 1\n\n        if children:\n            return {\n                \"id\": id_string,\n                \"label\": os.path.basename(path),\n                \"value\": path,\n                \"children\": children,\n            }\n\n    def find_node_by_id(\n        self, tree: Dict[str, Union[str, List[Dict]]], id_to_find: str\n    ) -&gt; Optional[Dict[str, Union[str, List[Dict]]]]:\n        \"\"\"\n        Recursive function to find a node (file or directory) by its ID in a directory tree.\n\n        Args:\n            tree (dict): A dictionary representing the directory tree. The tree is constructed with each node\n                containing 'id' (str) as a unique identifier, 'value' (str) as the path to the file or directory,\n                and 'children' (list of dict) as a list of child nodes.\n            id_to_find (str): The ID of the node to find in the directory tree.\n\n        Returns:\n            dict: The node associated with the found ID. Returns None if the ID is not found.\n        \"\"\"\n        if tree[\"id\"] == id_to_find:\n            return tree\n\n        for child in tree.get(\"children\", []):\n            found = self.find_node_by_id(child, id_to_find)\n            if found:\n                return found\n\n        return None\n\n    def expand(self, node_ids: List[str]) -&gt; None:\n        \"\"\"\n        expand the nodes with the given ids\n\n        node_ids(list): the list of node ids to be expanded\n        \"\"\"\n        self.tree._props[\"expanded\"] = node_ids\n        self.tree.update()\n\n    async def select_file(self, vcea: ValueChangeEventArguments):\n        \"\"\"\n        select the given file and call my handler on the file path of it\n\n        Args:\n            vcea(ValueChangeEventArguments): the tree selection event\n        \"\"\"\n        id_to_find = vcea.value  # Assuming vcea.value contains the id\n        if id_to_find is None:\n            return\n\n        selected_node = self.find_node_by_id(self.tree_structure, id_to_find)\n        if selected_node is None:\n            raise ValueError(\n                f\"No item with id {id_to_find} found in the tree structure.\"\n            )\n\n        file_path = selected_node[\"value\"]\n\n        # Only expand the node if it is a directory\n        if os.path.isdir(file_path):\n            # Access the children of the selected node and get their ids\n            if \"children\" in selected_node:\n                child_ids = [child[\"id\"] for child in selected_node[\"children\"]]\n                self.expand(child_ids)\n        else:\n            if self.handler:\n                if inspect.iscoroutinefunction(self.handler):\n                    await self.handler(file_path)\n                else:\n                    self.handler(file_path)\n                # Close all nodes if it is a file\n            self.expand([])\n</code></pre>"},{"location":"#ngwidgets.file_selector.FileSelector.__init__","title":"<code>__init__(path, extensions=None, handler=None, filter_func=None, create_ui=True)</code>","text":"<p>constructor</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the directory to start building the tree from.</p> required <code>extensions(dict)</code> <p>the extensions to filter for as a dictionary with name as key and extension as value</p> required <code>handler(Callable)</code> <p>handler function to call on selection</p> required <code>filter_func(Callable)</code> <p>optional filter function</p> required <code>create_ui(bool)</code> <p>if True create the self.tree ui.tree nicegui component - allows for testing the structure without ui by setting to False</p> required Source code in <code>ngwidgets/file_selector.py</code> <pre><code>def __init__(\n    self,\n    path: str,\n    extensions: dict = None,\n    handler: Callable = None,\n    filter_func: Callable[[str], bool] = None,\n    create_ui: bool = True,\n):\n    \"\"\"\n    constructor\n\n    Args:\n        path (str): The path to the directory to start building the tree from.\n        extensions(dict): the extensions to filter for as a dictionary with name as key and extension as value\n        handler(Callable): handler function to call on selection\n        filter_func(Callable): optional filter function\n        create_ui(bool): if True create the self.tree ui.tree nicegui component - allows for testing the structure without ui by setting to False\n    \"\"\"\n    self.path = path\n    if extensions is None:\n        extensions = {\"srt\": \".SRT\", \"gpx\": \".gpx\"}\n    self.extensions = extensions\n    self.handler = handler\n    self.filter_func = filter_func\n    # Initialize the file_count property\n    self.file_count = 0\n    # generate the tree structure\n    self.tree_structure = self.get_dir_tree(self.path, self.extensions)\n\n    if create_ui:\n        # create the ui.tree object\n        self.tree = ui.tree(\n            [self.tree_structure], label_key=\"label\", on_select=self.select_file\n        )\n</code></pre>"},{"location":"#ngwidgets.file_selector.FileSelector.expand","title":"<code>expand(node_ids)</code>","text":"<p>expand the nodes with the given ids</p> <p>node_ids(list): the list of node ids to be expanded</p> Source code in <code>ngwidgets/file_selector.py</code> <pre><code>def expand(self, node_ids: List[str]) -&gt; None:\n    \"\"\"\n    expand the nodes with the given ids\n\n    node_ids(list): the list of node ids to be expanded\n    \"\"\"\n    self.tree._props[\"expanded\"] = node_ids\n    self.tree.update()\n</code></pre>"},{"location":"#ngwidgets.file_selector.FileSelector.find_node_by_id","title":"<code>find_node_by_id(tree, id_to_find)</code>","text":"<p>Recursive function to find a node (file or directory) by its ID in a directory tree.</p> <p>Parameters:</p> Name Type Description Default <code>tree</code> <code>dict</code> <p>A dictionary representing the directory tree. The tree is constructed with each node containing 'id' (str) as a unique identifier, 'value' (str) as the path to the file or directory, and 'children' (list of dict) as a list of child nodes.</p> required <code>id_to_find</code> <code>str</code> <p>The ID of the node to find in the directory tree.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>Optional[Dict[str, Union[str, List[Dict]]]]</code> <p>The node associated with the found ID. Returns None if the ID is not found.</p> Source code in <code>ngwidgets/file_selector.py</code> <pre><code>def find_node_by_id(\n    self, tree: Dict[str, Union[str, List[Dict]]], id_to_find: str\n) -&gt; Optional[Dict[str, Union[str, List[Dict]]]]:\n    \"\"\"\n    Recursive function to find a node (file or directory) by its ID in a directory tree.\n\n    Args:\n        tree (dict): A dictionary representing the directory tree. The tree is constructed with each node\n            containing 'id' (str) as a unique identifier, 'value' (str) as the path to the file or directory,\n            and 'children' (list of dict) as a list of child nodes.\n        id_to_find (str): The ID of the node to find in the directory tree.\n\n    Returns:\n        dict: The node associated with the found ID. Returns None if the ID is not found.\n    \"\"\"\n    if tree[\"id\"] == id_to_find:\n        return tree\n\n    for child in tree.get(\"children\", []):\n        found = self.find_node_by_id(child, id_to_find)\n        if found:\n            return found\n\n    return None\n</code></pre>"},{"location":"#ngwidgets.file_selector.FileSelector.get_dir_tree","title":"<code>get_dir_tree(path, extensions, id_path=[1])</code>","text":"<p>Recursive function to construct a directory tree.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the directory to start building the tree from.</p> required <code>extensions(dict)</code> <p>the extensions to filter for as a dictionary with name as key and extension as value</p> required <code>id_path</code> <code>List[int]</code> <p>List of integers representing the current path in the tree.</p> <code>[1]</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>Optional[Dict[str, Union[str, List[Dict]]]]</code> <p>A dictionary representing the directory tree. For each directory or .scad file found,</p> <code>Optional[Dict[str, Union[str, List[Dict]]]]</code> <p>it will add a dictionary to the 'children' list of its parent directory's dictionary.</p> Source code in <code>ngwidgets/file_selector.py</code> <pre><code>def get_dir_tree(\n    self, path: str, extensions: dict, id_path: List[int] = [1]\n) -&gt; Optional[Dict[str, Union[str, List[Dict]]]]:\n    \"\"\"\n    Recursive function to construct a directory tree.\n\n    Args:\n        path (str): The path to the directory to start building the tree from.\n        extensions(dict): the extensions to filter for as a dictionary with name as key and extension as value\n        id_path (List[int]): List of integers representing the current path in the tree.\n\n    Returns:\n        dict: A dictionary representing the directory tree. For each directory or .scad file found,\n        it will add a dictionary to the 'children' list of its parent directory's dictionary.\n    \"\"\"\n    path = os.path.abspath(path)\n    id_string = \".\".join(map(str, id_path))\n    items = self.get_path_items(path)\n    children = []\n    item_counter = 1  # counter for generating child id\n\n    # Iterating over directories first\n    for name in items:\n        item_path = os.path.join(path, name)\n        child_id_path = id_path + [item_counter]\n\n        if os.path.isdir(item_path):\n            dir_tree = self.get_dir_tree(item_path, extensions, child_id_path)\n            if dir_tree:\n                children.append(dir_tree)\n                item_counter += 1\n\n    # Then iterating over files\n    # Check if an empty string is an allowed extension\n    allow_no_extension = \"\" in extensions.values()\n    for name in items:\n        item_path = os.path.join(path, name)\n        child_id_path = id_path + [item_counter]\n\n        # make sure the item is a file\n        if not os.path.isdir(item_path):\n\n            # Check if the item has an extension that matches the allowed extensions\n            has_allowed_extension = any(\n                name.endswith(ext) for ext in extensions.values() if ext\n            )\n\n            # Check if the item has no extension and no extension is allowed\n            is_no_extension_allowed = allow_no_extension and \".\" not in name\n\n            # Proceed if the item either has an allowed extension or no extension is allowed\n            if has_allowed_extension or is_no_extension_allowed:\n                children.append(\n                    {\n                        \"id\": \".\".join(map(str, child_id_path)),\n                        \"label\": name,\n                        \"value\": item_path,\n                    }\n                )\n                self.file_count += 1  # Increment file_count for each file added\n\n                item_counter += 1\n\n    if children:\n        return {\n            \"id\": id_string,\n            \"label\": os.path.basename(path),\n            \"value\": path,\n            \"children\": children,\n        }\n</code></pre>"},{"location":"#ngwidgets.file_selector.FileSelector.get_path_items","title":"<code>get_path_items(path)</code>","text":"<p>Get sorted list of items in a specified directory path, filtering out non-relevant files like <code>._</code> files.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The directory path to list items from.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A sorted list of relevant items from the directory.        Returns an empty list if an error occurs.</p> Source code in <code>ngwidgets/file_selector.py</code> <pre><code>def get_path_items(self, path: str) -&gt; List[str]:\n    \"\"\"\n    Get sorted list of items in a specified directory path, filtering out non-relevant files like `._` files.\n\n    Args:\n        path (str): The directory path to list items from.\n\n    Returns:\n        List[str]: A sorted list of relevant items from the directory.\n                   Returns an empty list if an error occurs.\n\n    \"\"\"\n    items = []\n\n    try:\n        all_items = os.listdir(path)\n\n        for item in all_items:\n            if not item.startswith(\"._\"):\n                if not self.filter_func or self.filter_func(item):\n                    items.append(item)\n\n        items.sort()\n    except BaseException:\n        pass\n\n    return items\n</code></pre>"},{"location":"#ngwidgets.file_selector.FileSelector.select_file","title":"<code>select_file(vcea)</code>  <code>async</code>","text":"<p>select the given file and call my handler on the file path of it</p> <p>Parameters:</p> Name Type Description Default <code>vcea(ValueChangeEventArguments)</code> <p>the tree selection event</p> required Source code in <code>ngwidgets/file_selector.py</code> <pre><code>async def select_file(self, vcea: ValueChangeEventArguments):\n    \"\"\"\n    select the given file and call my handler on the file path of it\n\n    Args:\n        vcea(ValueChangeEventArguments): the tree selection event\n    \"\"\"\n    id_to_find = vcea.value  # Assuming vcea.value contains the id\n    if id_to_find is None:\n        return\n\n    selected_node = self.find_node_by_id(self.tree_structure, id_to_find)\n    if selected_node is None:\n        raise ValueError(\n            f\"No item with id {id_to_find} found in the tree structure.\"\n        )\n\n    file_path = selected_node[\"value\"]\n\n    # Only expand the node if it is a directory\n    if os.path.isdir(file_path):\n        # Access the children of the selected node and get their ids\n        if \"children\" in selected_node:\n            child_ids = [child[\"id\"] for child in selected_node[\"children\"]]\n            self.expand(child_ids)\n    else:\n        if self.handler:\n            if inspect.iscoroutinefunction(self.handler):\n                await self.handler(file_path)\n            else:\n                self.handler(file_path)\n            # Close all nodes if it is a file\n        self.expand([])\n</code></pre>"},{"location":"#ngwidgets.input_webserver","title":"<code>input_webserver</code>","text":"<p>Created on 2023-09-12</p> <p>@author: wf</p>"},{"location":"#ngwidgets.input_webserver.InputWebSolution","title":"<code>InputWebSolution</code>","text":"<p>               Bases: <code>WebSolution</code></p> <p>A WebSolution that is focused on handling a single input.</p> <p>Attributes:</p> Name Type Description <code>is_local</code> <code>bool</code> <p>Indicates if the input source is local or remote.</p> <code>input</code> <code>str</code> <p>The input data or path to be processed.</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>class InputWebSolution(WebSolution):\n    \"\"\"\n    A WebSolution that is focused on handling a single input.\n\n    Attributes:\n        is_local (bool): Indicates if the input source is local or remote.\n        input (str): The input data or path to be processed.\n    \"\"\"\n\n    def __init__(self, webserver: NiceGuiWebserver, client: Client):\n        \"\"\"\n        Initializes the InputWebSolution instance with the webserver and client.\n\n        Args:\n            webserver (NiceGuiWebserver): The webserver instance this solution is part of.\n            client (Client): The client interacting with this solution.\n        \"\"\"\n        super().__init__(webserver, client)\n        self.debug = webserver.debug\n        self.root_path = None\n        self.is_local = False\n        self.input = \"\"\n        self.render_on_load = False\n\n    def input_changed(self, cargs):\n        \"\"\"\n        react on changed input\n        \"\"\"\n        self.input = cargs.value\n        pass\n\n    def read_input(self, input_str: str):\n        \"\"\"Reads the given input and handles any exceptions.\n\n        Args:\n            input_str (str): The input string representing a URL or local file.\n        \"\"\"\n        try:\n            ui.notify(f\"reading {input_str}\")\n            if self.log_view:\n                self.log_view.clear()\n            self.error_msg = None\n        except BaseException as e:\n            self.handle_exception(e, self.do_trace)\n\n    async def read_and_optionally_render(self, input_str, with_render: bool = False):\n        \"\"\"\n        Reads the given input and optionally renders the given input\n\n        Args:\n            input_str (str): The input string representing a URL or local file.\n            with_render(bool): if True also render\n        \"\"\"\n        self.input_input.set_value(input_str)\n        self.read_input(input_str)\n        if with_render or self.args.render_on_load:\n            await self.render(None)\n\n    async def reload_file(self):\n        \"\"\"\n        reload the input file\n        \"\"\"\n        input_str = self.input\n        if not input_str:\n            return\n        if os.path.exists(input_str):\n            input_str = os.path.abspath(input_str)\n        allowed = self.is_local\n        if not self.is_local:\n            for allowed_url in self.allowed_urls:\n                if input_str.startswith(allowed_url):\n                    allowed = True\n        if not allowed:\n            ui.notify(\"only white listed URLs and Path inputs are allowed\")\n        else:\n            await self.read_and_optionally_render(self.input, with_render=True)\n\n    async def open_file(self) -&gt; None:\n        \"\"\"\n        Opens a Local filer picker dialog and reads the\n        selected input file.\"\"\"\n        if self.is_local:\n            pick_list = await LocalFilePicker(\"~\", multiple=False)\n            if pick_list and len(pick_list) &gt; 0:\n                input_file = pick_list[0]\n                with_render = self.render_on_load\n                await self.read_and_optionally_render(\n                    input_file, with_render=with_render\n                )\n\n    pass\n\n    async def home(self):\n        \"\"\"\n        provide the main content page\n\n        \"\"\"\n        await self.setup_content_div(setup_content=None)\n\n    async def about(self):\n        \"\"\"\n        show about\n        \"\"\"\n        await self.setup_content_div(self.setup_about)\n\n    def setup_about(self):\n        \"\"\"\n        display an About\n        \"\"\"\n        self.about_div = About(self.config.version)\n\n    async def setup_footer(\n        self,\n        with_log: bool = True,\n        handle_logging: bool = True,\n        max_lines: int = 20,\n        log_classes: str = \"w-full h-40\",\n    ):\n        \"\"\"\n        setup a footer with an optional log view\n        \"\"\"\n        if with_log:\n            self.log_view = ui.log(max_lines=max_lines).classes(log_classes)\n            if handle_logging:\n                self.log_view_handler = LogElementHandler(self.log_view)\n                self.webserver.logger.addHandler(self.log_view_handler)\n        else:\n            self.log_view = None\n        await super().setup_footer()\n        if self.args.input:\n            # await client.connected()\n            with_render = self.render_on_load\n            await self.read_and_optionally_render(\n                self.args.input, with_render=with_render\n            )\n\n    async def settings(self):\n        \"\"\"\n        Generates the settings page\n        \"\"\"\n\n        def show():\n            with ui.row():\n                ui.checkbox(\"debug\", value=self.webserver.debug).bind_value(\n                    self.webserver, \"debug\"\n                )\n                ui.checkbox(\n                    \"debug with trace\", value=self.webserver.do_trace\n                ).bind_value(self.webserver, \"do_trace\")\n                ui.checkbox(\"render on load\", value=self.render_on_load).bind_value(\n                    self, \"render_on_load\"\n                )\n            self.configure_settings()\n\n        await self.setup_content_div(show)\n\n    def configure_settings(self):\n        \"\"\"\n        Configures settings specific to this web solution.\n        This method is intended to be overridden by subclasses to provide custom settings behavior.\n        The base method does nothing and can be extended in subclasses.\n        \"\"\"\n\n    def configure_menu(self):\n        \"\"\"\n        Configures the menu items specific to this web solution.\n        This method is intended to be overridden by subclasses to provide custom menu behavior.\n        The base method does nothing and can be extended in subclasses.\n        \"\"\"\n        pass\n\n    def prepare_ui(self):\n        \"\"\"\n        handle the command line arguments\n        \"\"\"\n        WebSolution.prepare_ui(self)\n        args = self.webserver.args\n        self.input = args.input\n        self.root_path = self.webserver.root_path\n        self.is_local = args.local\n        self.render_on_load = args.render_on_load\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.__init__","title":"<code>__init__(webserver, client)</code>","text":"<p>Initializes the InputWebSolution instance with the webserver and client.</p> <p>Parameters:</p> Name Type Description Default <code>webserver</code> <code>NiceGuiWebserver</code> <p>The webserver instance this solution is part of.</p> required <code>client</code> <code>Client</code> <p>The client interacting with this solution.</p> required Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>def __init__(self, webserver: NiceGuiWebserver, client: Client):\n    \"\"\"\n    Initializes the InputWebSolution instance with the webserver and client.\n\n    Args:\n        webserver (NiceGuiWebserver): The webserver instance this solution is part of.\n        client (Client): The client interacting with this solution.\n    \"\"\"\n    super().__init__(webserver, client)\n    self.debug = webserver.debug\n    self.root_path = None\n    self.is_local = False\n    self.input = \"\"\n    self.render_on_load = False\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.about","title":"<code>about()</code>  <code>async</code>","text":"<p>show about</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>async def about(self):\n    \"\"\"\n    show about\n    \"\"\"\n    await self.setup_content_div(self.setup_about)\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.configure_menu","title":"<code>configure_menu()</code>","text":"<p>Configures the menu items specific to this web solution. This method is intended to be overridden by subclasses to provide custom menu behavior. The base method does nothing and can be extended in subclasses.</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>def configure_menu(self):\n    \"\"\"\n    Configures the menu items specific to this web solution.\n    This method is intended to be overridden by subclasses to provide custom menu behavior.\n    The base method does nothing and can be extended in subclasses.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.configure_settings","title":"<code>configure_settings()</code>","text":"<p>Configures settings specific to this web solution. This method is intended to be overridden by subclasses to provide custom settings behavior. The base method does nothing and can be extended in subclasses.</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>def configure_settings(self):\n    \"\"\"\n    Configures settings specific to this web solution.\n    This method is intended to be overridden by subclasses to provide custom settings behavior.\n    The base method does nothing and can be extended in subclasses.\n    \"\"\"\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.home","title":"<code>home()</code>  <code>async</code>","text":"<p>provide the main content page</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>async def home(self):\n    \"\"\"\n    provide the main content page\n\n    \"\"\"\n    await self.setup_content_div(setup_content=None)\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.input_changed","title":"<code>input_changed(cargs)</code>","text":"<p>react on changed input</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>def input_changed(self, cargs):\n    \"\"\"\n    react on changed input\n    \"\"\"\n    self.input = cargs.value\n    pass\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.open_file","title":"<code>open_file()</code>  <code>async</code>","text":"<p>Opens a Local filer picker dialog and reads the selected input file.</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>async def open_file(self) -&gt; None:\n    \"\"\"\n    Opens a Local filer picker dialog and reads the\n    selected input file.\"\"\"\n    if self.is_local:\n        pick_list = await LocalFilePicker(\"~\", multiple=False)\n        if pick_list and len(pick_list) &gt; 0:\n            input_file = pick_list[0]\n            with_render = self.render_on_load\n            await self.read_and_optionally_render(\n                input_file, with_render=with_render\n            )\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.prepare_ui","title":"<code>prepare_ui()</code>","text":"<p>handle the command line arguments</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>def prepare_ui(self):\n    \"\"\"\n    handle the command line arguments\n    \"\"\"\n    WebSolution.prepare_ui(self)\n    args = self.webserver.args\n    self.input = args.input\n    self.root_path = self.webserver.root_path\n    self.is_local = args.local\n    self.render_on_load = args.render_on_load\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.read_and_optionally_render","title":"<code>read_and_optionally_render(input_str, with_render=False)</code>  <code>async</code>","text":"<p>Reads the given input and optionally renders the given input</p> <p>Parameters:</p> Name Type Description Default <code>input_str</code> <code>str</code> <p>The input string representing a URL or local file.</p> required <code>with_render(bool)</code> <p>if True also render</p> required Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>async def read_and_optionally_render(self, input_str, with_render: bool = False):\n    \"\"\"\n    Reads the given input and optionally renders the given input\n\n    Args:\n        input_str (str): The input string representing a URL or local file.\n        with_render(bool): if True also render\n    \"\"\"\n    self.input_input.set_value(input_str)\n    self.read_input(input_str)\n    if with_render or self.args.render_on_load:\n        await self.render(None)\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.read_input","title":"<code>read_input(input_str)</code>","text":"<p>Reads the given input and handles any exceptions.</p> <p>Parameters:</p> Name Type Description Default <code>input_str</code> <code>str</code> <p>The input string representing a URL or local file.</p> required Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>def read_input(self, input_str: str):\n    \"\"\"Reads the given input and handles any exceptions.\n\n    Args:\n        input_str (str): The input string representing a URL or local file.\n    \"\"\"\n    try:\n        ui.notify(f\"reading {input_str}\")\n        if self.log_view:\n            self.log_view.clear()\n        self.error_msg = None\n    except BaseException as e:\n        self.handle_exception(e, self.do_trace)\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.reload_file","title":"<code>reload_file()</code>  <code>async</code>","text":"<p>reload the input file</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>async def reload_file(self):\n    \"\"\"\n    reload the input file\n    \"\"\"\n    input_str = self.input\n    if not input_str:\n        return\n    if os.path.exists(input_str):\n        input_str = os.path.abspath(input_str)\n    allowed = self.is_local\n    if not self.is_local:\n        for allowed_url in self.allowed_urls:\n            if input_str.startswith(allowed_url):\n                allowed = True\n    if not allowed:\n        ui.notify(\"only white listed URLs and Path inputs are allowed\")\n    else:\n        await self.read_and_optionally_render(self.input, with_render=True)\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.settings","title":"<code>settings()</code>  <code>async</code>","text":"<p>Generates the settings page</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>async def settings(self):\n    \"\"\"\n    Generates the settings page\n    \"\"\"\n\n    def show():\n        with ui.row():\n            ui.checkbox(\"debug\", value=self.webserver.debug).bind_value(\n                self.webserver, \"debug\"\n            )\n            ui.checkbox(\n                \"debug with trace\", value=self.webserver.do_trace\n            ).bind_value(self.webserver, \"do_trace\")\n            ui.checkbox(\"render on load\", value=self.render_on_load).bind_value(\n                self, \"render_on_load\"\n            )\n        self.configure_settings()\n\n    await self.setup_content_div(show)\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.setup_about","title":"<code>setup_about()</code>","text":"<p>display an About</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>def setup_about(self):\n    \"\"\"\n    display an About\n    \"\"\"\n    self.about_div = About(self.config.version)\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebSolution.setup_footer","title":"<code>setup_footer(with_log=True, handle_logging=True, max_lines=20, log_classes='w-full h-40')</code>  <code>async</code>","text":"<p>setup a footer with an optional log view</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>async def setup_footer(\n    self,\n    with_log: bool = True,\n    handle_logging: bool = True,\n    max_lines: int = 20,\n    log_classes: str = \"w-full h-40\",\n):\n    \"\"\"\n    setup a footer with an optional log view\n    \"\"\"\n    if with_log:\n        self.log_view = ui.log(max_lines=max_lines).classes(log_classes)\n        if handle_logging:\n            self.log_view_handler = LogElementHandler(self.log_view)\n            self.webserver.logger.addHandler(self.log_view_handler)\n    else:\n        self.log_view = None\n    await super().setup_footer()\n    if self.args.input:\n        # await client.connected()\n        with_render = self.render_on_load\n        await self.read_and_optionally_render(\n            self.args.input, with_render=with_render\n        )\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebserver","title":"<code>InputWebserver</code>","text":"<p>               Bases: <code>NiceGuiWebserver</code></p> <p>a webserver around a single input file of given filetypes</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>class InputWebserver(NiceGuiWebserver):\n    \"\"\"\n    a webserver around a single input file of given filetypes\n    \"\"\"\n\n    def __init__(self, config: WebserverConfig = None):\n        \"\"\"\n        constructor\n        \"\"\"\n        NiceGuiWebserver.__init__(self, config=config)\n        self.logger = logging.getLogger()\n\n        @ui.page(\"/\")\n        async def home_page(client: Client):\n            return await self.page(client, InputWebSolution.home)\n\n        @ui.page(\"/settings\")\n        async def settings_page(client: Client):\n            return await self.page(client, InputWebSolution.settings)\n\n        @ui.page(\"/about\")\n        async def about_page(client: Client):\n            return await self.page(client, InputWebSolution.about)\n\n    def configure_run(self):\n        \"\"\"\n        override the run configuration\n        \"\"\"\n        NiceGuiWebserver.configure_run(self)\n        args = self.args\n        self.is_local = args.local\n        if hasattr(args, \"root_path\"):\n            self.root_path = os.path.abspath(args.root_path)\n        else:\n            self.root_path = None\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebserver.__init__","title":"<code>__init__(config=None)</code>","text":"<p>constructor</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>def __init__(self, config: WebserverConfig = None):\n    \"\"\"\n    constructor\n    \"\"\"\n    NiceGuiWebserver.__init__(self, config=config)\n    self.logger = logging.getLogger()\n\n    @ui.page(\"/\")\n    async def home_page(client: Client):\n        return await self.page(client, InputWebSolution.home)\n\n    @ui.page(\"/settings\")\n    async def settings_page(client: Client):\n        return await self.page(client, InputWebSolution.settings)\n\n    @ui.page(\"/about\")\n    async def about_page(client: Client):\n        return await self.page(client, InputWebSolution.about)\n</code></pre>"},{"location":"#ngwidgets.input_webserver.InputWebserver.configure_run","title":"<code>configure_run()</code>","text":"<p>override the run configuration</p> Source code in <code>ngwidgets/input_webserver.py</code> <pre><code>def configure_run(self):\n    \"\"\"\n    override the run configuration\n    \"\"\"\n    NiceGuiWebserver.configure_run(self)\n    args = self.args\n    self.is_local = args.local\n    if hasattr(args, \"root_path\"):\n        self.root_path = os.path.abspath(args.root_path)\n    else:\n        self.root_path = None\n</code></pre>"},{"location":"#ngwidgets.leaflet","title":"<code>leaflet</code>","text":"<p>https://github.com/zauberzeug/nicegui/blob/main/examples/map/leaflet.py</p> <p>@author: rodja</p> <p>modified 2023-08-16 to handle set_zoom and draw_path @author: wf</p>"},{"location":"#ngwidgets.leaflet.leaflet","title":"<code>leaflet</code>","text":"<p>               Bases: <code>element</code></p> <p>nicegui Leaflet integration</p> <p>see https://leafletjs.com/</p> Source code in <code>ngwidgets/leaflet.py</code> <pre><code>class leaflet(ui.element, component=\"leaflet.js\"):\n    \"\"\"\n    nicegui Leaflet integration\n\n    see https://leafletjs.com/\n    \"\"\"\n\n    def __init__(self, version=\"1.7.1\") -&gt; None:\n        super().__init__()\n        ui.add_head_html(\n            f'&lt;link href=\"https://unpkg.com/leaflet@{version}/dist/leaflet.css\" rel=\"stylesheet\"/&gt;'\n        )\n        ui.add_head_html(\n            f'&lt;script src=\"https://unpkg.com/leaflet@{version}/dist/leaflet.js\"&gt;&lt;/script&gt;'\n        )\n\n    def set_location(self, location: Tuple[float, float], zoom_level: int = 9) -&gt; None:\n        lat, lon = location\n        self.run_method(\"set_location\", lat, lon, zoom_level)\n\n    def set_zoom_level(self, zoom_level: int):\n        self.run_method(\"set_zoom_level\", zoom_level)\n\n    def draw_path(self, path: List[Tuple[float, float]]) -&gt; None:\n        \"\"\"Draw a path on the map based on list of lat-long tuples.\"\"\"\n        self.run_method(\"draw_path\", path)\n</code></pre>"},{"location":"#ngwidgets.leaflet.leaflet.draw_path","title":"<code>draw_path(path)</code>","text":"<p>Draw a path on the map based on list of lat-long tuples.</p> Source code in <code>ngwidgets/leaflet.py</code> <pre><code>def draw_path(self, path: List[Tuple[float, float]]) -&gt; None:\n    \"\"\"Draw a path on the map based on list of lat-long tuples.\"\"\"\n    self.run_method(\"draw_path\", path)\n</code></pre>"},{"location":"#ngwidgets.llm","title":"<code>llm</code>","text":"<p>Created on 2023-06-23</p> <p>@author: wf</p>"},{"location":"#ngwidgets.llm.LLM","title":"<code>LLM</code>","text":"<p>Large Language Model access wrapper</p> Source code in <code>ngwidgets/llm.py</code> <pre><code>class LLM:\n    \"\"\"\n    Large Language Model access wrapper\n    \"\"\"\n\n    # Define a dictionary that maps models to their size limits\n    MODEL_SIZE_LIMITS = {\n        \"gpt-3.5-turbo\": 4096,  # Adjust this limit as needed for other models\n        \"gpt-3.5-turbo-16k\": 4096 * 4,\n    }\n\n    # Define a constant for the average token character length\n    AVERAGE_TOKEN_CHAR_LEN = 4  # Adjust this value based on the model\n    DEFAULT_MODEL = \"gpt-3.5-turbo\"\n\n    def __init__(\n        self,\n        api_key: str = None,\n        model=DEFAULT_MODEL,\n        force_key: bool = False,\n        prompts_filepath: str = None,\n    ):\n        \"\"\"\n        constructor\n\n        Args:\n            api_key(str): the access key\n            model(str): the model to use\n            prompt_filepath(str): the filepath for the prompt logging\n        \"\"\"\n        self.model = model\n        self.token_size_limit = LLM.MODEL_SIZE_LIMITS.get(\n            model, 4096\n        )  # Default to 4096 if model not found\n        self.char_size_limit = self.token_size_limit * LLM.AVERAGE_TOKEN_CHAR_LEN\n        openai_api_key = None\n        if api_key:\n            # If an API key is provided during object creation, set it.\n            openai.api_key = api_key\n        else:\n            # Load the API key from the environment or a JSON file\n            openai_api_key = os.getenv(\"OPENAI_API_KEY\")\n            json_file = Path.home() / \".openai\" / \"openai_api_key.json\"\n\n            if openai_api_key is None and json_file.is_file():\n                with open(json_file, \"r\") as file:\n                    data = json.load(file)\n                    openai_api_key = data.get(\"OPENAI_API_KEY\")\n\n        if openai_api_key is None:\n            if force_key:\n                raise ValueError(\n                    \"No OpenAI API key found. Please set the 'OPENAI_API_KEY' environment variable or store it in `~/.openai/openai_api_key.json`.\"\n                )\n            else:\n                return\n        # set the global api key\n        openai.api_key = openai_api_key\n        # If prompts_filepath is None, use default path in the user's home directory with the current date\n        if prompts_filepath is None:\n            # Format: Year-Month-Day\n            date_str = datetime.now().strftime(\"%Y-%m-%d\")\n            default_filename = f\"prompts_{date_str}.yaml\"  # Constructs the file name\n            openai_dir = (\n                Path.home() / \".openai\"\n            )  # Constructs the path to the .openai directory\n\n            # Check if .openai directory exists, create if it doesn't\n            if not openai_dir.exists():\n                openai_dir.mkdir(parents=True, exist_ok=True)\n\n            prompts_filepath = openai_dir / default_filename  # Constructs the full path\n\n        self.prompts_filepath = prompts_filepath\n\n        # Load or initialize the prompts file\n        if prompts_filepath.is_file():\n            self.prompts = Prompts.load_from_yaml_file(str(prompts_filepath))\n        else:\n            # If the file doesn't exist, create an empty Prompts object\n            # You might want to handle directory creation here if .openai directory might not exist\n            self.prompts = Prompts()\n\n    def available(self):\n        \"\"\"\n        check availability of API by making sure there is an api_key\n\n        Returns:\n            bool: True if the Large Language Model is available\n        \"\"\"\n        return openai.api_key is not None\n\n    def ask(self, prompt_text: str, model: str = None, temperature: float = 0.7) -&gt; str:\n        \"\"\"\n        ask a prompt\n\n        Args:\n            prompt_text(str): The text of the prompt to send to the model.\n            model(str): the model to use - if None self.model is used\n            temperature(float): Controls randomness in the response. Lower is more deterministic.\n        Returns:\n            str: the answer\n        \"\"\"\n        if len(prompt_text) &gt; self.char_size_limit:\n            raise ValueError(\n                f\"Prompt exceeds size limit of {self.char_size_limit} characters.\"\n            )\n        if model is None:\n            model = self.model\n\n        # Start timing the response\n        start_time = datetime.now()\n\n        # Interact with the API\n        chat_completion = openai.chat.completions.create(\n            model=model,\n            messages=[{\"role\": \"user\", \"content\": prompt_text}],\n            temperature=temperature,  # Include the temperature parameter here\n        )\n        result = chat_completion.choices[0].message.content\n        total_tokens = chat_completion.usage.total_tokens\n        model_details = chat_completion.model\n\n        # Calculate duration\n        duration = (datetime.now() - start_time).total_seconds()\n\n        # Create a new Prompt instance and append it to the prompts list\n        new_prompt = Prompt(\n            prompt=prompt_text,\n            response=result,\n            model=model,\n            model_details=model_details,\n            temperature=temperature,\n            tokens=total_tokens,\n            timestamp=datetime.now(),\n            duration=duration,\n        )\n        start_save_time = time.time()\n\n        # Save the prompts to a file\n        self.prompts.prompts.append(new_prompt)\n        new_prompt.append_to_file(self.prompts_filepath)\n\n        # After saving\n        end_save_time = time.time()\n        save_duration = end_save_time - start_save_time\n        print(f\"Time taken to append to prompts: {save_duration} seconds\")\n        return result\n</code></pre>"},{"location":"#ngwidgets.llm.LLM.__init__","title":"<code>__init__(api_key=None, model=DEFAULT_MODEL, force_key=False, prompts_filepath=None)</code>","text":"<p>constructor</p> <p>Parameters:</p> Name Type Description Default <code>api_key(str)</code> <p>the access key</p> required <code>model(str)</code> <p>the model to use</p> required <code>prompt_filepath(str)</code> <p>the filepath for the prompt logging</p> required Source code in <code>ngwidgets/llm.py</code> <pre><code>def __init__(\n    self,\n    api_key: str = None,\n    model=DEFAULT_MODEL,\n    force_key: bool = False,\n    prompts_filepath: str = None,\n):\n    \"\"\"\n    constructor\n\n    Args:\n        api_key(str): the access key\n        model(str): the model to use\n        prompt_filepath(str): the filepath for the prompt logging\n    \"\"\"\n    self.model = model\n    self.token_size_limit = LLM.MODEL_SIZE_LIMITS.get(\n        model, 4096\n    )  # Default to 4096 if model not found\n    self.char_size_limit = self.token_size_limit * LLM.AVERAGE_TOKEN_CHAR_LEN\n    openai_api_key = None\n    if api_key:\n        # If an API key is provided during object creation, set it.\n        openai.api_key = api_key\n    else:\n        # Load the API key from the environment or a JSON file\n        openai_api_key = os.getenv(\"OPENAI_API_KEY\")\n        json_file = Path.home() / \".openai\" / \"openai_api_key.json\"\n\n        if openai_api_key is None and json_file.is_file():\n            with open(json_file, \"r\") as file:\n                data = json.load(file)\n                openai_api_key = data.get(\"OPENAI_API_KEY\")\n\n    if openai_api_key is None:\n        if force_key:\n            raise ValueError(\n                \"No OpenAI API key found. Please set the 'OPENAI_API_KEY' environment variable or store it in `~/.openai/openai_api_key.json`.\"\n            )\n        else:\n            return\n    # set the global api key\n    openai.api_key = openai_api_key\n    # If prompts_filepath is None, use default path in the user's home directory with the current date\n    if prompts_filepath is None:\n        # Format: Year-Month-Day\n        date_str = datetime.now().strftime(\"%Y-%m-%d\")\n        default_filename = f\"prompts_{date_str}.yaml\"  # Constructs the file name\n        openai_dir = (\n            Path.home() / \".openai\"\n        )  # Constructs the path to the .openai directory\n\n        # Check if .openai directory exists, create if it doesn't\n        if not openai_dir.exists():\n            openai_dir.mkdir(parents=True, exist_ok=True)\n\n        prompts_filepath = openai_dir / default_filename  # Constructs the full path\n\n    self.prompts_filepath = prompts_filepath\n\n    # Load or initialize the prompts file\n    if prompts_filepath.is_file():\n        self.prompts = Prompts.load_from_yaml_file(str(prompts_filepath))\n    else:\n        # If the file doesn't exist, create an empty Prompts object\n        # You might want to handle directory creation here if .openai directory might not exist\n        self.prompts = Prompts()\n</code></pre>"},{"location":"#ngwidgets.llm.LLM.ask","title":"<code>ask(prompt_text, model=None, temperature=0.7)</code>","text":"<p>ask a prompt</p> <p>Parameters:</p> Name Type Description Default <code>prompt_text(str)</code> <p>The text of the prompt to send to the model.</p> required <code>model(str)</code> <p>the model to use - if None self.model is used</p> required <code>temperature(float)</code> <p>Controls randomness in the response. Lower is more deterministic.</p> required <p>Returns:     str: the answer</p> Source code in <code>ngwidgets/llm.py</code> <pre><code>def ask(self, prompt_text: str, model: str = None, temperature: float = 0.7) -&gt; str:\n    \"\"\"\n    ask a prompt\n\n    Args:\n        prompt_text(str): The text of the prompt to send to the model.\n        model(str): the model to use - if None self.model is used\n        temperature(float): Controls randomness in the response. Lower is more deterministic.\n    Returns:\n        str: the answer\n    \"\"\"\n    if len(prompt_text) &gt; self.char_size_limit:\n        raise ValueError(\n            f\"Prompt exceeds size limit of {self.char_size_limit} characters.\"\n        )\n    if model is None:\n        model = self.model\n\n    # Start timing the response\n    start_time = datetime.now()\n\n    # Interact with the API\n    chat_completion = openai.chat.completions.create(\n        model=model,\n        messages=[{\"role\": \"user\", \"content\": prompt_text}],\n        temperature=temperature,  # Include the temperature parameter here\n    )\n    result = chat_completion.choices[0].message.content\n    total_tokens = chat_completion.usage.total_tokens\n    model_details = chat_completion.model\n\n    # Calculate duration\n    duration = (datetime.now() - start_time).total_seconds()\n\n    # Create a new Prompt instance and append it to the prompts list\n    new_prompt = Prompt(\n        prompt=prompt_text,\n        response=result,\n        model=model,\n        model_details=model_details,\n        temperature=temperature,\n        tokens=total_tokens,\n        timestamp=datetime.now(),\n        duration=duration,\n    )\n    start_save_time = time.time()\n\n    # Save the prompts to a file\n    self.prompts.prompts.append(new_prompt)\n    new_prompt.append_to_file(self.prompts_filepath)\n\n    # After saving\n    end_save_time = time.time()\n    save_duration = end_save_time - start_save_time\n    print(f\"Time taken to append to prompts: {save_duration} seconds\")\n    return result\n</code></pre>"},{"location":"#ngwidgets.llm.LLM.available","title":"<code>available()</code>","text":"<p>check availability of API by making sure there is an api_key</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the Large Language Model is available</p> Source code in <code>ngwidgets/llm.py</code> <pre><code>def available(self):\n    \"\"\"\n    check availability of API by making sure there is an api_key\n\n    Returns:\n        bool: True if the Large Language Model is available\n    \"\"\"\n    return openai.api_key is not None\n</code></pre>"},{"location":"#ngwidgets.llm.Prompt","title":"<code>Prompt</code>","text":"<p>a single prompt with response</p> Source code in <code>ngwidgets/llm.py</code> <pre><code>@lod_storable\nclass Prompt:\n    \"\"\"\n    a single prompt with response\n    \"\"\"\n\n    prompt: str\n    response: str\n    tokens: int\n    temperature: float\n    timestamp: datetime\n    duration: float\n    model: Optional[str] = None\n    model_details: Optional[str] = None\n\n    def append_to_file(self, filepath: str):\n        # Open the file in append mode\n        with open(filepath, \"a\") as file:\n            # Dump the new prompt as YAML directly into the file\n            yaml_str = self.to_yaml()\n            # Ensure the new prompt starts on a new line\n            file.write(f\"\\n{yaml_str}\")\n</code></pre>"},{"location":"#ngwidgets.llm.Prompts","title":"<code>Prompts</code>","text":"<p>keep track of a series of prompts</p> Source code in <code>ngwidgets/llm.py</code> <pre><code>@lod_storable\nclass Prompts:\n    \"\"\"\n    keep track of a series of prompts\n    \"\"\"\n\n    prompts: List[Prompt] = field(default_factory=list)\n</code></pre>"},{"location":"#ngwidgets.local_filepicker","title":"<code>local_filepicker</code>","text":""},{"location":"#ngwidgets.local_filepicker.LocalFilePicker","title":"<code>LocalFilePicker</code>","text":"<p>               Bases: <code>dialog</code></p> <p>see https://raw.githubusercontent.com/zauberzeug/nicegui/main/examples/local_file_picker/local_file_picker.py</p> Source code in <code>ngwidgets/local_filepicker.py</code> <pre><code>class LocalFilePicker(ui.dialog):\n    \"\"\"see\n    https://raw.githubusercontent.com/zauberzeug/nicegui/main/examples/local_file_picker/local_file_picker.py\n    \"\"\"\n\n    def __init__(\n        self,\n        directory: str,\n        *,\n        upper_limit: Optional[str] = ...,\n        multiple: bool = False,\n        show_hidden_files: bool = False,\n    ) -&gt; None:\n        \"\"\"Local File Picker\n\n        This is a simple file picker that allows you to select a file from the local filesystem where NiceGUI is running.\n\n        :param directory: The directory to start in.\n        :param upper_limit: The directory to stop at (None: no limit, default: same as the starting directory).\n        :param multiple: Whether to allow multiple files to be selected.\n        :param show_hidden_files: Whether to show hidden files.\n        \"\"\"\n        super().__init__()\n\n        self.path = Path(directory).expanduser()\n        if upper_limit is None:\n            self.upper_limit = None\n        else:\n            self.upper_limit = Path(\n                directory if upper_limit == ... else upper_limit\n            ).expanduser()\n        self.show_hidden_files = show_hidden_files\n\n        with self, ui.card():\n            self.add_drives_toggle()\n            self.grid = (\n                ui.aggrid(\n                    {\n                        \"columnDefs\": [{\"field\": \"name\", \"headerName\": \"File\"}],\n                        \"rowSelection\": \"multiple\" if multiple else \"single\",\n                    },\n                    html_columns=[0],\n                )\n                .classes(\"w-96\")\n                .on(\"cellDoubleClicked\", self.handle_double_click)\n            )\n            with ui.row().classes(\"w-full justify-end\"):\n                ui.button(\"Cancel\", on_click=self.close).props(\"outline\")\n                ui.button(\"Ok\", on_click=self._handle_ok)\n        self.update_grid()\n\n    def add_drives_toggle(self):\n        if platform.system() == \"Windows\":\n            import win32api\n\n            drives = win32api.GetLogicalDriveStrings().split(\"\\000\")[:-1]\n            self.drives_toggle = ui.toggle(\n                drives, value=drives[0], on_change=self.update_drive\n            )\n\n    def update_drive(self):\n        self.path = Path(self.drives_toggle.value).expanduser()\n        self.update_grid()\n\n    def update_grid(self) -&gt; None:\n        paths = list(self.path.glob(\"*\"))\n        if not self.show_hidden_files:\n            paths = [p for p in paths if not p.name.startswith(\".\")]\n        paths.sort(key=lambda p: p.name.lower())\n        paths.sort(key=lambda p: not p.is_dir())\n\n        self.grid.options[\"rowData\"] = [\n            {\n                \"name\": f\"\ud83d\udcc1 &lt;strong&gt;{p.name}&lt;/strong&gt;\" if p.is_dir() else p.name,\n                \"path\": str(p),\n            }\n            for p in paths\n        ]\n        if (\n            self.upper_limit is None\n            and self.path != self.path.parent\n            or self.upper_limit is not None\n            and self.path != self.upper_limit\n        ):\n            self.grid.options[\"rowData\"].insert(\n                0,\n                {\n                    \"name\": \"\ud83d\udcc1 &lt;strong&gt;..&lt;/strong&gt;\",\n                    \"path\": str(self.path.parent),\n                },\n            )\n        self.grid.update()\n\n    def handle_double_click(self, e: events.GenericEventArguments) -&gt; None:\n        self.path = Path(e.args[\"data\"][\"path\"])\n        if self.path.is_dir():\n            self.update_grid()\n        else:\n            self.submit([str(self.path)])\n\n    async def _handle_ok(self):\n        rows = await ui.run_javascript(\n            f\"getElement({self.grid.id}).gridOptions.api.getSelectedRows()\"\n        )\n        self.submit([r[\"path\"] for r in rows])\n</code></pre>"},{"location":"#ngwidgets.local_filepicker.LocalFilePicker.__init__","title":"<code>__init__(directory, *, upper_limit=..., multiple=False, show_hidden_files=False)</code>","text":"<p>Local File Picker</p> <p>This is a simple file picker that allows you to select a file from the local filesystem where NiceGUI is running.</p> <p>:param directory: The directory to start in. :param upper_limit: The directory to stop at (None: no limit, default: same as the starting directory). :param multiple: Whether to allow multiple files to be selected. :param show_hidden_files: Whether to show hidden files.</p> Source code in <code>ngwidgets/local_filepicker.py</code> <pre><code>def __init__(\n    self,\n    directory: str,\n    *,\n    upper_limit: Optional[str] = ...,\n    multiple: bool = False,\n    show_hidden_files: bool = False,\n) -&gt; None:\n    \"\"\"Local File Picker\n\n    This is a simple file picker that allows you to select a file from the local filesystem where NiceGUI is running.\n\n    :param directory: The directory to start in.\n    :param upper_limit: The directory to stop at (None: no limit, default: same as the starting directory).\n    :param multiple: Whether to allow multiple files to be selected.\n    :param show_hidden_files: Whether to show hidden files.\n    \"\"\"\n    super().__init__()\n\n    self.path = Path(directory).expanduser()\n    if upper_limit is None:\n        self.upper_limit = None\n    else:\n        self.upper_limit = Path(\n            directory if upper_limit == ... else upper_limit\n        ).expanduser()\n    self.show_hidden_files = show_hidden_files\n\n    with self, ui.card():\n        self.add_drives_toggle()\n        self.grid = (\n            ui.aggrid(\n                {\n                    \"columnDefs\": [{\"field\": \"name\", \"headerName\": \"File\"}],\n                    \"rowSelection\": \"multiple\" if multiple else \"single\",\n                },\n                html_columns=[0],\n            )\n            .classes(\"w-96\")\n            .on(\"cellDoubleClicked\", self.handle_double_click)\n        )\n        with ui.row().classes(\"w-full justify-end\"):\n            ui.button(\"Cancel\", on_click=self.close).props(\"outline\")\n            ui.button(\"Ok\", on_click=self._handle_ok)\n    self.update_grid()\n</code></pre>"},{"location":"#ngwidgets.lod_grid","title":"<code>lod_grid</code>","text":"<p>Created on 2023-10-3</p> <p>@author: wf</p>"},{"location":"#ngwidgets.lod_grid.GridConfig","title":"<code>GridConfig</code>  <code>dataclass</code>","text":"<p>Configuration for initializing a ListOfDictsGrid.</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>@dataclass\nclass GridConfig:\n    \"\"\"\n    Configuration for initializing a ListOfDictsGrid.\n    \"\"\"\n\n    key_col: str = \"#\"\n    column_defs: Optional[List[Dict]] = None\n    options: Dict = field(default_factory=dict)\n    # optics\n    theme: str = \"ag-theme-material\"\n    classes: str = \"h-screen overflow-auto\"\n    all_cols_html: bool = True\n    # behavior\n    lenient: bool = False\n    # default column defs\n    autoHeight: bool = True\n    sortable: bool = True\n    resizable: bool = True\n    editable: bool = False\n    wrapText: bool = True\n    # row options\n    multiselect: bool = False\n    auto_size_columns: bool = True\n    # buttons\n    with_buttons: bool = False\n    prepend_new: bool = True\n    html_columns: List[int] = field(default_factory=list)\n    keygen_callback: Optional[Callable] = None\n    exception_callback: Optional[Callable] = None\n    debug: bool = False\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid","title":"<code>ListOfDictsGrid</code>","text":"<p>ag grid based on list of dict</p> <p>see https://nicegui.io/documentation/ag_grid see https://github.com/zauberzeug/nicegui/discussions/1833</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>class ListOfDictsGrid:\n    \"\"\"\n    ag grid based on list of dict\n\n    see https://nicegui.io/documentation/ag_grid\n    see https://github.com/zauberzeug/nicegui/discussions/1833\n    \"\"\"\n\n    def __init__(\n        self, lod: Optional[List[Dict]] = None, config: GridConfig = None\n    ) -&gt; None:\n        \"\"\"\n        Initialize the ListOfDictsGrid object.\n\n        Args:\n            lod (Optional[List[Dict]]): List of dictionaries to be displayed.\n            config(GridConfig): configuration for the grid behavior\n        \"\"\"\n        self.lod = lod\n        self.config = config or GridConfig()\n        self.lod_index = {}\n        try:\n            if self.config.with_buttons:\n                self.setup_button_row()\n            # Update options to include onGridReady event handling\n            self.config.options[\n                \":onGridReady\"\n            ] = \"(params) =&gt; params.columnApi.autoSizeAllColumns()\"\n\n            self.ag_grid = ui.aggrid(\n                options=self.config.options,\n                html_columns=self.config.html_columns,\n            ).classes(self.config.classes)\n            self.ag_grid.theme = self.config.theme\n            self.auto_size_columns = self.config.auto_size_columns\n            self.setDefaultColDef()\n            if lod is not None:\n                self.load_lod(lod, self.config.column_defs)\n        except Exception as ex:\n            self.handle_exception(ex)\n\n    @property\n    def options(self):\n        return self.ag_grid._props.get(\"options\", {})\n\n    @options.setter\n    def options(self, value):\n        self.ag_grid._props[\"options\"] = value\n\n    @property\n    def html_columns(self):\n        return self.ag_grid._props.get(\"html_columns\", [])\n\n    @html_columns.setter\n    def html_columns(self, value):\n        self.ag_grid._props[\"html_columns\"] = value\n\n    @property\n    def auto_size_columns(self):\n        return self.ag_grid._props.get(\"auto_size_columns\", True)\n\n    @auto_size_columns.setter\n    def auto_size_columns(self, value):\n        self.ag_grid._props[\"auto_size_columns\"] = value\n\n    def get_column_def(self, col: str) -&gt; Dict:\n        \"\"\"\n        get the column definition for the given column\n\n        Args:\n            col (str): The field name of the column where checkboxes should be enabled.\n\n        Returns:\n            Dict: the column definition\n        \"\"\"\n        if not self.ag_grid.options.get(\"columnDefs\"):\n            raise Exception(\n                \"Column definitions are not set. Load the data first using load_lod.\"\n            )\n        # Go through each column definition\n        for col_def in self.ag_grid.options[\"columnDefs\"]:\n            if col_def[\"field\"] == col:\n                return col_def\n        return None\n\n    def set_column_def(self, col: str, key: str, value: Any) -&gt; Dict:\n        \"\"\"\n        Set a value in a column definition dictionary for a specified column.\n\n        This method updates the column definition dictionary for a given column by\n        setting a specific key to a provided value. If the column definition exists,\n        the key-value pair is updated; if not, no changes are made.\n\n        Parameters:\n            col (str): The name of the column to update.\n            key (str): The key in the column definition dictionary to set.\n            value (Any): The value to assign to the key in the dictionary.\n\n        Returns:\n            Dict: The updated column definition dictionary, or None if the column does not exist.\n        \"\"\"\n        col_def = self.get_column_def(\n            col\n        )  # Assuming get_column_def is defined elsewhere.\n        if col_def:\n            col_def[key] = value\n        return col_def\n\n    def set_checkbox_renderer(self, checkbox_col: str):\n        \"\"\"\n        set cellRenderer to checkBoxRenderer for the given column\n\n        Args:\n            checkbox_col (str): The field name of the column where\n            rendering as checkboxes should be enabled.\n\n        \"\"\"\n        col_def = self.get_column_def(checkbox_col)\n        col_def[\"cellRenderer\"] = \"checkboxRenderer\"\n\n    def set_checkbox_selection(self, checkbox_col: str):\n        \"\"\"\n        Set the checkbox selection for a specified column.\n\n        Args:\n            checkbox_col (str): The field name of the column where checkboxes should be enabled.\n        \"\"\"\n        col_def = self.get_column_def(checkbox_col)\n        if col_def:\n            col_def[\"checkboxSelection\"] = True\n\n    def handle_exception(self, ex: Exception) -&gt; None:\n        \"\"\"\n        Handles exceptions thrown during grid initialization or operation.\n\n        In debug mode, this method prints the stack trace and re-raises the exception for further debugging. In non-debug mode, it notifies the user of a general error.\n\n        Args:\n            ex (Exception): The exception that was caught.\n\n        Raises:\n            Exception: Re-raises the exception in debug mode for further debugging.\n        \"\"\"\n        if self.config.debug:\n            # Print a stack trace to stderr\n            print(\"Exception caught in ListOfDictsGrid:\", file=sys.stderr)\n            traceback.print_exc()\n            # Optionally, re-raise the exception for further debugging.\n            raise ex\n        elif self.config.exception_callback:\n            self.config.exception_callback(ex)\n        else:\n            # If not in debug mode, notify the user with a general error message.\n            # Ensure that ui.notify or a similar method is available and properly configured.\n            ui.notify(\n                f\"Unhandled exception {str(ex)} occurred in ListOfDictsGrid\",\n                type=\"error\",\n            )\n\n    def update_index(self, lenient: bool = False):\n        \"\"\"\n        update the index based on the given key column\n        \"\"\"\n        self.lod_index = {}\n        if self.lod:\n            for row_index, row in enumerate(self.lod):\n                if self.config.key_col in row:\n                    key_value = row[self.config.key_col]\n                    self.lod_index[key_value] = row\n                else:\n                    msg = f\"missing key column {self.config.key_col} in row {row_index}\"\n                    if not lenient:\n                        raise Exception(msg)\n                    else:\n                        print(msg, file=sys.stderr)\n                    # missing key\n                    pass\n\n    def get_row_for_key(self, key_value: str):\n        \"\"\"\n        the the row for the given key_value\n\n        Args:\n            key_value: str\n        \"\"\"\n        row = self.lod_index.get(key_value, None)\n        return row\n\n    def get_cell_value(self, key_value: Any, col_key: str) -&gt; Any:\n        \"\"\"\n        get the value for the given cell\n\n        Args:\n            key_value (Any): The value of the key column for the row to update.\n            row_key (str): The column key of the cell to update.\n\n        Returns:\n            Any: the value of the cell or None if the row doesn't exist\n        \"\"\"\n        rows_by_key = self.get_rows_by_key()\n        row = rows_by_key.get(key_value, None)\n        value = None\n        if row:\n            value = row.get(col_key, None)\n        return value\n\n    def update_cell(self, key_value: Any, col_key: str, value: Any) -&gt; None:\n        \"\"\"\n        Update a cell in the grid.\n\n        Args:\n            key_value (Any): The value of the key column for the row to update.\n            row_key (str): The column key of the cell to update.\n            value (Any): The new value for the specified cell.\n\n        \"\"\"\n        rows_by_key = self.get_rows_by_key()\n        row = rows_by_key.get(key_value, None)\n        if row:\n            row[col_key] = value\n\n    def get_row_data(self):\n        \"\"\"\n        get the complete row data\n        \"\"\"\n        row_data = self.ag_grid.options[\"rowData\"]\n        return row_data\n\n    def get_rows_by_key(self) -&gt; Dict[Any, Dict[str, Any]]:\n        \"\"\"\n        Organize rows in a dictionary of dictionaries, indexed by the key column value specified in GridConfig.\n\n        Returns:\n            Dict[Any, Dict[str, Any]]: A dictionary of dictionaries, with each sub-dictionary representing a row,\n                                       indexed by the key column values.\n        \"\"\"\n        data_by_key = {}\n        key_col = (\n            self.config.key_col\n        )  # Retrieve key column name from the GridConfig instance\n        for row in self.get_row_data():\n            key_value = row.get(key_col, None)\n            if key_value is not None:\n                data_by_key[key_value] = row\n        return data_by_key\n\n    async def onSizeColumnsToFit(self, _msg: dict):\n        \"\"\"\n        see https://www.reddit.com/r/nicegui/comments/17cg0o5/aggrid_autosize_columns_to_data_width/\n        \"\"\"\n        # await asyncio.sleep(0.2)\n        self.sizeColumnsToFit()\n\n    def sizeColumnsToFit(self):\n        if self.ag_grid:\n            self.ag_grid.run_column_method(\"autoSizeAllColumns\")\n            self.ag_grid.update()\n\n    def setDefaultColDef(self):\n        \"\"\"\n        set the default column definitions\n        \"\"\"\n        if not \"defaultColDef\" in self.ag_grid.options:\n            self.ag_grid.options[\"defaultColDef\"] = {}\n        if self.config.multiselect:\n            # Apply settings for multiple row selection\n            self.ag_grid.options[\"rowSelection\"] = \"multiple\"\n        defaultColDef = self.ag_grid.options[\"defaultColDef\"]\n        defaultColDef[\"resizable\"] = self.config.resizable\n        defaultColDef[\"sortable\"] = self.config.sortable\n        # https://www.ag-grid.com/javascript-data-grid/grid-size/\n        defaultColDef[\"wrapText\"] = self.config.wrapText\n        defaultColDef[\"autoHeight\"] = self.config.autoHeight\n        defaultColDef[\"editable\"] = self.config.editable\n\n    def load_lod(self, lod: list, columnDefs: list = None):\n        \"\"\"\n        load the given list of dicts\n\n        Args:\n            lod(list): a list of dicts to be loaded into the grid\n            columnDefs(list): a list of column definitions\n        \"\"\"\n        try:\n            if columnDefs is None:\n                # assume lod\n                columnDefs = []\n                if len(lod) &gt; 0:\n                    header = lod[0]\n                    for key, value in header.items():\n                        if isinstance(value, int) or isinstance(value, float):\n                            col_filter = \"agNumberColumnFilter\"\n                        elif isinstance(value, datetime.datetime) or isinstance(\n                            value, datetime.date\n                        ):\n                            col_filter = \"agDateColumnFilter\"\n                        else:\n                            col_filter = True  # Use default filter\n                        columnDefs.append(dict({\"field\": key, \"filter\": col_filter}))\n            self.ag_grid.options[\"columnDefs\"] = columnDefs\n            self.ag_grid.options[\"rowData\"] = lod\n            self.update_index(lenient=self.config.lenient)\n            if self.config.all_cols_html:\n                # Set html_columns based on all_rows_html flag\n                html_columns = list(range(len(columnDefs)))\n                self.html_columns = html_columns\n        except Exception as ex:\n            self.handle_exception(ex)\n\n    def update(self):\n        \"\"\"\n        update my aggrid\n        \"\"\"\n        if self.ag_grid:\n            self.ag_grid.update()\n\n    async def get_selected_rows(self):\n        \"\"\"\n        get the currently selected rows\n        \"\"\"\n        selected_rows = await self.ag_grid.get_selected_rows()\n        return selected_rows\n\n    def select_all_rows(self):\n        \"\"\"\n        select all my ag_grid rows\n        \"\"\"\n        self.ag_grid.run_grid_method(\"selectAll\")\n\n    async def delete_selected_rows(self, _args):\n        \"\"\"\n        Delete the currently selected rows based on the key column.\n        \"\"\"\n        # Await the asynchronous call to get selected rows\n        selected_rows = await self.get_selected_rows()\n        if len(selected_rows) == 0:\n            ui.notify(\"no rows selected for delete\", type=\"warning\")\n            return\n        # Get the list of keys of selected rows\n        selected_keys = [row[self.config.key_col] for row in selected_rows]\n        # Notify the user about the operation\n        ui.notify(f\"deleting rows with keys {selected_keys}\")\n        # Update the data to exclude selected rows\n        self.lod[:] = [\n            row for row in self.lod if row[self.config.key_col] not in selected_keys\n        ]\n        # Update the grid to reflect changes\n        self.update()\n\n    async def new_row(self, _args):\n        \"\"\"\n        add a new row\n        \"\"\"\n        try:\n            # Handle the key column\n            if (\n                self.config.key_col == \"#\"\n            ):  # If the key column is '#' treating it as an integer index\n                new_key = len(self.lod)\n            elif (\n                self.config.keygen_callback\n            ):  # If a key generation callback is provided\n                new_key = self.config.keygen_callback()\n            else:  # If the key column isn't '#' and no keygen callback is provided\n                msg = f\"Missing keygen_callback to create new key for '{self.config.key_col}' column\"\n                ui.notify(msg, type=\"negative\")\n                return\n            ui.notify(f\"new row with {self.config.key_col}={new_key}\")\n            new_record = {f\"{self.config.key_col}\": new_key}\n            if self.config.prepend_new:\n                self.lod.insert(0, new_record)\n            else:\n                self.lod.append(new_record)\n            self.update()\n        except Exception as ex:\n            self.handle_exception(ex)\n\n    def setup_button_row(self):\n        \"\"\"\n        set up a button row\n        \"\"\"\n        with ui.row():\n            # icons per https://fonts.google.com/icons\n            if self.config.editable:\n                ui.button(\"New\", icon=\"add\", on_click=self.new_row)\n                ui.button(\"Delete\", icon=\"delete\", on_click=self.delete_selected_rows)\n            # ui.button(\"Fit\", icon=\"arrow_range\", on_click=self.onSizeColumnsToFit)\n            ui.button(\n                \"All\",\n                icon=\"select_all\",\n                on_click=self.select_all_rows,\n            )\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.__init__","title":"<code>__init__(lod=None, config=None)</code>","text":"<p>Initialize the ListOfDictsGrid object.</p> <p>Parameters:</p> Name Type Description Default <code>lod</code> <code>Optional[List[Dict]]</code> <p>List of dictionaries to be displayed.</p> <code>None</code> <code>config(GridConfig)</code> <p>configuration for the grid behavior</p> required Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def __init__(\n    self, lod: Optional[List[Dict]] = None, config: GridConfig = None\n) -&gt; None:\n    \"\"\"\n    Initialize the ListOfDictsGrid object.\n\n    Args:\n        lod (Optional[List[Dict]]): List of dictionaries to be displayed.\n        config(GridConfig): configuration for the grid behavior\n    \"\"\"\n    self.lod = lod\n    self.config = config or GridConfig()\n    self.lod_index = {}\n    try:\n        if self.config.with_buttons:\n            self.setup_button_row()\n        # Update options to include onGridReady event handling\n        self.config.options[\n            \":onGridReady\"\n        ] = \"(params) =&gt; params.columnApi.autoSizeAllColumns()\"\n\n        self.ag_grid = ui.aggrid(\n            options=self.config.options,\n            html_columns=self.config.html_columns,\n        ).classes(self.config.classes)\n        self.ag_grid.theme = self.config.theme\n        self.auto_size_columns = self.config.auto_size_columns\n        self.setDefaultColDef()\n        if lod is not None:\n            self.load_lod(lod, self.config.column_defs)\n    except Exception as ex:\n        self.handle_exception(ex)\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.delete_selected_rows","title":"<code>delete_selected_rows(_args)</code>  <code>async</code>","text":"<p>Delete the currently selected rows based on the key column.</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>async def delete_selected_rows(self, _args):\n    \"\"\"\n    Delete the currently selected rows based on the key column.\n    \"\"\"\n    # Await the asynchronous call to get selected rows\n    selected_rows = await self.get_selected_rows()\n    if len(selected_rows) == 0:\n        ui.notify(\"no rows selected for delete\", type=\"warning\")\n        return\n    # Get the list of keys of selected rows\n    selected_keys = [row[self.config.key_col] for row in selected_rows]\n    # Notify the user about the operation\n    ui.notify(f\"deleting rows with keys {selected_keys}\")\n    # Update the data to exclude selected rows\n    self.lod[:] = [\n        row for row in self.lod if row[self.config.key_col] not in selected_keys\n    ]\n    # Update the grid to reflect changes\n    self.update()\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.get_cell_value","title":"<code>get_cell_value(key_value, col_key)</code>","text":"<p>get the value for the given cell</p> <p>Parameters:</p> Name Type Description Default <code>key_value</code> <code>Any</code> <p>The value of the key column for the row to update.</p> required <code>row_key</code> <code>str</code> <p>The column key of the cell to update.</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>the value of the cell or None if the row doesn't exist</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def get_cell_value(self, key_value: Any, col_key: str) -&gt; Any:\n    \"\"\"\n    get the value for the given cell\n\n    Args:\n        key_value (Any): The value of the key column for the row to update.\n        row_key (str): The column key of the cell to update.\n\n    Returns:\n        Any: the value of the cell or None if the row doesn't exist\n    \"\"\"\n    rows_by_key = self.get_rows_by_key()\n    row = rows_by_key.get(key_value, None)\n    value = None\n    if row:\n        value = row.get(col_key, None)\n    return value\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.get_column_def","title":"<code>get_column_def(col)</code>","text":"<p>get the column definition for the given column</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>str</code> <p>The field name of the column where checkboxes should be enabled.</p> required <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>the column definition</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def get_column_def(self, col: str) -&gt; Dict:\n    \"\"\"\n    get the column definition for the given column\n\n    Args:\n        col (str): The field name of the column where checkboxes should be enabled.\n\n    Returns:\n        Dict: the column definition\n    \"\"\"\n    if not self.ag_grid.options.get(\"columnDefs\"):\n        raise Exception(\n            \"Column definitions are not set. Load the data first using load_lod.\"\n        )\n    # Go through each column definition\n    for col_def in self.ag_grid.options[\"columnDefs\"]:\n        if col_def[\"field\"] == col:\n            return col_def\n    return None\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.get_row_data","title":"<code>get_row_data()</code>","text":"<p>get the complete row data</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def get_row_data(self):\n    \"\"\"\n    get the complete row data\n    \"\"\"\n    row_data = self.ag_grid.options[\"rowData\"]\n    return row_data\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.get_row_for_key","title":"<code>get_row_for_key(key_value)</code>","text":"<p>the the row for the given key_value</p> <p>Parameters:</p> Name Type Description Default <code>key_value</code> <code>str</code> <p>str</p> required Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def get_row_for_key(self, key_value: str):\n    \"\"\"\n    the the row for the given key_value\n\n    Args:\n        key_value: str\n    \"\"\"\n    row = self.lod_index.get(key_value, None)\n    return row\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.get_rows_by_key","title":"<code>get_rows_by_key()</code>","text":"<p>Organize rows in a dictionary of dictionaries, indexed by the key column value specified in GridConfig.</p> <p>Returns:</p> Type Description <code>Dict[Any, Dict[str, Any]]</code> <p>Dict[Any, Dict[str, Any]]: A dictionary of dictionaries, with each sub-dictionary representing a row,                        indexed by the key column values.</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def get_rows_by_key(self) -&gt; Dict[Any, Dict[str, Any]]:\n    \"\"\"\n    Organize rows in a dictionary of dictionaries, indexed by the key column value specified in GridConfig.\n\n    Returns:\n        Dict[Any, Dict[str, Any]]: A dictionary of dictionaries, with each sub-dictionary representing a row,\n                                   indexed by the key column values.\n    \"\"\"\n    data_by_key = {}\n    key_col = (\n        self.config.key_col\n    )  # Retrieve key column name from the GridConfig instance\n    for row in self.get_row_data():\n        key_value = row.get(key_col, None)\n        if key_value is not None:\n            data_by_key[key_value] = row\n    return data_by_key\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.get_selected_rows","title":"<code>get_selected_rows()</code>  <code>async</code>","text":"<p>get the currently selected rows</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>async def get_selected_rows(self):\n    \"\"\"\n    get the currently selected rows\n    \"\"\"\n    selected_rows = await self.ag_grid.get_selected_rows()\n    return selected_rows\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.handle_exception","title":"<code>handle_exception(ex)</code>","text":"<p>Handles exceptions thrown during grid initialization or operation.</p> <p>In debug mode, this method prints the stack trace and re-raises the exception for further debugging. In non-debug mode, it notifies the user of a general error.</p> <p>Parameters:</p> Name Type Description Default <code>ex</code> <code>Exception</code> <p>The exception that was caught.</p> required <p>Raises:</p> Type Description <code>Exception</code> <p>Re-raises the exception in debug mode for further debugging.</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def handle_exception(self, ex: Exception) -&gt; None:\n    \"\"\"\n    Handles exceptions thrown during grid initialization or operation.\n\n    In debug mode, this method prints the stack trace and re-raises the exception for further debugging. In non-debug mode, it notifies the user of a general error.\n\n    Args:\n        ex (Exception): The exception that was caught.\n\n    Raises:\n        Exception: Re-raises the exception in debug mode for further debugging.\n    \"\"\"\n    if self.config.debug:\n        # Print a stack trace to stderr\n        print(\"Exception caught in ListOfDictsGrid:\", file=sys.stderr)\n        traceback.print_exc()\n        # Optionally, re-raise the exception for further debugging.\n        raise ex\n    elif self.config.exception_callback:\n        self.config.exception_callback(ex)\n    else:\n        # If not in debug mode, notify the user with a general error message.\n        # Ensure that ui.notify or a similar method is available and properly configured.\n        ui.notify(\n            f\"Unhandled exception {str(ex)} occurred in ListOfDictsGrid\",\n            type=\"error\",\n        )\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.load_lod","title":"<code>load_lod(lod, columnDefs=None)</code>","text":"<p>load the given list of dicts</p> <p>Parameters:</p> Name Type Description Default <code>lod(list)</code> <p>a list of dicts to be loaded into the grid</p> required <code>columnDefs(list)</code> <p>a list of column definitions</p> required Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def load_lod(self, lod: list, columnDefs: list = None):\n    \"\"\"\n    load the given list of dicts\n\n    Args:\n        lod(list): a list of dicts to be loaded into the grid\n        columnDefs(list): a list of column definitions\n    \"\"\"\n    try:\n        if columnDefs is None:\n            # assume lod\n            columnDefs = []\n            if len(lod) &gt; 0:\n                header = lod[0]\n                for key, value in header.items():\n                    if isinstance(value, int) or isinstance(value, float):\n                        col_filter = \"agNumberColumnFilter\"\n                    elif isinstance(value, datetime.datetime) or isinstance(\n                        value, datetime.date\n                    ):\n                        col_filter = \"agDateColumnFilter\"\n                    else:\n                        col_filter = True  # Use default filter\n                    columnDefs.append(dict({\"field\": key, \"filter\": col_filter}))\n        self.ag_grid.options[\"columnDefs\"] = columnDefs\n        self.ag_grid.options[\"rowData\"] = lod\n        self.update_index(lenient=self.config.lenient)\n        if self.config.all_cols_html:\n            # Set html_columns based on all_rows_html flag\n            html_columns = list(range(len(columnDefs)))\n            self.html_columns = html_columns\n    except Exception as ex:\n        self.handle_exception(ex)\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.new_row","title":"<code>new_row(_args)</code>  <code>async</code>","text":"<p>add a new row</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>async def new_row(self, _args):\n    \"\"\"\n    add a new row\n    \"\"\"\n    try:\n        # Handle the key column\n        if (\n            self.config.key_col == \"#\"\n        ):  # If the key column is '#' treating it as an integer index\n            new_key = len(self.lod)\n        elif (\n            self.config.keygen_callback\n        ):  # If a key generation callback is provided\n            new_key = self.config.keygen_callback()\n        else:  # If the key column isn't '#' and no keygen callback is provided\n            msg = f\"Missing keygen_callback to create new key for '{self.config.key_col}' column\"\n            ui.notify(msg, type=\"negative\")\n            return\n        ui.notify(f\"new row with {self.config.key_col}={new_key}\")\n        new_record = {f\"{self.config.key_col}\": new_key}\n        if self.config.prepend_new:\n            self.lod.insert(0, new_record)\n        else:\n            self.lod.append(new_record)\n        self.update()\n    except Exception as ex:\n        self.handle_exception(ex)\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.onSizeColumnsToFit","title":"<code>onSizeColumnsToFit(_msg)</code>  <code>async</code>","text":"<p>see https://www.reddit.com/r/nicegui/comments/17cg0o5/aggrid_autosize_columns_to_data_width/</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>async def onSizeColumnsToFit(self, _msg: dict):\n    \"\"\"\n    see https://www.reddit.com/r/nicegui/comments/17cg0o5/aggrid_autosize_columns_to_data_width/\n    \"\"\"\n    # await asyncio.sleep(0.2)\n    self.sizeColumnsToFit()\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.select_all_rows","title":"<code>select_all_rows()</code>","text":"<p>select all my ag_grid rows</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def select_all_rows(self):\n    \"\"\"\n    select all my ag_grid rows\n    \"\"\"\n    self.ag_grid.run_grid_method(\"selectAll\")\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.setDefaultColDef","title":"<code>setDefaultColDef()</code>","text":"<p>set the default column definitions</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def setDefaultColDef(self):\n    \"\"\"\n    set the default column definitions\n    \"\"\"\n    if not \"defaultColDef\" in self.ag_grid.options:\n        self.ag_grid.options[\"defaultColDef\"] = {}\n    if self.config.multiselect:\n        # Apply settings for multiple row selection\n        self.ag_grid.options[\"rowSelection\"] = \"multiple\"\n    defaultColDef = self.ag_grid.options[\"defaultColDef\"]\n    defaultColDef[\"resizable\"] = self.config.resizable\n    defaultColDef[\"sortable\"] = self.config.sortable\n    # https://www.ag-grid.com/javascript-data-grid/grid-size/\n    defaultColDef[\"wrapText\"] = self.config.wrapText\n    defaultColDef[\"autoHeight\"] = self.config.autoHeight\n    defaultColDef[\"editable\"] = self.config.editable\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.set_checkbox_renderer","title":"<code>set_checkbox_renderer(checkbox_col)</code>","text":"<p>set cellRenderer to checkBoxRenderer for the given column</p> <p>Parameters:</p> Name Type Description Default <code>checkbox_col</code> <code>str</code> <p>The field name of the column where</p> required Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def set_checkbox_renderer(self, checkbox_col: str):\n    \"\"\"\n    set cellRenderer to checkBoxRenderer for the given column\n\n    Args:\n        checkbox_col (str): The field name of the column where\n        rendering as checkboxes should be enabled.\n\n    \"\"\"\n    col_def = self.get_column_def(checkbox_col)\n    col_def[\"cellRenderer\"] = \"checkboxRenderer\"\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.set_checkbox_selection","title":"<code>set_checkbox_selection(checkbox_col)</code>","text":"<p>Set the checkbox selection for a specified column.</p> <p>Parameters:</p> Name Type Description Default <code>checkbox_col</code> <code>str</code> <p>The field name of the column where checkboxes should be enabled.</p> required Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def set_checkbox_selection(self, checkbox_col: str):\n    \"\"\"\n    Set the checkbox selection for a specified column.\n\n    Args:\n        checkbox_col (str): The field name of the column where checkboxes should be enabled.\n    \"\"\"\n    col_def = self.get_column_def(checkbox_col)\n    if col_def:\n        col_def[\"checkboxSelection\"] = True\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.set_column_def","title":"<code>set_column_def(col, key, value)</code>","text":"<p>Set a value in a column definition dictionary for a specified column.</p> <p>This method updates the column definition dictionary for a given column by setting a specific key to a provided value. If the column definition exists, the key-value pair is updated; if not, no changes are made.</p> <p>Parameters:</p> Name Type Description Default <code>col</code> <code>str</code> <p>The name of the column to update.</p> required <code>key</code> <code>str</code> <p>The key in the column definition dictionary to set.</p> required <code>value</code> <code>Any</code> <p>The value to assign to the key in the dictionary.</p> required <p>Returns:</p> Name Type Description <code>Dict</code> <code>Dict</code> <p>The updated column definition dictionary, or None if the column does not exist.</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def set_column_def(self, col: str, key: str, value: Any) -&gt; Dict:\n    \"\"\"\n    Set a value in a column definition dictionary for a specified column.\n\n    This method updates the column definition dictionary for a given column by\n    setting a specific key to a provided value. If the column definition exists,\n    the key-value pair is updated; if not, no changes are made.\n\n    Parameters:\n        col (str): The name of the column to update.\n        key (str): The key in the column definition dictionary to set.\n        value (Any): The value to assign to the key in the dictionary.\n\n    Returns:\n        Dict: The updated column definition dictionary, or None if the column does not exist.\n    \"\"\"\n    col_def = self.get_column_def(\n        col\n    )  # Assuming get_column_def is defined elsewhere.\n    if col_def:\n        col_def[key] = value\n    return col_def\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.setup_button_row","title":"<code>setup_button_row()</code>","text":"<p>set up a button row</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def setup_button_row(self):\n    \"\"\"\n    set up a button row\n    \"\"\"\n    with ui.row():\n        # icons per https://fonts.google.com/icons\n        if self.config.editable:\n            ui.button(\"New\", icon=\"add\", on_click=self.new_row)\n            ui.button(\"Delete\", icon=\"delete\", on_click=self.delete_selected_rows)\n        # ui.button(\"Fit\", icon=\"arrow_range\", on_click=self.onSizeColumnsToFit)\n        ui.button(\n            \"All\",\n            icon=\"select_all\",\n            on_click=self.select_all_rows,\n        )\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.update","title":"<code>update()</code>","text":"<p>update my aggrid</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def update(self):\n    \"\"\"\n    update my aggrid\n    \"\"\"\n    if self.ag_grid:\n        self.ag_grid.update()\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.update_cell","title":"<code>update_cell(key_value, col_key, value)</code>","text":"<p>Update a cell in the grid.</p> <p>Parameters:</p> Name Type Description Default <code>key_value</code> <code>Any</code> <p>The value of the key column for the row to update.</p> required <code>row_key</code> <code>str</code> <p>The column key of the cell to update.</p> required <code>value</code> <code>Any</code> <p>The new value for the specified cell.</p> required Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def update_cell(self, key_value: Any, col_key: str, value: Any) -&gt; None:\n    \"\"\"\n    Update a cell in the grid.\n\n    Args:\n        key_value (Any): The value of the key column for the row to update.\n        row_key (str): The column key of the cell to update.\n        value (Any): The new value for the specified cell.\n\n    \"\"\"\n    rows_by_key = self.get_rows_by_key()\n    row = rows_by_key.get(key_value, None)\n    if row:\n        row[col_key] = value\n</code></pre>"},{"location":"#ngwidgets.lod_grid.ListOfDictsGrid.update_index","title":"<code>update_index(lenient=False)</code>","text":"<p>update the index based on the given key column</p> Source code in <code>ngwidgets/lod_grid.py</code> <pre><code>def update_index(self, lenient: bool = False):\n    \"\"\"\n    update the index based on the given key column\n    \"\"\"\n    self.lod_index = {}\n    if self.lod:\n        for row_index, row in enumerate(self.lod):\n            if self.config.key_col in row:\n                key_value = row[self.config.key_col]\n                self.lod_index[key_value] = row\n            else:\n                msg = f\"missing key column {self.config.key_col} in row {row_index}\"\n                if not lenient:\n                    raise Exception(msg)\n                else:\n                    print(msg, file=sys.stderr)\n                # missing key\n                pass\n</code></pre>"},{"location":"#ngwidgets.log_view","title":"<code>log_view</code>","text":"<p>Created on 2023-11-15</p> <p>@author: wf</p>"},{"location":"#ngwidgets.log_view.LogElementHandler","title":"<code>LogElementHandler</code>","text":"<p>               Bases: <code>Handler</code></p> <p>A logging handler that emits messages to a log element.</p> Source code in <code>ngwidgets/log_view.py</code> <pre><code>class LogElementHandler(logging.Handler):\n    \"\"\"A logging handler that emits messages to a log element.\"\"\"\n\n    def __init__(self, element: ui.log, level: int = logging.NOTSET) -&gt; None:\n        self.element = element\n        super().__init__(level)\n\n    def emit(self, record: logging.LogRecord) -&gt; None:\n        try:\n            msg = self.format(record)\n            self.element.push(msg)\n        except (KeyboardInterrupt, SystemExit):\n            raise\n        except Exception:\n            self.handleError(record)\n</code></pre>"},{"location":"#ngwidgets.login","title":"<code>login</code>","text":"<p>Created on 2023-10-31</p> <p>@author: wf</p>"},{"location":"#ngwidgets.login.Login","title":"<code>Login</code>","text":"<p>               Bases: <code>object</code></p> <p>nicegui login support</p> Source code in <code>ngwidgets/login.py</code> <pre><code>class Login(object):\n    \"\"\"\n    nicegui login support\n    \"\"\"\n\n    def __init__(self, webserver, users):\n        \"\"\"\n        Constructor\n        \"\"\"\n        self.webserver = webserver\n        self.users = users\n\n    def authenticated(self) -&gt; bool:\n        \"\"\"\n        check whether the current user is authenticated\n        \"\"\"\n        result = app.storage.user.get(\"authenticated\", False)\n        return result\n\n    async def logout(self):\n        \"\"\"\n        logout\n        \"\"\"\n        app.storage.user.update({\"username\": None, \"authenticated\": False})\n\n    def get_username(self) -&gt; str:\n        \"\"\"\n        Get the username of the currently logged-in user\n        \"\"\"\n        return app.storage.user.get(\"username\", \"?\")\n\n    async def login(self, solution):\n        \"\"\"\n        login\n        \"\"\"\n        # this might not work if there as already been HTML output\n        if self.authenticated():\n            return RedirectResponse(\"/\")\n\n        await solution.setup_content_div(self.show_login)\n\n    async def show_login(self):\n        \"\"\"\n        show the login view\n        \"\"\"\n\n        def try_login() -&gt; None:  # local function to avoid passing username and password as arguments\n            if self.users.check_password(username.value, password.value):\n                app.storage.user.update(\n                    {\"username\": username.value, \"authenticated\": True}\n                )\n                ui.open(\"/\")\n            else:\n                ui.notify(\"Wrong username or password\", color=\"negative\")\n\n        with ui.card().classes(\"absolute-center\"):\n            username = ui.input(\"Username\").on(\"keydown.enter\", try_login)\n            password = ui.input(\n                \"Password\", password=True, password_toggle_button=True\n            ).on(\"keydown.enter\", try_login)\n            ui.button(\"Log in\", on_click=try_login)\n</code></pre>"},{"location":"#ngwidgets.login.Login.__init__","title":"<code>__init__(webserver, users)</code>","text":"<p>Constructor</p> Source code in <code>ngwidgets/login.py</code> <pre><code>def __init__(self, webserver, users):\n    \"\"\"\n    Constructor\n    \"\"\"\n    self.webserver = webserver\n    self.users = users\n</code></pre>"},{"location":"#ngwidgets.login.Login.authenticated","title":"<code>authenticated()</code>","text":"<p>check whether the current user is authenticated</p> Source code in <code>ngwidgets/login.py</code> <pre><code>def authenticated(self) -&gt; bool:\n    \"\"\"\n    check whether the current user is authenticated\n    \"\"\"\n    result = app.storage.user.get(\"authenticated\", False)\n    return result\n</code></pre>"},{"location":"#ngwidgets.login.Login.get_username","title":"<code>get_username()</code>","text":"<p>Get the username of the currently logged-in user</p> Source code in <code>ngwidgets/login.py</code> <pre><code>def get_username(self) -&gt; str:\n    \"\"\"\n    Get the username of the currently logged-in user\n    \"\"\"\n    return app.storage.user.get(\"username\", \"?\")\n</code></pre>"},{"location":"#ngwidgets.login.Login.login","title":"<code>login(solution)</code>  <code>async</code>","text":"<p>login</p> Source code in <code>ngwidgets/login.py</code> <pre><code>async def login(self, solution):\n    \"\"\"\n    login\n    \"\"\"\n    # this might not work if there as already been HTML output\n    if self.authenticated():\n        return RedirectResponse(\"/\")\n\n    await solution.setup_content_div(self.show_login)\n</code></pre>"},{"location":"#ngwidgets.login.Login.logout","title":"<code>logout()</code>  <code>async</code>","text":"<p>logout</p> Source code in <code>ngwidgets/login.py</code> <pre><code>async def logout(self):\n    \"\"\"\n    logout\n    \"\"\"\n    app.storage.user.update({\"username\": None, \"authenticated\": False})\n</code></pre>"},{"location":"#ngwidgets.login.Login.show_login","title":"<code>show_login()</code>  <code>async</code>","text":"<p>show the login view</p> Source code in <code>ngwidgets/login.py</code> <pre><code>async def show_login(self):\n    \"\"\"\n    show the login view\n    \"\"\"\n\n    def try_login() -&gt; None:  # local function to avoid passing username and password as arguments\n        if self.users.check_password(username.value, password.value):\n            app.storage.user.update(\n                {\"username\": username.value, \"authenticated\": True}\n            )\n            ui.open(\"/\")\n        else:\n            ui.notify(\"Wrong username or password\", color=\"negative\")\n\n    with ui.card().classes(\"absolute-center\"):\n        username = ui.input(\"Username\").on(\"keydown.enter\", try_login)\n        password = ui.input(\n            \"Password\", password=True, password_toggle_button=True\n        ).on(\"keydown.enter\", try_login)\n        ui.button(\"Log in\", on_click=try_login)\n</code></pre>"},{"location":"#ngwidgets.markup_header","title":"<code>markup_header</code>","text":"<p>Created on 2023-11-19</p> <p>@author: wf</p>"},{"location":"#ngwidgets.markup_header.MarkupHeader","title":"<code>MarkupHeader</code>","text":"<p>Helper to generate tabulate compatible markup header lines.</p> Source code in <code>ngwidgets/markup_header.py</code> <pre><code>class MarkupHeader:\n    \"\"\"\n    Helper to generate tabulate compatible markup header lines.\n    \"\"\"\n\n    @classmethod\n    def get_markup(cls, title: str, markup_format: str, level: int = 1) -&gt; str:\n        \"\"\"\n        Generates a formatted header string based on the specified markup format.\n\n        Args:\n            title (str): The title to be formatted as the header.\n            markup_format (str): The markup format for the header.\n            level (int): The section level to generate a header for.\n\n        Returns:\n            str: The formatted header string.\n        \"\"\"\n        if markup_format == \"github\":\n            return f\"{'#' * level} {title}\\n\"\n        elif markup_format == \"mediawiki\":\n            return f\"{'=' * level} {title} {'=' * level}\\n\"\n        elif markup_format == \"html\" or markup_format == \"unsafehtml\":\n            return f\"&lt;h{level}&gt;{title}&lt;/h{level}&gt;\"\n        elif markup_format == \"latex\":\n            if level == 1:\n                return f\"\\\\section{{{title}}}\"\n            elif level == 2:\n                return f\"\\\\subsection{{{title}}}\"\n            elif level == 3:\n                return f\"\\\\subsubsection{{{title}}}\"\n        elif markup_format == \"textile\":\n            return f\"h{level}. {title}\"\n        elif markup_format == \"plain\":\n            return title\n        else:\n            # Default case for other formats\n            return title\n</code></pre>"},{"location":"#ngwidgets.markup_header.MarkupHeader.get_markup","title":"<code>get_markup(title, markup_format, level=1)</code>  <code>classmethod</code>","text":"<p>Generates a formatted header string based on the specified markup format.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title to be formatted as the header.</p> required <code>markup_format</code> <code>str</code> <p>The markup format for the header.</p> required <code>level</code> <code>int</code> <p>The section level to generate a header for.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The formatted header string.</p> Source code in <code>ngwidgets/markup_header.py</code> <pre><code>@classmethod\ndef get_markup(cls, title: str, markup_format: str, level: int = 1) -&gt; str:\n    \"\"\"\n    Generates a formatted header string based on the specified markup format.\n\n    Args:\n        title (str): The title to be formatted as the header.\n        markup_format (str): The markup format for the header.\n        level (int): The section level to generate a header for.\n\n    Returns:\n        str: The formatted header string.\n    \"\"\"\n    if markup_format == \"github\":\n        return f\"{'#' * level} {title}\\n\"\n    elif markup_format == \"mediawiki\":\n        return f\"{'=' * level} {title} {'=' * level}\\n\"\n    elif markup_format == \"html\" or markup_format == \"unsafehtml\":\n        return f\"&lt;h{level}&gt;{title}&lt;/h{level}&gt;\"\n    elif markup_format == \"latex\":\n        if level == 1:\n            return f\"\\\\section{{{title}}}\"\n        elif level == 2:\n            return f\"\\\\subsection{{{title}}}\"\n        elif level == 3:\n            return f\"\\\\subsubsection{{{title}}}\"\n    elif markup_format == \"textile\":\n        return f\"h{level}. {title}\"\n    elif markup_format == \"plain\":\n        return title\n    else:\n        # Default case for other formats\n        return title\n</code></pre>"},{"location":"#ngwidgets.ngwidgets_cmd","title":"<code>ngwidgets_cmd</code>","text":"<p>Created on 2023-09-10</p> <p>@author: wf</p>"},{"location":"#ngwidgets.ngwidgets_cmd.NiceguiWidgetsCmd","title":"<code>NiceguiWidgetsCmd</code>","text":"<p>               Bases: <code>WebserverCmd</code></p> <p>command line handling for ngwidgets</p> Source code in <code>ngwidgets/ngwidgets_cmd.py</code> <pre><code>class NiceguiWidgetsCmd(WebserverCmd):\n    \"\"\"\n    command line handling for ngwidgets\n    \"\"\"\n</code></pre>"},{"location":"#ngwidgets.ngwidgets_cmd.main","title":"<code>main(argv=None)</code>","text":"<p>main call</p> Source code in <code>ngwidgets/ngwidgets_cmd.py</code> <pre><code>def main(argv: list = None):\n    \"\"\"\n    main call\n    \"\"\"\n    cmd = NiceguiWidgetsCmd(\n        config=NiceGuiWidgetsDemoWebserver.get_config(),\n        webserver_cls=NiceGuiWidgetsDemoWebserver,\n    )\n    exit_code = cmd.cmd_main(argv)\n    return exit_code\n</code></pre>"},{"location":"#ngwidgets.orjson_response","title":"<code>orjson_response</code>","text":"<p>Created on 2023-11-19</p> <p>@author: wf</p>"},{"location":"#ngwidgets.orjson_response.ORJSONResponse","title":"<code>ORJSONResponse</code>","text":"<p>               Bases: <code>JSONResponse</code></p> <p>A FastAPI response class that uses orjson for JSON serialization.</p> Source code in <code>ngwidgets/orjson_response.py</code> <pre><code>class ORJSONResponse(JSONResponse):\n    \"\"\"\n    A FastAPI response class that uses orjson for JSON serialization.\n    \"\"\"\n\n    media_type = \"application/json\"\n\n    def render(self, content: Any) -&gt; bytes:\n        \"\"\"\n        Override the render method to use orjson for serialization.\n        \"\"\"\n        return orjson.dumps(content)\n</code></pre>"},{"location":"#ngwidgets.orjson_response.ORJSONResponse.render","title":"<code>render(content)</code>","text":"<p>Override the render method to use orjson for serialization.</p> Source code in <code>ngwidgets/orjson_response.py</code> <pre><code>def render(self, content: Any) -&gt; bytes:\n    \"\"\"\n    Override the render method to use orjson for serialization.\n    \"\"\"\n    return orjson.dumps(content)\n</code></pre>"},{"location":"#ngwidgets.pdfviewer","title":"<code>pdfviewer</code>","text":"<p>Created on 2023-09-17</p> <p>@author: wf</p>"},{"location":"#ngwidgets.pdfviewer.pdfjs_urls","title":"<code>pdfjs_urls</code>  <code>dataclass</code>","text":"<p>see https://mozilla.github.io/pdf.js/getting_started/#download</p> <p>setup the content delivery network urls</p> Source code in <code>ngwidgets/pdfviewer.py</code> <pre><code>@dataclass\nclass pdfjs_urls:\n    \"\"\"\n    see https://mozilla.github.io/pdf.js/getting_started/#download\n\n    setup the content delivery network urls\n    \"\"\"\n\n    cdn: str = \"jsdelivr\"\n    version: str = \"3.10.111\"\n    debug: bool = False\n    url = {}\n\n    def configure(self):\n        \"\"\" \"\"\"\n        version = self.version\n        dot_min = \"\" if self.debug else \".min\"\n        # where to find library, css and\n        l = \"build/\"\n        c = \"web/\"\n        v = l\n        js = \"pdf\"\n        if self.cdn == \"github\":\n            self.base_url = \"https://raw.githubusercontent.com/mozilla/pdf.js/master\"\n            l = c\n            v = c\n            # no minimized version available\n            dot_min = \"\"\n            js = \"pdfjs\"\n        elif self.cdn == \"cdnjs\":\n            self.base_url = f\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/{version}\"\n            c = \"\"\n            v = \"\"\n            l = \"\"\n        elif self.cdn == \"jsdelivr\":\n            self.base_url = f\"https://cdn.jsdelivr.net/npm/pdfjs-dist@{version}\"\n            v = c\n        elif self.cdn == \"unpkg\":\n            # no minimized version available\n            dot_min = \"\"\n            v = c\n            self.base_url = f\"https://unpkg.com/pdfjs-dist@{version}\"\n        else:\n            raise ValueError(f\"unknown cdn {self.cdn}\")\n        css = f\"pdf_viewer{dot_min}.css\"\n        lib = f\"{js}{dot_min}.js\"\n        viewer = f\"pdf_viewer{dot_min}.js\"\n        self.url[\"css\"] = f\"{self.base_url}/{c}{css}\"\n        self.url[\"js_lib\"] = f\"{self.base_url}/{l}{lib}\"\n        self.url[\"js_viewer\"] = f\"{self.base_url}/{v}{viewer}\"\n</code></pre>"},{"location":"#ngwidgets.pdfviewer.pdfjs_urls.configure","title":"<code>configure()</code>","text":"Source code in <code>ngwidgets/pdfviewer.py</code> <pre><code>def configure(self):\n    \"\"\" \"\"\"\n    version = self.version\n    dot_min = \"\" if self.debug else \".min\"\n    # where to find library, css and\n    l = \"build/\"\n    c = \"web/\"\n    v = l\n    js = \"pdf\"\n    if self.cdn == \"github\":\n        self.base_url = \"https://raw.githubusercontent.com/mozilla/pdf.js/master\"\n        l = c\n        v = c\n        # no minimized version available\n        dot_min = \"\"\n        js = \"pdfjs\"\n    elif self.cdn == \"cdnjs\":\n        self.base_url = f\"https://cdnjs.cloudflare.com/ajax/libs/pdf.js/{version}\"\n        c = \"\"\n        v = \"\"\n        l = \"\"\n    elif self.cdn == \"jsdelivr\":\n        self.base_url = f\"https://cdn.jsdelivr.net/npm/pdfjs-dist@{version}\"\n        v = c\n    elif self.cdn == \"unpkg\":\n        # no minimized version available\n        dot_min = \"\"\n        v = c\n        self.base_url = f\"https://unpkg.com/pdfjs-dist@{version}\"\n    else:\n        raise ValueError(f\"unknown cdn {self.cdn}\")\n    css = f\"pdf_viewer{dot_min}.css\"\n    lib = f\"{js}{dot_min}.js\"\n    viewer = f\"pdf_viewer{dot_min}.js\"\n    self.url[\"css\"] = f\"{self.base_url}/{c}{css}\"\n    self.url[\"js_lib\"] = f\"{self.base_url}/{l}{lib}\"\n    self.url[\"js_viewer\"] = f\"{self.base_url}/{v}{viewer}\"\n</code></pre>"},{"location":"#ngwidgets.pdfviewer.pdfviewer","title":"<code>pdfviewer</code>","text":"<p>               Bases: <code>element</code></p> <p>nicegui PDF.js integration</p> <p>see https://mozilla.github.io/pdf.js/</p> Source code in <code>ngwidgets/pdfviewer.py</code> <pre><code>class pdfviewer(ui.element, component=\"pdfviewer.js\"):\n    \"\"\"\n    nicegui PDF.js integration\n\n    see https://mozilla.github.io/pdf.js/\n    \"\"\"\n\n    def __init__(\n        self, version: str = \"3.11.174\", cdn=\"cdnjs\", debug: bool = False\n    ) -&gt; None:\n        \"\"\"\n        constructor\n        \"\"\"\n        super().__init__()\n\n        self.version = version\n        self.debug = debug\n        self.urls = pdfjs_urls(cdn, version, debug)\n        self.urls.configure()\n\n        ui.add_head_html(f\"\"\"&lt;link href=\"{self.urls.url['css']}\" rel=\"stylesheet\"/&gt;\"\"\")\n        ui.add_head_html(f\"\"\"&lt;script src=\"{self.urls.url['js_lib']}\"&gt;&lt;/script&gt;\"\"\")\n        ui.add_head_html(f\"\"\"&lt;script src=\"{self.urls.url['js_viewer']}\"&gt;&lt;/script&gt;\"\"\")\n        viewer_container_style = \"\"\"&lt;style&gt;\n  .pdfViewerContainer {\n    overflow: auto;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n&lt;/style&gt;\"\"\"\n        ui.add_head_html(viewer_container_style)\n\n    def load_pdf(self, pdf_url: str) -&gt; None:\n        self.run_method(\"load_pdf\", pdf_url)\n\n    def set_page(self, page_number: int) -&gt; None:\n        self.run_method(\"set_page\", page_number)\n</code></pre>"},{"location":"#ngwidgets.pdfviewer.pdfviewer.__init__","title":"<code>__init__(version='3.11.174', cdn='cdnjs', debug=False)</code>","text":"<p>constructor</p> Source code in <code>ngwidgets/pdfviewer.py</code> <pre><code>    def __init__(\n        self, version: str = \"3.11.174\", cdn=\"cdnjs\", debug: bool = False\n    ) -&gt; None:\n        \"\"\"\n        constructor\n        \"\"\"\n        super().__init__()\n\n        self.version = version\n        self.debug = debug\n        self.urls = pdfjs_urls(cdn, version, debug)\n        self.urls.configure()\n\n        ui.add_head_html(f\"\"\"&lt;link href=\"{self.urls.url['css']}\" rel=\"stylesheet\"/&gt;\"\"\")\n        ui.add_head_html(f\"\"\"&lt;script src=\"{self.urls.url['js_lib']}\"&gt;&lt;/script&gt;\"\"\")\n        ui.add_head_html(f\"\"\"&lt;script src=\"{self.urls.url['js_viewer']}\"&gt;&lt;/script&gt;\"\"\")\n        viewer_container_style = \"\"\"&lt;style&gt;\n  .pdfViewerContainer {\n    overflow: auto;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n  }\n&lt;/style&gt;\"\"\"\n        ui.add_head_html(viewer_container_style)\n</code></pre>"},{"location":"#ngwidgets.profiler","title":"<code>profiler</code>","text":"<p>Created on 2022-11-18</p> <p>@author: wf</p>"},{"location":"#ngwidgets.profiler.Profiler","title":"<code>Profiler</code>","text":"<p>simple profiler</p> Source code in <code>ngwidgets/profiler.py</code> <pre><code>class Profiler:\n    \"\"\"\n    simple profiler\n    \"\"\"\n\n    def __init__(self, msg, profile=True, with_start: bool = True):\n        \"\"\"\n        construct me with the given msg and profile active flag\n\n        Args:\n            msg(str): the message to show if profiling is active\n            profile(bool): True if messages should be shown\n        \"\"\"\n        self.msg = msg\n        self.profile = profile\n        if with_start:\n            self.start()\n\n    def start(self):\n        \"\"\"\n        start profiling\n        \"\"\"\n        self.starttime = time.time()\n        if self.profile:\n            print(f\"Starting {self.msg} ...\")\n\n    def time(self, extraMsg=\"\"):\n        \"\"\"\n        time the action and print if profile is active\n        \"\"\"\n        elapsed = time.time() - self.starttime\n        if self.profile:\n            print(f\"{self.msg}{extraMsg} took {elapsed:5.1f} s\")\n        return elapsed\n</code></pre>"},{"location":"#ngwidgets.profiler.Profiler.__init__","title":"<code>__init__(msg, profile=True, with_start=True)</code>","text":"<p>construct me with the given msg and profile active flag</p> <p>Parameters:</p> Name Type Description Default <code>msg(str)</code> <p>the message to show if profiling is active</p> required <code>profile(bool)</code> <p>True if messages should be shown</p> required Source code in <code>ngwidgets/profiler.py</code> <pre><code>def __init__(self, msg, profile=True, with_start: bool = True):\n    \"\"\"\n    construct me with the given msg and profile active flag\n\n    Args:\n        msg(str): the message to show if profiling is active\n        profile(bool): True if messages should be shown\n    \"\"\"\n    self.msg = msg\n    self.profile = profile\n    if with_start:\n        self.start()\n</code></pre>"},{"location":"#ngwidgets.profiler.Profiler.start","title":"<code>start()</code>","text":"<p>start profiling</p> Source code in <code>ngwidgets/profiler.py</code> <pre><code>def start(self):\n    \"\"\"\n    start profiling\n    \"\"\"\n    self.starttime = time.time()\n    if self.profile:\n        print(f\"Starting {self.msg} ...\")\n</code></pre>"},{"location":"#ngwidgets.profiler.Profiler.time","title":"<code>time(extraMsg='')</code>","text":"<p>time the action and print if profile is active</p> Source code in <code>ngwidgets/profiler.py</code> <pre><code>def time(self, extraMsg=\"\"):\n    \"\"\"\n    time the action and print if profile is active\n    \"\"\"\n    elapsed = time.time() - self.starttime\n    if self.profile:\n        print(f\"{self.msg}{extraMsg} took {elapsed:5.1f} s\")\n    return elapsed\n</code></pre>"},{"location":"#ngwidgets.progress","title":"<code>progress</code>","text":""},{"location":"#ngwidgets.progress.NiceguiProgressbar","title":"<code>NiceguiProgressbar</code>","text":"<p>               Bases: <code>Progressbar</code></p> <p>Nicegui progress bar wrapper.</p> Source code in <code>ngwidgets/progress.py</code> <pre><code>class NiceguiProgressbar(Progressbar):\n    \"\"\"\n    Nicegui progress bar wrapper.\n    \"\"\"\n\n    def __init__(self, total, desc: str, unit: str, label_color=\"#8D92C4 \"):\n        \"\"\"\n        Initialize the NiceguiProgressbar instance.\n\n        Args:\n            total (int): The total value (maximum) of the progress bar.\n            desc (str): A short description of the task for which the progress is being shown.\n            unit (str): The unit of measurement for the progress (e.g., 'step', 'item').\n            label_color(str): the color to use for the label\n        The progress bar is initially set to invisible and its value to 0.\n        \"\"\"\n        super().__init__(total, 0, desc, unit)\n        self.progress = ui.linear_progress(\n            value=0, size=\"20px\", show_value=False\n        ).props(\"instant-feedback\")\n        # Set the label color based on the provided color schema\n        self.label_style = f\"color: {label_color};\"\n\n        with self.progress:\n            self.label = (\n                ui.label().classes(\"text-lg absolute-center\").style(self.label_style)\n            )\n            self.label.bind_text_from(\n                self, \"value\", backward=lambda v: f\"{self.desc} {v}/{self.total}\"\n            )\n        self.progress.visible = False\n\n    def reset(self):\n        \"\"\"\n        reset\n        \"\"\"\n        self.value = 0\n        self.progress.value = 0\n\n    def set_description(self, desc: str):\n        \"\"\"\n        set my description\n        \"\"\"\n        self.desc = desc\n        self.progress.visible = True\n\n    def update_value(self, new_value):\n        self.value = new_value\n        self.progress.visible = True\n        percent = round(self.value / self.total, 2)\n        self.progress.value = percent\n\n    def update(self, step):\n        self.update_value(self.value + step)\n</code></pre>"},{"location":"#ngwidgets.progress.NiceguiProgressbar.__init__","title":"<code>__init__(total, desc, unit, label_color='#8D92C4 ')</code>","text":"<p>Initialize the NiceguiProgressbar instance.</p> <p>Parameters:</p> Name Type Description Default <code>total</code> <code>int</code> <p>The total value (maximum) of the progress bar.</p> required <code>desc</code> <code>str</code> <p>A short description of the task for which the progress is being shown.</p> required <code>unit</code> <code>str</code> <p>The unit of measurement for the progress (e.g., 'step', 'item').</p> required <code>label_color(str)</code> <p>the color to use for the label</p> required <p>The progress bar is initially set to invisible and its value to 0.</p> Source code in <code>ngwidgets/progress.py</code> <pre><code>def __init__(self, total, desc: str, unit: str, label_color=\"#8D92C4 \"):\n    \"\"\"\n    Initialize the NiceguiProgressbar instance.\n\n    Args:\n        total (int): The total value (maximum) of the progress bar.\n        desc (str): A short description of the task for which the progress is being shown.\n        unit (str): The unit of measurement for the progress (e.g., 'step', 'item').\n        label_color(str): the color to use for the label\n    The progress bar is initially set to invisible and its value to 0.\n    \"\"\"\n    super().__init__(total, 0, desc, unit)\n    self.progress = ui.linear_progress(\n        value=0, size=\"20px\", show_value=False\n    ).props(\"instant-feedback\")\n    # Set the label color based on the provided color schema\n    self.label_style = f\"color: {label_color};\"\n\n    with self.progress:\n        self.label = (\n            ui.label().classes(\"text-lg absolute-center\").style(self.label_style)\n        )\n        self.label.bind_text_from(\n            self, \"value\", backward=lambda v: f\"{self.desc} {v}/{self.total}\"\n        )\n    self.progress.visible = False\n</code></pre>"},{"location":"#ngwidgets.progress.NiceguiProgressbar.reset","title":"<code>reset()</code>","text":"<p>reset</p> Source code in <code>ngwidgets/progress.py</code> <pre><code>def reset(self):\n    \"\"\"\n    reset\n    \"\"\"\n    self.value = 0\n    self.progress.value = 0\n</code></pre>"},{"location":"#ngwidgets.progress.NiceguiProgressbar.set_description","title":"<code>set_description(desc)</code>","text":"<p>set my description</p> Source code in <code>ngwidgets/progress.py</code> <pre><code>def set_description(self, desc: str):\n    \"\"\"\n    set my description\n    \"\"\"\n    self.desc = desc\n    self.progress.visible = True\n</code></pre>"},{"location":"#ngwidgets.progress.Progressbar","title":"<code>Progressbar</code>  <code>dataclass</code>","text":"<p>Generic progress bar</p> Source code in <code>ngwidgets/progress.py</code> <pre><code>@dataclass\nclass Progressbar:\n    \"\"\"\n    Generic progress bar\n    \"\"\"\n\n    _total: int\n    value: int\n    desc: str\n    unit: str\n\n    @property\n    def total(self) -&gt; int:\n        return self._total\n\n    @total.setter\n    def total(self, total: int):\n        self._total = total\n        self.update_total()\n\n    def update_total(self):\n        \"\"\"\n        Update the total value in the progress bar.\n        \"\"\"\n        pass\n</code></pre>"},{"location":"#ngwidgets.progress.Progressbar.update_total","title":"<code>update_total()</code>","text":"<p>Update the total value in the progress bar.</p> Source code in <code>ngwidgets/progress.py</code> <pre><code>def update_total(self):\n    \"\"\"\n    Update the total value in the progress bar.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"#ngwidgets.progress.TqdmProgressbar","title":"<code>TqdmProgressbar</code>","text":"<p>               Bases: <code>Progressbar</code></p> <p>Tqdm progress bar wrapper.</p> Source code in <code>ngwidgets/progress.py</code> <pre><code>class TqdmProgressbar(Progressbar):\n    \"\"\"\n    Tqdm progress bar wrapper.\n    \"\"\"\n\n    def __init__(self, total, desc, unit):\n        super().__init__(total, 0, desc, unit)\n        self.reset()\n\n    def reset(self):\n        self.progress = tqdm(total=self.total, desc=self.desc, unit=self.unit)\n        self.value = 0\n\n    def set_description(self, desc: str):\n        self.progress.set_description(desc)\n\n    def update(self, step):\n        self.update_value(self.value + step)\n\n    def update_value(self, new_value):\n        increment = new_value - self.value\n        self.value = new_value\n        self.progress.update(increment)\n\n    def update_total(self):\n        self.progress.total = self.total\n        self.progress.refresh()\n</code></pre>"},{"location":"#ngwidgets.projects","title":"<code>projects</code>","text":"<p>Created on 2023-12-14</p> <p>This module, developed as part of the ngwidgets package under the instruction of WF, provides  classes and methods for interacting with the Python Package Index (PyPI). It includes the  <code>Project</code> data class for representing software projects and the <code>PyPi</code> class for searching  and retrieving package information from PyPI. The code facilitates the creation of tools and  applications that interact with PyPI for information about Python packages.</p> <p>Prompts for LLM:  - Create Python classes Project and Projects (holding a list of Project elements) for interacting with PyPI and github, including search functionality. - Develop a data class in Python to represent a software project with the attributes.         name (str): The name of the project.         package (str): The package name on PyPI.         demo (str): A URL to a demo of the project, if available.         forum_post (str): A URL to a forum post discussing the project.         github (str): A URL to the GitHub repository of the project.         pypi (str): A URL to the PyPI page of the project.         image_url (str): A URL to an image representing the project.         stars (int): Number of stars on GitHub.         github_description (str): Description of the project from GitHub.         pypi_description (str): Description of the project from PyPI.         avatar (str): A URL to the avatar image of the author/maintainer.         search_text (str): Text used for searching the project.         github_author (str): The GitHub username of the project's author.         pypi_author (str): The PyPI username of the project's author.         created_at (datetime): The date when the project was created.         downloads (int): Number of downloads from PyPI.         categories (List[str]): Categories associated with the project.         version (str): The current version of the project on PyPI.</p> <ul> <li>Implement methods to search PyPI and github for packages/repos that represent projects and retrieve detailed package information on a given topic.</li> <li>allow saving and loading the collected projects</li> </ul> <p>Main author: OpenAI's language model (instructed by WF)</p>"},{"location":"#ngwidgets.projects.GitHubAccess","title":"<code>GitHubAccess</code>","text":"<p>A class to handle GitHub API access.</p> <p>This class provides functionalities to access the GitHub API, either with authenticated or unauthenticated access. It can read a GitHub access token from a YAML file in a specified directory for authenticated access, which increases the rate limit for API requests. If no access token is provided or found in the YAML file, it defaults to unauthenticated access with lower rate limits.</p> <p>Attributes:</p> Name Type Description <code>github</code> <code>Github</code> <p>An instance of the Github class from the PyGithub library, configured for either authenticated or unauthenticated access.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>class GitHubAccess:\n    \"\"\"\n    A class to handle GitHub API access.\n\n    This class provides functionalities to access the GitHub API, either with authenticated or unauthenticated access.\n    It can read a GitHub access token from a YAML file in a specified directory for authenticated access,\n    which increases the rate limit for API requests. If no access token is provided or found in the YAML file,\n    it defaults to unauthenticated access with lower rate limits.\n\n    Attributes:\n        github (Github): An instance of the Github class from the PyGithub library, configured for either authenticated or unauthenticated access.\n    \"\"\"\n\n    def __init__(\n        self, default_directory: str = None, access_token: Optional[str] = None\n    ):\n        \"\"\"\n        Initialize the GitHub instance.\n\n        If an access_token is provided, use it for authenticated access to increase the rate limit.\n        Otherwise, attempt to read the access token from a YAML file in the default directory.\n        If no token is found, access is unauthenticated with lower rate limits.\n\n        Args:\n            default_directory (str): Path to the directory where the access token file is stored.\n            access_token (Optional[str]): A GitHub personal access token. Defaults to None.\n        \"\"\"\n        if not access_token and default_directory:\n            access_token = self._read_access_token(default_directory)\n        self.github = Github(access_token)\n\n    def _read_access_token(self, default_directory: str) -&gt; Optional[str]:\n        \"\"\"\n        Read the GitHub access token from a YAML file located in the default directory.\n\n        Args:\n            default_directory (str): Path to the directory where the access token file is stored.\n\n        Returns:\n            Optional[str]: The access token if found, otherwise None.\n        \"\"\"\n        token_file = Path(default_directory) / \"github_access_token.yaml\"\n        if token_file.exists():\n            with open(token_file, \"r\") as file:\n                data = yaml.safe_load(file)\n                return data.get(\"access_token\", None)\n        return None\n\n    def search_repositories(self, query: str) -&gt; dict:\n        \"\"\"\n        Search for GitHub repositories matching a given query.\n\n        Args:\n            query (str): The search query string.\n\n        Returns:\n            dict: A dictionary of repository objects keyed by their full names.\n        \"\"\"\n        repositories = self.github.search_repositories(query)\n        repo_dict = {repo.full_name: repo for repo in repositories}\n        return repo_dict\n</code></pre>"},{"location":"#ngwidgets.projects.GitHubAccess.__init__","title":"<code>__init__(default_directory=None, access_token=None)</code>","text":"<p>Initialize the GitHub instance.</p> <p>If an access_token is provided, use it for authenticated access to increase the rate limit. Otherwise, attempt to read the access token from a YAML file in the default directory. If no token is found, access is unauthenticated with lower rate limits.</p> <p>Parameters:</p> Name Type Description Default <code>default_directory</code> <code>str</code> <p>Path to the directory where the access token file is stored.</p> <code>None</code> <code>access_token</code> <code>Optional[str]</code> <p>A GitHub personal access token. Defaults to None.</p> <code>None</code> Source code in <code>ngwidgets/projects.py</code> <pre><code>def __init__(\n    self, default_directory: str = None, access_token: Optional[str] = None\n):\n    \"\"\"\n    Initialize the GitHub instance.\n\n    If an access_token is provided, use it for authenticated access to increase the rate limit.\n    Otherwise, attempt to read the access token from a YAML file in the default directory.\n    If no token is found, access is unauthenticated with lower rate limits.\n\n    Args:\n        default_directory (str): Path to the directory where the access token file is stored.\n        access_token (Optional[str]): A GitHub personal access token. Defaults to None.\n    \"\"\"\n    if not access_token and default_directory:\n        access_token = self._read_access_token(default_directory)\n    self.github = Github(access_token)\n</code></pre>"},{"location":"#ngwidgets.projects.GitHubAccess.search_repositories","title":"<code>search_repositories(query)</code>","text":"<p>Search for GitHub repositories matching a given query.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The search query string.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary of repository objects keyed by their full names.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def search_repositories(self, query: str) -&gt; dict:\n    \"\"\"\n    Search for GitHub repositories matching a given query.\n\n    Args:\n        query (str): The search query string.\n\n    Returns:\n        dict: A dictionary of repository objects keyed by their full names.\n    \"\"\"\n    repositories = self.github.search_repositories(query)\n    repo_dict = {repo.full_name: repo for repo in repositories}\n    return repo_dict\n</code></pre>"},{"location":"#ngwidgets.projects.Project","title":"<code>Project</code>","text":"<p>A data class representing a software project, potentially from PyPI or GitHub.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the project.</p> <code>package</code> <code>str</code> <p>The package name on PyPI.</p> <code>demo</code> <code>str</code> <p>A URL to a demo of the project, if available.</p> <code>forum_post</code> <code>str</code> <p>A URL to a forum post discussing the project.</p> <code>github</code> <code>str</code> <p>A URL to the GitHub repository of the project.</p> <code>pypi</code> <code>str</code> <p>A URL to the PyPI page of the project.</p> <code>image_url</code> <code>str</code> <p>A URL to an image representing the project.</p> <code>stars</code> <code>int</code> <p>Number of stars on GitHub.</p> <code>github_description</code> <code>str</code> <p>Description of the project from GitHub.</p> <code>pypi_description</code> <code>str</code> <p>Description of the project from PyPI.</p> <code>avatar</code> <code>str</code> <p>A URL to the avatar image of the author/maintainer.</p> <code>search_text</code> <code>str</code> <p>Text used for searching the project.</p> <code>github_author</code> <code>str</code> <p>The GitHub username of the project's author.</p> <code>pypi_author</code> <code>str</code> <p>The PyPI username of the project's author.</p> <code>created_at</code> <code>datetime</code> <p>The date when the project was created.</p> <code>downloads</code> <code>int</code> <p>Number of downloads from PyPI.</p> <code>categories</code> <code>List[str]</code> <p>Categories associated with the project.</p> <code>version</code> <code>str</code> <p>The current version of the project on PyPI.</p> Solution bazaar attributes <p>component_url(str): the url of a yaml file with component declarations, demo, install and usage information solution_tags(str): a list of comma separated tags for checking the conformance of the project to the solution bazaar guidelines</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>@lod_storable\nclass Project:\n    \"\"\"\n    A data class representing a software project, potentially from PyPI or GitHub.\n\n    Attributes:\n        name (str): The name of the project.\n        package (str): The package name on PyPI.\n        demo (str): A URL to a demo of the project, if available.\n        forum_post (str): A URL to a forum post discussing the project.\n        github (str): A URL to the GitHub repository of the project.\n        pypi (str): A URL to the PyPI page of the project.\n        image_url (str): A URL to an image representing the project.\n        stars (int): Number of stars on GitHub.\n        github_description (str): Description of the project from GitHub.\n        pypi_description (str): Description of the project from PyPI.\n        avatar (str): A URL to the avatar image of the author/maintainer.\n        search_text (str): Text used for searching the project.\n        github_author (str): The GitHub username of the project's author.\n        pypi_author (str): The PyPI username of the project's author.\n        created_at (datetime): The date when the project was created.\n        downloads (int): Number of downloads from PyPI.\n        categories (List[str]): Categories associated with the project.\n        version (str): The current version of the project on PyPI.\n\n    Solution bazaar attributes:\n        component_url(str): the url of a yaml file with component declarations, demo, install and usage information\n        solution_tags(str): a list of comma separated tags for checking the conformance of the project\n        to the solution bazaar guidelines\n    \"\"\"\n\n    name: Optional[str] = None\n    package: Optional[str] = None\n    demo: Optional[str] = None\n    forum_post: Optional[str] = None\n    github_owner: Optional[str] = None\n    github_repo_name: Optional[str] = None\n    github: Optional[str] = None\n    pypi: Optional[str] = None\n    image_url: Optional[str] = None\n    stars: Optional[int] = None\n    github_description: Optional[str] = None\n    pypi_description: Optional[str] = None\n    avatar: Optional[str] = None\n    search_text: Optional[str] = None\n    github_author: Optional[str] = None\n    pypi_author: Optional[str] = None\n    created_at: Optional[datetime] = None\n    downloads: Optional[int] = None\n    categories: List[str] = field(default_factory=list)\n    version: Optional[str] = None\n    # solution bazaar properties\n    components_url: Optional[str] = None\n    solution_tags: Optional[str] = \"\"\n    solution_id: Optional[str] = None\n\n    def __post_init__(self):\n        if self.github_owner and self.github_repo_name:\n            self.solution_id = self._generate_solution_id()\n\n    def _generate_solution_id(self) -&gt; str:\n        owner = self.github_owner or \"\"\n        repo_name = self.github_repo_name or \"\"\n        base_id = f\"{owner}_{repo_name}\"\n        base_id = base_id.replace(\"/\", \"_\").replace(\n            \"\\\\\", \"_\"\n        )  # Replace slashes with underscores\n        normalized_id = (\n            unicodedata.normalize(\"NFKD\", base_id)\n            .encode(\"ascii\", \"ignore\")\n            .decode(\"ascii\")\n        )\n        return re.sub(r\"[^\\w\\s.-]\", \"\", normalized_id)\n\n    @property\n    def component_count(self) -&gt; int:\n        \"\"\"\n        Counts the number of components associated with the project.\n        Returns 0 if there are no components or if components_url is not set.\n        \"\"\"\n        if not self.components_url:\n            return 0\n        components = self.get_components()\n        return len(components.components) if components else 0\n\n    @property\n    def install_instructions(self) -&gt; str:\n        \"\"\"\n        Get the installation instructions for the project.\n\n        Returns:\n            str: Installation instructions for the project.\n        \"\"\"\n        return f\"pip install {self.package}\"\n\n    def get_components(\n        self, cache_directory: str = None, cache_valid_secs: int = 3600\n    ) -&gt; Components:\n        \"\"\"\n        method to lazy-loaded components. Loads components from URL if components_url is set.\n        If a cache directory is provided, it caches the YAML file in that directory. The cache validity period\n        can be specified in seconds.\n\n        Args:\n            cache_directory (str, optional): Directory for caching the YAML files. If None, caching is disabled.\n            cache_valid_secs (int, optional): The number of seconds for which the cache is considered valid. Defaults to 3600 seconds (1 hour).\n\n        Returns:\n            Components: The components associated with the project.\n        \"\"\"\n        if not self.components_url:\n            return None\n\n        # (slow) load from url is the default\n        load_from_url = True\n\n        # potentially we speed up by caching\n        if cache_directory:\n            cache_directory = Path(cache_directory) / \"components\"\n            os.makedirs(cache_directory, exist_ok=True)\n            filename = f\"{self.solution_id}.yaml\"\n            file_path = cache_directory / filename\n\n            if file_path.exists():\n                file_size = file_path.stat().st_size\n                if file_size &gt; 0 and not self._is_file_outdated(\n                    file_path, cache_valid_secs\n                ):\n                    load_from_url = False\n                    components = Components.load_from_yaml_file(str(file_path))\n\n        if load_from_url:\n            components = Components.load_from_yaml_url(self.components_url)\n            if cache_directory:\n                components.save_to_yaml_file(str(file_path))\n\n        return components\n\n    def _is_file_outdated(self, file_path: Path, cache_valid_secs: int = 3600) -&gt; bool:\n        \"\"\"\n        Check if the file is outdated (older than 1 hour).\n        \"\"\"\n        file_mod_time = file_path.stat().st_mtime\n        return (time.time() - file_mod_time) &gt; cache_valid_secs\n\n    def merge_pypi(self, pypi):\n        \"\"\"\n        merge the given pypi project info to with mine\n        \"\"\"\n        self.pypi = pypi.pypi\n        self.package = pypi.package\n        self.pypi_description = pypi.pypi_description\n        self.version = pypi.version\n\n    @classmethod\n    def get_raw_url(\n        cls, owner: str, repo_name: str, branch_name: str, file_path: str\n    ) -&gt; str:\n        \"\"\"\n        Construct the URL for the raw  file_path from the owner, repository name, and branch name.\n\n        Args:\n            owner (str): The owner of the GitHub repository.\n            repo_name (str): The name of the GitHub repository.\n            branch_name (str): The name of the branch.\n            file_path(str): the file_path to get the raw content for\n\n        Returns:\n            str: The URL of the raw file_path if it exists\n\n        \"\"\"\n        raw_url = f\"https://raw.githubusercontent.com/{owner}/{repo_name}/{branch_name}{file_path}\"\n        try:\n            # Attempt to open the raw URL\n            with urllib.request.urlopen(raw_url) as response:\n                # Check if the response status code is 200 (OK)\n                if response.getcode() == 200:\n                    return raw_url\n        except urllib.error.URLError as ex:\n\n            pass  # Handle any exceptions here\n        return None  # Return None if .component.yaml doesn't exist\n\n    @classmethod\n    def from_github(cls, repo) -&gt; \"Project\":\n        \"\"\"\n        Class method to create a Project instance from a GitHub repository.\n\n        Args:\n            repo(Repository.Repository): The github repository\n            github_access (GitHubAccess): Instance of GitHubAccess for API calls.\n\n        Returns:\n            Project: An instance of the Project class filled with GitHub repository details.\n        \"\"\"\n        avatar_url = repo.owner.avatar_url if repo.owner.avatar_url else None\n        stars = repo.stargazers_count\n        owner = repo.owner.login\n        repo_name = repo.name\n\n        components_url = cls.get_raw_url(\n            owner, repo_name, repo.default_branch, \"/.components.yaml\"\n        )\n        project = cls(\n            name=repo.name,\n            github=repo.html_url,\n            github_repo_name=repo.name,\n            github_owner=repo.owner.login,\n            stars=stars,\n            github_description=repo.description,\n            github_author=repo.owner.login,\n            created_at=repo.created_at,\n            avatar=avatar_url,\n            components_url=components_url\n            # Other fields can be filled in as needed\n        )\n        return project\n\n    @classmethod\n    def from_pypi(cls, package_info: Dict) -&gt; \"Project\":\n        \"\"\"\n        Class method to create a Project instance from a PyPI package.\n\n        Args:\n            package_info (Dict): Dictionary containing package data from PyPI.\n\n        Returns:\n            Project: An instance of the Project class filled with PyPI package details.\n        \"\"\"\n        info = package_info.get(\"info\", {})\n        github = None\n        project_urls = info.get(\"project_urls\", {})\n        if project_urls:\n            # Preferred keys for GitHub URLs\n            preferred_keys = [\"Repository\", \"Source\", \"Home\"]\n            github_base_url = \"https://github.com/\"\n\n            # Iterate over the preferred keys and check if any URL starts with the GitHub base URL\n            for key in preferred_keys:\n                url = project_urls.get(key)\n                if url and url.startswith(github_base_url):\n                    github = url\n                    break\n            else:\n                # If no GitHub URL is found, you may choose to handle this case (e.g., logging, fallback logic)\n                github = None\n\n        project = cls(\n            name=info.get(\"name\"),\n            package=info.get(\"name\"),\n            pypi=info.get(\"package_url\"),\n            pypi_description=info.get(\"summary\"),\n            version=info.get(\"version\"),\n            github_description=info.get(\"description\"),\n            github=github,\n        )\n        return project\n</code></pre>"},{"location":"#ngwidgets.projects.Project.component_count","title":"<code>component_count: int</code>  <code>property</code>","text":"<p>Counts the number of components associated with the project. Returns 0 if there are no components or if components_url is not set.</p>"},{"location":"#ngwidgets.projects.Project.install_instructions","title":"<code>install_instructions: str</code>  <code>property</code>","text":"<p>Get the installation instructions for the project.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Installation instructions for the project.</p>"},{"location":"#ngwidgets.projects.Project.from_github","title":"<code>from_github(repo)</code>  <code>classmethod</code>","text":"<p>Class method to create a Project instance from a GitHub repository.</p> <p>Parameters:</p> Name Type Description Default <code>repo(Repository.Repository)</code> <p>The github repository</p> required <code>github_access</code> <code>GitHubAccess</code> <p>Instance of GitHubAccess for API calls.</p> required <p>Returns:</p> Name Type Description <code>Project</code> <code>Project</code> <p>An instance of the Project class filled with GitHub repository details.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>@classmethod\ndef from_github(cls, repo) -&gt; \"Project\":\n    \"\"\"\n    Class method to create a Project instance from a GitHub repository.\n\n    Args:\n        repo(Repository.Repository): The github repository\n        github_access (GitHubAccess): Instance of GitHubAccess for API calls.\n\n    Returns:\n        Project: An instance of the Project class filled with GitHub repository details.\n    \"\"\"\n    avatar_url = repo.owner.avatar_url if repo.owner.avatar_url else None\n    stars = repo.stargazers_count\n    owner = repo.owner.login\n    repo_name = repo.name\n\n    components_url = cls.get_raw_url(\n        owner, repo_name, repo.default_branch, \"/.components.yaml\"\n    )\n    project = cls(\n        name=repo.name,\n        github=repo.html_url,\n        github_repo_name=repo.name,\n        github_owner=repo.owner.login,\n        stars=stars,\n        github_description=repo.description,\n        github_author=repo.owner.login,\n        created_at=repo.created_at,\n        avatar=avatar_url,\n        components_url=components_url\n        # Other fields can be filled in as needed\n    )\n    return project\n</code></pre>"},{"location":"#ngwidgets.projects.Project.from_pypi","title":"<code>from_pypi(package_info)</code>  <code>classmethod</code>","text":"<p>Class method to create a Project instance from a PyPI package.</p> <p>Parameters:</p> Name Type Description Default <code>package_info</code> <code>Dict</code> <p>Dictionary containing package data from PyPI.</p> required <p>Returns:</p> Name Type Description <code>Project</code> <code>Project</code> <p>An instance of the Project class filled with PyPI package details.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>@classmethod\ndef from_pypi(cls, package_info: Dict) -&gt; \"Project\":\n    \"\"\"\n    Class method to create a Project instance from a PyPI package.\n\n    Args:\n        package_info (Dict): Dictionary containing package data from PyPI.\n\n    Returns:\n        Project: An instance of the Project class filled with PyPI package details.\n    \"\"\"\n    info = package_info.get(\"info\", {})\n    github = None\n    project_urls = info.get(\"project_urls\", {})\n    if project_urls:\n        # Preferred keys for GitHub URLs\n        preferred_keys = [\"Repository\", \"Source\", \"Home\"]\n        github_base_url = \"https://github.com/\"\n\n        # Iterate over the preferred keys and check if any URL starts with the GitHub base URL\n        for key in preferred_keys:\n            url = project_urls.get(key)\n            if url and url.startswith(github_base_url):\n                github = url\n                break\n        else:\n            # If no GitHub URL is found, you may choose to handle this case (e.g., logging, fallback logic)\n            github = None\n\n    project = cls(\n        name=info.get(\"name\"),\n        package=info.get(\"name\"),\n        pypi=info.get(\"package_url\"),\n        pypi_description=info.get(\"summary\"),\n        version=info.get(\"version\"),\n        github_description=info.get(\"description\"),\n        github=github,\n    )\n    return project\n</code></pre>"},{"location":"#ngwidgets.projects.Project.get_components","title":"<code>get_components(cache_directory=None, cache_valid_secs=3600)</code>","text":"<p>method to lazy-loaded components. Loads components from URL if components_url is set. If a cache directory is provided, it caches the YAML file in that directory. The cache validity period can be specified in seconds.</p> <p>Parameters:</p> Name Type Description Default <code>cache_directory</code> <code>str</code> <p>Directory for caching the YAML files. If None, caching is disabled.</p> <code>None</code> <code>cache_valid_secs</code> <code>int</code> <p>The number of seconds for which the cache is considered valid. Defaults to 3600 seconds (1 hour).</p> <code>3600</code> <p>Returns:</p> Name Type Description <code>Components</code> <code>Components</code> <p>The components associated with the project.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def get_components(\n    self, cache_directory: str = None, cache_valid_secs: int = 3600\n) -&gt; Components:\n    \"\"\"\n    method to lazy-loaded components. Loads components from URL if components_url is set.\n    If a cache directory is provided, it caches the YAML file in that directory. The cache validity period\n    can be specified in seconds.\n\n    Args:\n        cache_directory (str, optional): Directory for caching the YAML files. If None, caching is disabled.\n        cache_valid_secs (int, optional): The number of seconds for which the cache is considered valid. Defaults to 3600 seconds (1 hour).\n\n    Returns:\n        Components: The components associated with the project.\n    \"\"\"\n    if not self.components_url:\n        return None\n\n    # (slow) load from url is the default\n    load_from_url = True\n\n    # potentially we speed up by caching\n    if cache_directory:\n        cache_directory = Path(cache_directory) / \"components\"\n        os.makedirs(cache_directory, exist_ok=True)\n        filename = f\"{self.solution_id}.yaml\"\n        file_path = cache_directory / filename\n\n        if file_path.exists():\n            file_size = file_path.stat().st_size\n            if file_size &gt; 0 and not self._is_file_outdated(\n                file_path, cache_valid_secs\n            ):\n                load_from_url = False\n                components = Components.load_from_yaml_file(str(file_path))\n\n    if load_from_url:\n        components = Components.load_from_yaml_url(self.components_url)\n        if cache_directory:\n            components.save_to_yaml_file(str(file_path))\n\n    return components\n</code></pre>"},{"location":"#ngwidgets.projects.Project.get_raw_url","title":"<code>get_raw_url(owner, repo_name, branch_name, file_path)</code>  <code>classmethod</code>","text":"<p>Construct the URL for the raw  file_path from the owner, repository name, and branch name.</p> <p>Parameters:</p> Name Type Description Default <code>owner</code> <code>str</code> <p>The owner of the GitHub repository.</p> required <code>repo_name</code> <code>str</code> <p>The name of the GitHub repository.</p> required <code>branch_name</code> <code>str</code> <p>The name of the branch.</p> required <code>file_path(str)</code> <p>the file_path to get the raw content for</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The URL of the raw file_path if it exists</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>@classmethod\ndef get_raw_url(\n    cls, owner: str, repo_name: str, branch_name: str, file_path: str\n) -&gt; str:\n    \"\"\"\n    Construct the URL for the raw  file_path from the owner, repository name, and branch name.\n\n    Args:\n        owner (str): The owner of the GitHub repository.\n        repo_name (str): The name of the GitHub repository.\n        branch_name (str): The name of the branch.\n        file_path(str): the file_path to get the raw content for\n\n    Returns:\n        str: The URL of the raw file_path if it exists\n\n    \"\"\"\n    raw_url = f\"https://raw.githubusercontent.com/{owner}/{repo_name}/{branch_name}{file_path}\"\n    try:\n        # Attempt to open the raw URL\n        with urllib.request.urlopen(raw_url) as response:\n            # Check if the response status code is 200 (OK)\n            if response.getcode() == 200:\n                return raw_url\n    except urllib.error.URLError as ex:\n\n        pass  # Handle any exceptions here\n    return None  # Return None if .component.yaml doesn't exist\n</code></pre>"},{"location":"#ngwidgets.projects.Project.merge_pypi","title":"<code>merge_pypi(pypi)</code>","text":"<p>merge the given pypi project info to with mine</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def merge_pypi(self, pypi):\n    \"\"\"\n    merge the given pypi project info to with mine\n    \"\"\"\n    self.pypi = pypi.pypi\n    self.package = pypi.package\n    self.pypi_description = pypi.pypi_description\n    self.version = pypi.version\n</code></pre>"},{"location":"#ngwidgets.projects.Projects","title":"<code>Projects</code>","text":"<p>handle a list of python projects on a specific topic</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>@lod_storable\nclass Projects:\n    \"\"\"\n    handle a list of python projects on a specific topic\n    \"\"\"\n\n    topic: str\n    _default_directory: Path = field(init=False)\n    projects: List = field(default_factory=list, init=False)\n    last_update_time: datetime = field(init=False)\n\n    def __post_init__(self):\n        \"\"\"\n        Post-initialization to set non-static attributes.\n        \"\"\"\n        self._default_directory = Path.home() / \".nicegui\"\n        self.last_update_time = self.get_file_update_time()\n\n    def get_file_update_time(self):\n        \"\"\"\n        Get the last modification time of the projects file.\n\n        Returns:\n            datetime: The last modification time of the file or None if file does not exist.\n        \"\"\"\n        if self.file_path.exists():\n            file_mod_time = os.path.getmtime(self.file_path)\n            return datetime.fromtimestamp(file_mod_time)\n        return None\n\n    @property\n    def default_directory(self) -&gt; Path:\n        \"\"\"\n        The default directory for saving and loading projects.\n        Returns:\n            Path: The default directory path.\n        \"\"\"\n        return self._default_directory\n\n    @default_directory.setter\n    def default_directory(self, directory: str):\n        \"\"\"\n        Set the default directory for saving and loading projects.\n        Args:\n            directory (str): The path to the new default directory.\n        \"\"\"\n        self._default_directory = Path(directory)\n\n    @property\n    def file_path(self) -&gt; Path:\n        \"\"\"\n        The file path for saving and loading projects, based on the topic.\n        Returns:\n            Path: The file path.\n        \"\"\"\n        filename = f\"components_{self.topic}.json\"\n        return self._default_directory / filename\n\n    def get_project4_solution_id(self, solution_id: str) -&gt; Project:\n        \"\"\"\n        Get a project based on the provided solution_id.\n\n        Args:\n            solution_id (str): The solution_id to search for.\n\n        Returns:\n            Project: The Project instance matching the provided solution_id, or None if not found.\n        \"\"\"\n        for project in self.projects:\n            if project.solution_id == solution_id:\n                return project\n        return None\n\n    def save(self, projects: List[Project] = None, directory: str = None):\n        \"\"\"\n        Save a list of Project instances to a JSON file.\n        Args:\n            projects (List[Project]): A list of Project instances to be saved.\n            directory (str, optional): The directory where the file will be saved. If None, uses the default directory.\n        \"\"\"\n        if projects is None:\n            projects = self.projects\n        directory = Path(directory or self.default_directory)\n        os.makedirs(directory, exist_ok=True)\n\n        with open(self.file_path, \"w\", encoding=\"utf-8\") as file:\n            json.dump(\n                [project.__dict__ for project in projects], file, indent=4, default=str\n            )\n\n    def load(\n        self, directory: str = None, set_self: bool = True, lenient: bool = True\n    ) -&gt; List[Project]:\n        \"\"\"\n        Load a list of Project instances from a JSON file.\n        Args:\n            directory (str, optional): The directory where the file is located. If None, uses the default directory.\n            set_self(bool): if True set self.projects with the result\n            lenient(bool): if True allow that there is no projects json file\n        Returns:\n            List[Project]: A list of Project instances loaded from the file.\n\n        \"\"\"\n        directory = Path(directory or self.default_directory)\n        projects = []\n        if not self.file_path.exists():\n            if not lenient:\n                raise FileNotFoundError(f\"No such file: {self.file_path}\")\n        else:\n            with open(self.file_path, \"r\", encoding=\"utf-8\") as file:\n                projects_records = json.load(file)\n\n            for project_record in projects_records:\n                project = Project(**project_record)\n                projects.append(project)\n        if set_self:\n            self.projects = projects\n        return projects\n\n    def get_github_projects(\n        self, repo_dict: dict, progress_bar=None\n    ) -&gt; Dict[str, Project]:\n        \"\"\"\n        Get GitHub projects related to the specified topic.\n\n        Args:\n            github_access (GitHubAccess): An instance of GitHubAccess for API calls.\n\n        Returns:\n            Dict[str, Project]: A dictionary of GitHub projects with their URLs as keys and Project instances as values.\n        \"\"\"\n        projects_by_url = {}\n        for repo in repo_dict.values():\n            if progress_bar:\n                progress_bar.update(1)\n            project = Project.from_github(repo)\n            projects_by_url[repo.html_url] = project\n        return projects_by_url\n\n    def sort_projects(self, projects: List[Project], sort_key: str):\n        \"\"\"\n        Sorts a list of projects based on the specified sort key, converting integers to fixed-length strings.\n\n        Args:\n            projects (list): List of Project instances.\n            sort_key (str): Attribute name to sort the projects by.\n\n        Returns:\n            list: Sorted list of projects.\n        \"\"\"\n\n        # Define the function to determine the sorting value\n        def get_sort_value(proj):\n            attr = getattr(proj, sort_key, None)\n\n            # Handle None values; place them at the end of the sorted list\n            if attr is None:\n                return \" \"  # Assuming you want None values to appear last\n\n            # Convert integers to zero-padded strings, and others to strings\n            if isinstance(attr, int):\n                return f\"{attr:010d}\"  # Zero-pad to 10 digits\n            else:\n                return str(attr).lower()\n\n        # Determine if sorting should be in reverse\n        reverse_sort = sort_key in [\"stars\", \"downloads\", \"component_count\"]\n\n        return sorted(projects, key=get_sort_value, reverse=reverse_sort)\n\n    def update(\n        self,\n        progress_bar: Optional[Progressbar] = None,\n        limit_github: Optional[int] = None,\n        limit_pypi: Optional[int] = None,\n    ):\n        \"\"\"\n        Update the list of projects by retrieving potential projects from PyPI and GitHub based on the topic.\n\n        Args:\n            progress_bar (Optional[Progressbar]): A progress bar instance to update during the process.\n            limit_github (Optional[int]): If set, limit the maximum number of GitHub projects to retrieve.\n            limit_pypi (Optional[int]): If set, limit the maximum number of PyPI projects to retrieve.\n        \"\"\"\n        # Initialize progress bar if provided\n        if progress_bar:\n            cached_projects = self.load()\n            progress_bar.total = len(cached_projects)\n            progress_bar.reset()\n            progress_bar.set_description(\"Updating projects\")\n\n        # pypi access\n        pypi = PyPi()\n\n        # Fetch projects from PyPI\n        pypi_projects = pypi.search_projects(self.topic)\n        # Apply limit to the PyPI projects\n        if limit_pypi is not None:\n            pypi_projects = pypi_projects[:limit_pypi]\n        # Fetch repositories from GitHub\n        github_access = GitHubAccess(self.default_directory)\n        query = self.topic\n        repo_dict = github_access.search_repositories(query)\n        # Apply limit to the GitHub repositories\n        if limit_github is not None:\n            repo_dict = dict(list(repo_dict.items())[:limit_github])\n        total = len(repo_dict) + len(pypi_projects)\n        if progress_bar:\n            progress_bar.total = total\n\n        projects_by_github_url = self.get_github_projects(repo_dict, progress_bar)\n        self.projects = list(projects_by_github_url.values())\n\n        # Merge PyPI projects into the GitHub projects\n        for pypi in pypi_projects:\n            matched_project = None  # Reset for each PyPI project\n            if pypi.github:\n                for github_url in projects_by_github_url.keys():\n                    if pypi.github.startswith(github_url):\n                        matched_project = projects_by_github_url[github_url]\n                if matched_project:\n                    matched_project.merge_pypi(pypi)\n                else:\n                    # we have github url but it was not in our search list\n                    # check the gitub repo for more details\n                    repo_name = self.extract_repo_name_from_url(pypi.github)\n                    if not repo_name:\n                        raise ValueError(\n                            f\"Can't determine repo_name for {pypi.github} of pypi package {pypi.package}\"\n                        )\n                    # Create a Project instance from GitHub\n                    repo = github_access.github.get_repo(repo_name)\n                    github_comp = Project.from_github(repo)\n                    # Merge PyPI data into the newly created GitHub project\n                    github_comp.merge_pypi(pypi)\n                    self.projects.append(github_comp)\n            else:\n                # PyPI project without a GitHub URL\n                self.projects.append(pypi)\n            if progress_bar:\n                progress_bar.update(1)\n        # sort projects by name\n        self.projects = sorted(\n            self.projects, key=lambda comp: comp.name.lower() if comp.name else \"\"\n        )\n        self.last_update_time = datetime.now()\n\n    def extract_repo_name_from_url(self, url: str) -&gt; str:\n        \"\"\"\n        Extract the repository name in 'user/repo' format from a GitHub URL.\n\n        Args:\n            url (str): The GitHub URL.\n\n        Returns:\n            str: The repository name or None if not extractable.\n        \"\"\"\n        # Assuming the URL format is https://github.com/user/repo\n        parts = url.split(\"/\")\n        if len(parts) &gt; 4 and parts[2] == \"github.com\":\n            return \"/\".join(parts[3:5])\n        return None\n</code></pre>"},{"location":"#ngwidgets.projects.Projects.default_directory","title":"<code>default_directory: Path</code>  <code>property</code> <code>writable</code>","text":"<p>The default directory for saving and loading projects. Returns:     Path: The default directory path.</p>"},{"location":"#ngwidgets.projects.Projects.file_path","title":"<code>file_path: Path</code>  <code>property</code>","text":"<p>The file path for saving and loading projects, based on the topic. Returns:     Path: The file path.</p>"},{"location":"#ngwidgets.projects.Projects.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Post-initialization to set non-static attributes.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def __post_init__(self):\n    \"\"\"\n    Post-initialization to set non-static attributes.\n    \"\"\"\n    self._default_directory = Path.home() / \".nicegui\"\n    self.last_update_time = self.get_file_update_time()\n</code></pre>"},{"location":"#ngwidgets.projects.Projects.extract_repo_name_from_url","title":"<code>extract_repo_name_from_url(url)</code>","text":"<p>Extract the repository name in 'user/repo' format from a GitHub URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The GitHub URL.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The repository name or None if not extractable.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def extract_repo_name_from_url(self, url: str) -&gt; str:\n    \"\"\"\n    Extract the repository name in 'user/repo' format from a GitHub URL.\n\n    Args:\n        url (str): The GitHub URL.\n\n    Returns:\n        str: The repository name or None if not extractable.\n    \"\"\"\n    # Assuming the URL format is https://github.com/user/repo\n    parts = url.split(\"/\")\n    if len(parts) &gt; 4 and parts[2] == \"github.com\":\n        return \"/\".join(parts[3:5])\n    return None\n</code></pre>"},{"location":"#ngwidgets.projects.Projects.get_file_update_time","title":"<code>get_file_update_time()</code>","text":"<p>Get the last modification time of the projects file.</p> <p>Returns:</p> Name Type Description <code>datetime</code> <p>The last modification time of the file or None if file does not exist.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def get_file_update_time(self):\n    \"\"\"\n    Get the last modification time of the projects file.\n\n    Returns:\n        datetime: The last modification time of the file or None if file does not exist.\n    \"\"\"\n    if self.file_path.exists():\n        file_mod_time = os.path.getmtime(self.file_path)\n        return datetime.fromtimestamp(file_mod_time)\n    return None\n</code></pre>"},{"location":"#ngwidgets.projects.Projects.get_github_projects","title":"<code>get_github_projects(repo_dict, progress_bar=None)</code>","text":"<p>Get GitHub projects related to the specified topic.</p> <p>Parameters:</p> Name Type Description Default <code>github_access</code> <code>GitHubAccess</code> <p>An instance of GitHubAccess for API calls.</p> required <p>Returns:</p> Type Description <code>Dict[str, Project]</code> <p>Dict[str, Project]: A dictionary of GitHub projects with their URLs as keys and Project instances as values.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def get_github_projects(\n    self, repo_dict: dict, progress_bar=None\n) -&gt; Dict[str, Project]:\n    \"\"\"\n    Get GitHub projects related to the specified topic.\n\n    Args:\n        github_access (GitHubAccess): An instance of GitHubAccess for API calls.\n\n    Returns:\n        Dict[str, Project]: A dictionary of GitHub projects with their URLs as keys and Project instances as values.\n    \"\"\"\n    projects_by_url = {}\n    for repo in repo_dict.values():\n        if progress_bar:\n            progress_bar.update(1)\n        project = Project.from_github(repo)\n        projects_by_url[repo.html_url] = project\n    return projects_by_url\n</code></pre>"},{"location":"#ngwidgets.projects.Projects.get_project4_solution_id","title":"<code>get_project4_solution_id(solution_id)</code>","text":"<p>Get a project based on the provided solution_id.</p> <p>Parameters:</p> Name Type Description Default <code>solution_id</code> <code>str</code> <p>The solution_id to search for.</p> required <p>Returns:</p> Name Type Description <code>Project</code> <code>Project</code> <p>The Project instance matching the provided solution_id, or None if not found.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def get_project4_solution_id(self, solution_id: str) -&gt; Project:\n    \"\"\"\n    Get a project based on the provided solution_id.\n\n    Args:\n        solution_id (str): The solution_id to search for.\n\n    Returns:\n        Project: The Project instance matching the provided solution_id, or None if not found.\n    \"\"\"\n    for project in self.projects:\n        if project.solution_id == solution_id:\n            return project\n    return None\n</code></pre>"},{"location":"#ngwidgets.projects.Projects.load","title":"<code>load(directory=None, set_self=True, lenient=True)</code>","text":"<p>Load a list of Project instances from a JSON file. Args:     directory (str, optional): The directory where the file is located. If None, uses the default directory.     set_self(bool): if True set self.projects with the result     lenient(bool): if True allow that there is no projects json file Returns:     List[Project]: A list of Project instances loaded from the file.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def load(\n    self, directory: str = None, set_self: bool = True, lenient: bool = True\n) -&gt; List[Project]:\n    \"\"\"\n    Load a list of Project instances from a JSON file.\n    Args:\n        directory (str, optional): The directory where the file is located. If None, uses the default directory.\n        set_self(bool): if True set self.projects with the result\n        lenient(bool): if True allow that there is no projects json file\n    Returns:\n        List[Project]: A list of Project instances loaded from the file.\n\n    \"\"\"\n    directory = Path(directory or self.default_directory)\n    projects = []\n    if not self.file_path.exists():\n        if not lenient:\n            raise FileNotFoundError(f\"No such file: {self.file_path}\")\n    else:\n        with open(self.file_path, \"r\", encoding=\"utf-8\") as file:\n            projects_records = json.load(file)\n\n        for project_record in projects_records:\n            project = Project(**project_record)\n            projects.append(project)\n    if set_self:\n        self.projects = projects\n    return projects\n</code></pre>"},{"location":"#ngwidgets.projects.Projects.save","title":"<code>save(projects=None, directory=None)</code>","text":"<p>Save a list of Project instances to a JSON file. Args:     projects (List[Project]): A list of Project instances to be saved.     directory (str, optional): The directory where the file will be saved. If None, uses the default directory.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def save(self, projects: List[Project] = None, directory: str = None):\n    \"\"\"\n    Save a list of Project instances to a JSON file.\n    Args:\n        projects (List[Project]): A list of Project instances to be saved.\n        directory (str, optional): The directory where the file will be saved. If None, uses the default directory.\n    \"\"\"\n    if projects is None:\n        projects = self.projects\n    directory = Path(directory or self.default_directory)\n    os.makedirs(directory, exist_ok=True)\n\n    with open(self.file_path, \"w\", encoding=\"utf-8\") as file:\n        json.dump(\n            [project.__dict__ for project in projects], file, indent=4, default=str\n        )\n</code></pre>"},{"location":"#ngwidgets.projects.Projects.sort_projects","title":"<code>sort_projects(projects, sort_key)</code>","text":"<p>Sorts a list of projects based on the specified sort key, converting integers to fixed-length strings.</p> <p>Parameters:</p> Name Type Description Default <code>projects</code> <code>list</code> <p>List of Project instances.</p> required <code>sort_key</code> <code>str</code> <p>Attribute name to sort the projects by.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>Sorted list of projects.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def sort_projects(self, projects: List[Project], sort_key: str):\n    \"\"\"\n    Sorts a list of projects based on the specified sort key, converting integers to fixed-length strings.\n\n    Args:\n        projects (list): List of Project instances.\n        sort_key (str): Attribute name to sort the projects by.\n\n    Returns:\n        list: Sorted list of projects.\n    \"\"\"\n\n    # Define the function to determine the sorting value\n    def get_sort_value(proj):\n        attr = getattr(proj, sort_key, None)\n\n        # Handle None values; place them at the end of the sorted list\n        if attr is None:\n            return \" \"  # Assuming you want None values to appear last\n\n        # Convert integers to zero-padded strings, and others to strings\n        if isinstance(attr, int):\n            return f\"{attr:010d}\"  # Zero-pad to 10 digits\n        else:\n            return str(attr).lower()\n\n    # Determine if sorting should be in reverse\n    reverse_sort = sort_key in [\"stars\", \"downloads\", \"component_count\"]\n\n    return sorted(projects, key=get_sort_value, reverse=reverse_sort)\n</code></pre>"},{"location":"#ngwidgets.projects.Projects.update","title":"<code>update(progress_bar=None, limit_github=None, limit_pypi=None)</code>","text":"<p>Update the list of projects by retrieving potential projects from PyPI and GitHub based on the topic.</p> <p>Parameters:</p> Name Type Description Default <code>progress_bar</code> <code>Optional[Progressbar]</code> <p>A progress bar instance to update during the process.</p> <code>None</code> <code>limit_github</code> <code>Optional[int]</code> <p>If set, limit the maximum number of GitHub projects to retrieve.</p> <code>None</code> <code>limit_pypi</code> <code>Optional[int]</code> <p>If set, limit the maximum number of PyPI projects to retrieve.</p> <code>None</code> Source code in <code>ngwidgets/projects.py</code> <pre><code>def update(\n    self,\n    progress_bar: Optional[Progressbar] = None,\n    limit_github: Optional[int] = None,\n    limit_pypi: Optional[int] = None,\n):\n    \"\"\"\n    Update the list of projects by retrieving potential projects from PyPI and GitHub based on the topic.\n\n    Args:\n        progress_bar (Optional[Progressbar]): A progress bar instance to update during the process.\n        limit_github (Optional[int]): If set, limit the maximum number of GitHub projects to retrieve.\n        limit_pypi (Optional[int]): If set, limit the maximum number of PyPI projects to retrieve.\n    \"\"\"\n    # Initialize progress bar if provided\n    if progress_bar:\n        cached_projects = self.load()\n        progress_bar.total = len(cached_projects)\n        progress_bar.reset()\n        progress_bar.set_description(\"Updating projects\")\n\n    # pypi access\n    pypi = PyPi()\n\n    # Fetch projects from PyPI\n    pypi_projects = pypi.search_projects(self.topic)\n    # Apply limit to the PyPI projects\n    if limit_pypi is not None:\n        pypi_projects = pypi_projects[:limit_pypi]\n    # Fetch repositories from GitHub\n    github_access = GitHubAccess(self.default_directory)\n    query = self.topic\n    repo_dict = github_access.search_repositories(query)\n    # Apply limit to the GitHub repositories\n    if limit_github is not None:\n        repo_dict = dict(list(repo_dict.items())[:limit_github])\n    total = len(repo_dict) + len(pypi_projects)\n    if progress_bar:\n        progress_bar.total = total\n\n    projects_by_github_url = self.get_github_projects(repo_dict, progress_bar)\n    self.projects = list(projects_by_github_url.values())\n\n    # Merge PyPI projects into the GitHub projects\n    for pypi in pypi_projects:\n        matched_project = None  # Reset for each PyPI project\n        if pypi.github:\n            for github_url in projects_by_github_url.keys():\n                if pypi.github.startswith(github_url):\n                    matched_project = projects_by_github_url[github_url]\n            if matched_project:\n                matched_project.merge_pypi(pypi)\n            else:\n                # we have github url but it was not in our search list\n                # check the gitub repo for more details\n                repo_name = self.extract_repo_name_from_url(pypi.github)\n                if not repo_name:\n                    raise ValueError(\n                        f\"Can't determine repo_name for {pypi.github} of pypi package {pypi.package}\"\n                    )\n                # Create a Project instance from GitHub\n                repo = github_access.github.get_repo(repo_name)\n                github_comp = Project.from_github(repo)\n                # Merge PyPI data into the newly created GitHub project\n                github_comp.merge_pypi(pypi)\n                self.projects.append(github_comp)\n        else:\n            # PyPI project without a GitHub URL\n            self.projects.append(pypi)\n        if progress_bar:\n            progress_bar.update(1)\n    # sort projects by name\n    self.projects = sorted(\n        self.projects, key=lambda comp: comp.name.lower() if comp.name else \"\"\n    )\n    self.last_update_time = datetime.now()\n</code></pre>"},{"location":"#ngwidgets.projects.PyPi","title":"<code>PyPi</code>","text":"<p>Wrapper class for interacting with PyPI, including search functionality.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>class PyPi:\n    \"\"\"\n    Wrapper class for interacting with PyPI, including search functionality.\n    \"\"\"\n\n    def __init__(self, debug: bool = False):\n        self.base_url = \"https://pypi.org/pypi\"\n        self.debug = debug\n\n    def search_projects(self, term: str, limit: int = None) -&gt; List[Project]:\n        \"\"\"\n        Search for packages on PyPI and return them as Project instances.\n\n        Args:\n            term (str): The search term.\n            limit (int, optional): Maximum number of results to return.\n\n        Returns:\n            List[Project]: A list of Project instances representing the search results.\n        \"\"\"\n        package_dicts = self.search_packages(term, limit)\n        return [Project.from_pypi(pkg) for pkg in package_dicts]\n\n    def get_package_info(self, package_name: str) -&gt; dict:\n        \"\"\"\n        Get detailed information about a package from PyPI using urllib.\n\n        Args:\n            package_name (str): The name of the package to retrieve information for.\n\n        Returns:\n            dict: A dictionary containing package information.\n\n        Raises:\n            urllib.error.URLError: If there is an issue with the URL.\n            ValueError: If the response status code is not 200.\n        \"\"\"\n        url = f\"{self.base_url}/{package_name}/json\"\n\n        response = urllib.request.urlopen(url)\n\n        if response.getcode() != 200:\n            raise ValueError(\n                f\"Failed to fetch package info for {package_name}. Status code: {response.getcode()}\"\n            )\n\n        package_data = json.loads(response.read())\n\n        return package_data\n\n    def search_packages(self, term: str, limit: int = None) -&gt; list:\n        \"\"\"Search a package in the pypi repositories and retrieve detailed package information.\n\n        Args:\n            term (str): The search term.\n            limit (int, optional): Maximum number of results to return.\n\n        Returns:\n            List[Dict]: A list of dictionaries containing detailed package information.\n\n                see https://raw.githubusercontent.com/shubhodeep9/pipsearch/master/pipsearch/api.py\n        \"\"\"\n        # Constructing a search URL and sending the request\n        url = \"https://pypi.org/search/?q=\" + term\n        try:\n            response = urllib.request.urlopen(url)\n            text = response.read()\n        except Exception as e:\n            raise e\n\n        soup = BeautifulSoup(text, \"html.parser\")\n        packagestable = soup.find(\"ul\", {\"class\": \"unstyled\"})\n        # Constructing the result list\n        packages = []\n\n        # If no package exists then there is no table displayed hence soup.table will be None\n        if packagestable is None:\n            return packages\n\n        packagerows: ResultSet[Tag] = packagestable.findAll(\"li\")\n\n        if self.debug:\n            print(f\"found len{packagerows} package rows\")\n        if limit:\n            selected_rows = packagerows[:limit]\n        else:\n            selected_rows = packagerows\n        for package in selected_rows:\n            nameSelector = package.find(\"span\", {\"class\": \"package-snippet__name\"})\n            if nameSelector is None:\n                continue\n            name = nameSelector.text\n\n            link = \"\"\n            if package.a is not None:\n                href = package.a[\"href\"]\n                if isinstance(href, list):\n                    href = href[0]\n                link = \"https://pypi.org\" + href\n\n            description = (\n                package.find(\"p\", {\"class\": \"package-snippet__description\"}) or Tag()\n            ).text\n\n            version = (\n                package.find(\"span\", {\"class\": \"package-snippet__version\"}) or Tag()\n            ).text\n            package_info = self.get_package_info(name)\n            package_info[\"package_url\"] = link\n            packages.append(package_info)\n\n        # returning the result list back\n        return packages\n</code></pre>"},{"location":"#ngwidgets.projects.PyPi.get_package_info","title":"<code>get_package_info(package_name)</code>","text":"<p>Get detailed information about a package from PyPI using urllib.</p> <p>Parameters:</p> Name Type Description Default <code>package_name</code> <code>str</code> <p>The name of the package to retrieve information for.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing package information.</p> <p>Raises:</p> Type Description <code>URLError</code> <p>If there is an issue with the URL.</p> <code>ValueError</code> <p>If the response status code is not 200.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def get_package_info(self, package_name: str) -&gt; dict:\n    \"\"\"\n    Get detailed information about a package from PyPI using urllib.\n\n    Args:\n        package_name (str): The name of the package to retrieve information for.\n\n    Returns:\n        dict: A dictionary containing package information.\n\n    Raises:\n        urllib.error.URLError: If there is an issue with the URL.\n        ValueError: If the response status code is not 200.\n    \"\"\"\n    url = f\"{self.base_url}/{package_name}/json\"\n\n    response = urllib.request.urlopen(url)\n\n    if response.getcode() != 200:\n        raise ValueError(\n            f\"Failed to fetch package info for {package_name}. Status code: {response.getcode()}\"\n        )\n\n    package_data = json.loads(response.read())\n\n    return package_data\n</code></pre>"},{"location":"#ngwidgets.projects.PyPi.search_packages","title":"<code>search_packages(term, limit=None)</code>","text":"<p>Search a package in the pypi repositories and retrieve detailed package information.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>str</code> <p>The search term.</p> required <code>limit</code> <code>int</code> <p>Maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>list</code> <p>List[Dict]: A list of dictionaries containing detailed package information.</p> <p>see https://raw.githubusercontent.com/shubhodeep9/pipsearch/master/pipsearch/api.py</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def search_packages(self, term: str, limit: int = None) -&gt; list:\n    \"\"\"Search a package in the pypi repositories and retrieve detailed package information.\n\n    Args:\n        term (str): The search term.\n        limit (int, optional): Maximum number of results to return.\n\n    Returns:\n        List[Dict]: A list of dictionaries containing detailed package information.\n\n            see https://raw.githubusercontent.com/shubhodeep9/pipsearch/master/pipsearch/api.py\n    \"\"\"\n    # Constructing a search URL and sending the request\n    url = \"https://pypi.org/search/?q=\" + term\n    try:\n        response = urllib.request.urlopen(url)\n        text = response.read()\n    except Exception as e:\n        raise e\n\n    soup = BeautifulSoup(text, \"html.parser\")\n    packagestable = soup.find(\"ul\", {\"class\": \"unstyled\"})\n    # Constructing the result list\n    packages = []\n\n    # If no package exists then there is no table displayed hence soup.table will be None\n    if packagestable is None:\n        return packages\n\n    packagerows: ResultSet[Tag] = packagestable.findAll(\"li\")\n\n    if self.debug:\n        print(f\"found len{packagerows} package rows\")\n    if limit:\n        selected_rows = packagerows[:limit]\n    else:\n        selected_rows = packagerows\n    for package in selected_rows:\n        nameSelector = package.find(\"span\", {\"class\": \"package-snippet__name\"})\n        if nameSelector is None:\n            continue\n        name = nameSelector.text\n\n        link = \"\"\n        if package.a is not None:\n            href = package.a[\"href\"]\n            if isinstance(href, list):\n                href = href[0]\n            link = \"https://pypi.org\" + href\n\n        description = (\n            package.find(\"p\", {\"class\": \"package-snippet__description\"}) or Tag()\n        ).text\n\n        version = (\n            package.find(\"span\", {\"class\": \"package-snippet__version\"}) or Tag()\n        ).text\n        package_info = self.get_package_info(name)\n        package_info[\"package_url\"] = link\n        packages.append(package_info)\n\n    # returning the result list back\n    return packages\n</code></pre>"},{"location":"#ngwidgets.projects.PyPi.search_projects","title":"<code>search_projects(term, limit=None)</code>","text":"<p>Search for packages on PyPI and return them as Project instances.</p> <p>Parameters:</p> Name Type Description Default <code>term</code> <code>str</code> <p>The search term.</p> required <code>limit</code> <code>int</code> <p>Maximum number of results to return.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Project]</code> <p>List[Project]: A list of Project instances representing the search results.</p> Source code in <code>ngwidgets/projects.py</code> <pre><code>def search_projects(self, term: str, limit: int = None) -&gt; List[Project]:\n    \"\"\"\n    Search for packages on PyPI and return them as Project instances.\n\n    Args:\n        term (str): The search term.\n        limit (int, optional): Maximum number of results to return.\n\n    Returns:\n        List[Project]: A list of Project instances representing the search results.\n    \"\"\"\n    package_dicts = self.search_packages(term, limit)\n    return [Project.from_pypi(pkg) for pkg in package_dicts]\n</code></pre>"},{"location":"#ngwidgets.projects_view","title":"<code>projects_view</code>","text":"<p>Created on 2023-15-12</p> <p>This module, developed as part of the ngwidgets package under the instruction of WF, provides classes for displaying software projects in a NiceGUI application. It defines the <code>ProjectView</code> class for rendering a single project and the <code>ProjectsView</code> class for managing a collection of <code>ProjectView</code> instances in a searchable and sortable card layout.</p> <p>see https://github.com/WolfgangFahl/nicegui_widgets/issues/50</p> <p>The implementation is inspired by a Streamlit application, as analyzed from a provided screenshot, which includes UI elements such as a date picker widget, package metadata display, and installation command. These will be recreated using NiceGUI's elements such as <code>ui.date_picker()</code>, <code>ui.label()</code>, <code>ui.link()</code>, <code>ui.card()</code>, <code>ui.text()</code>, and <code>ui.input()</code> for a similar user experience.</p> <p>For details on the original Streamlit implementation, refer to: https://raw.githubusercontent.com/jrieke/projects-hub/main/streamlit_app.py</p> <p>Prompts for LLM: - Incorporate the Project and Projects classes from ngwidgets into NiceGUI. - Implement the setup method for ProjectView to render project details in a UI card. - Implement the setup method for ProjectsView to manage a searchable and sortable display of projects. - Adapt the webserver class from ngwidgets to use ProjectsView for displaying projects.</p> <p>Main author: OpenAI's language model (instructed by WF)</p>"},{"location":"#ngwidgets.projects_view.ProjectView","title":"<code>ProjectView</code>","text":"<p>display a single project</p> Source code in <code>ngwidgets/projects_view.py</code> <pre><code>class ProjectView:\n    \"\"\"\n    display a single project\n    \"\"\"\n\n    def __init__(self, project: Project):\n        self.project = project\n\n    def setup(self, container) -&gt; ui.card:\n        \"\"\"\n        setup a card for my project\n        \"\"\"\n        with container:\n            self.card = ui.card()\n            with self.card:\n                with ui.row().classes(\"flex w-full items-center\"):\n                    # Title\n                    title = f\"{self.project.name}\"\n                    if self.project.version:\n                        title = f\"{title} - {self.project.version}\"\n                    ui.label(title).classes(\"text-2xl\")\n                    if self.project.stars:\n                        # Flexible space to push stars to the right\n                        ui.label(\"\").classes(\"flex-grow\")\n                        star_rating = math.ceil(math.log10(self.project.stars + 0.5))\n                        star_rating = min(star_rating, 5)\n                        github_stars = f\"{'\u2b50'*star_rating}\ufe0f {self.project.stars}\"\n                        ui.label(github_stars).classes(\"text-xl ml-auto\")\n                columns = 4 if self.project.components_url else 3\n                self.card_grid = ui.grid(columns=columns)\n                with self.card_grid:\n                    if self.project.pypi:\n                        pypi_icon = \"&lt;img src='https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/PyPI_logo.svg/64px-PyPI_logo.svg.png' alt='pypi' title='pypi'/&gt;\"\n                        pypi_link = Link.create(\n                            self.project.pypi, f\"{pypi_icon}{self.project.package}\"\n                        )\n                        html_markup = pypi_link\n                        self.pypi_html = ui.html(html_markup)\n                    if self.project.github:\n                        github_icon = \"&lt;img src='https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Octicons-mark-github.svg/32px-Octicons-mark-github.svg.png' alt='github' title='github'/&gt;\"\n                        github_name = self.project.github_repo_name\n                        github_html_markup = f\"{github_icon}{github_name}\"\n                        github_link = Link.create(\n                            self.project.github, github_html_markup\n                        )\n                        html_markup = f\"{github_link}\"\n                        self.github_html = ui.html(html_markup)\n                        html_markup = \"\"\n                        if self.project.github_author:\n                            author = self.project.github_author\n                            author_url = f\"https://github.com/{author}\"\n                            if self.project.avatar:\n                                avatar_icon = f\"&lt;img src='{self.project.avatar}' alt='{author}' title='{author}' style='width: 40px; height: 40px; border-radius: 50%;'/&gt;\"\n                            else:\n                                avatar_icon = author\n                            author_link = Link.create(\n                                author_url, f\"{avatar_icon}{author}\"\n                            )\n                            html_markup = f\"{author_link}\"\n                        self.project_html = ui.html(html_markup)\n                        # components (if any)\n                        html_markup = \"\"\n                        if self.project.components_url:\n                            components = self.project.get_components()\n                            components_count = len(\n                                components.components\n                            )  # Assuming get_components returns a list\n                            components_icon = \"&lt;img src='https://upload.wikimedia.org/wikipedia/commons/thumb/1/11/Octicons-puzzle.svg/32px-Octicons-puzzle.svg.png' alt='components' title='components'/&gt;\"\n                            components_restful_url = (\n                                f\"/components/{self.project.solution_id}\"\n                            )\n                            components_link = Link.create(\n                                components_restful_url, components_icon\n                            )\n                            html_markup += f\" {components_link} {components_count}\"\n                            self.components_html = ui.html(html_markup)\n                html_markup = \"\"\n                if self.project.pypi:\n                    if self.project.pypi_description:\n                        html_markup = f\"\"\"&lt;strong&gt;{self.project.package}&lt;/strong&gt;:\n            &lt;span&gt;{self.project.pypi_description}&lt;/span&gt;\"\"\"\n                    inst_html = f\"&lt;pre&gt;{self.project.install_instructions}&lt;/pre&gt;\"\n                    html_markup = f\"{html_markup}\\n{inst_html}\"\n\n                self.desc_html = ui.html(html_markup)\n            return self.card\n</code></pre>"},{"location":"#ngwidgets.projects_view.ProjectView.setup","title":"<code>setup(container)</code>","text":"<p>setup a card for my project</p> Source code in <code>ngwidgets/projects_view.py</code> <pre><code>def setup(self, container) -&gt; ui.card:\n    \"\"\"\n    setup a card for my project\n    \"\"\"\n    with container:\n        self.card = ui.card()\n        with self.card:\n            with ui.row().classes(\"flex w-full items-center\"):\n                # Title\n                title = f\"{self.project.name}\"\n                if self.project.version:\n                    title = f\"{title} - {self.project.version}\"\n                ui.label(title).classes(\"text-2xl\")\n                if self.project.stars:\n                    # Flexible space to push stars to the right\n                    ui.label(\"\").classes(\"flex-grow\")\n                    star_rating = math.ceil(math.log10(self.project.stars + 0.5))\n                    star_rating = min(star_rating, 5)\n                    github_stars = f\"{'\u2b50'*star_rating}\ufe0f {self.project.stars}\"\n                    ui.label(github_stars).classes(\"text-xl ml-auto\")\n            columns = 4 if self.project.components_url else 3\n            self.card_grid = ui.grid(columns=columns)\n            with self.card_grid:\n                if self.project.pypi:\n                    pypi_icon = \"&lt;img src='https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/PyPI_logo.svg/64px-PyPI_logo.svg.png' alt='pypi' title='pypi'/&gt;\"\n                    pypi_link = Link.create(\n                        self.project.pypi, f\"{pypi_icon}{self.project.package}\"\n                    )\n                    html_markup = pypi_link\n                    self.pypi_html = ui.html(html_markup)\n                if self.project.github:\n                    github_icon = \"&lt;img src='https://upload.wikimedia.org/wikipedia/commons/thumb/9/91/Octicons-mark-github.svg/32px-Octicons-mark-github.svg.png' alt='github' title='github'/&gt;\"\n                    github_name = self.project.github_repo_name\n                    github_html_markup = f\"{github_icon}{github_name}\"\n                    github_link = Link.create(\n                        self.project.github, github_html_markup\n                    )\n                    html_markup = f\"{github_link}\"\n                    self.github_html = ui.html(html_markup)\n                    html_markup = \"\"\n                    if self.project.github_author:\n                        author = self.project.github_author\n                        author_url = f\"https://github.com/{author}\"\n                        if self.project.avatar:\n                            avatar_icon = f\"&lt;img src='{self.project.avatar}' alt='{author}' title='{author}' style='width: 40px; height: 40px; border-radius: 50%;'/&gt;\"\n                        else:\n                            avatar_icon = author\n                        author_link = Link.create(\n                            author_url, f\"{avatar_icon}{author}\"\n                        )\n                        html_markup = f\"{author_link}\"\n                    self.project_html = ui.html(html_markup)\n                    # components (if any)\n                    html_markup = \"\"\n                    if self.project.components_url:\n                        components = self.project.get_components()\n                        components_count = len(\n                            components.components\n                        )  # Assuming get_components returns a list\n                        components_icon = \"&lt;img src='https://upload.wikimedia.org/wikipedia/commons/thumb/1/11/Octicons-puzzle.svg/32px-Octicons-puzzle.svg.png' alt='components' title='components'/&gt;\"\n                        components_restful_url = (\n                            f\"/components/{self.project.solution_id}\"\n                        )\n                        components_link = Link.create(\n                            components_restful_url, components_icon\n                        )\n                        html_markup += f\" {components_link} {components_count}\"\n                        self.components_html = ui.html(html_markup)\n            html_markup = \"\"\n            if self.project.pypi:\n                if self.project.pypi_description:\n                    html_markup = f\"\"\"&lt;strong&gt;{self.project.package}&lt;/strong&gt;:\n        &lt;span&gt;{self.project.pypi_description}&lt;/span&gt;\"\"\"\n                inst_html = f\"&lt;pre&gt;{self.project.install_instructions}&lt;/pre&gt;\"\n                html_markup = f\"{html_markup}\\n{inst_html}\"\n\n            self.desc_html = ui.html(html_markup)\n        return self.card\n</code></pre>"},{"location":"#ngwidgets.projects_view.ProjectsView","title":"<code>ProjectsView</code>","text":"<p>display the available projects as rows and columns sorted by user preference (default: stars) and allows to search/filter</p> Source code in <code>ngwidgets/projects_view.py</code> <pre><code>class ProjectsView:\n    \"\"\"\n    display the available projects as rows and columns\n    sorted by user preference (default: stars) and allows to search/filter\n    \"\"\"\n\n    def __init__(self, webserver: \"InputWebserver\", projects: Projects = None):\n        \"\"\"Initialize the ProjectsView with an optional collection of Projects.\n\n        Args:\n            webserver (InputWebserver): The webserver that serves the projects.\n            projects (Projects): The collection of software projects. If None, projects are loaded from storage.\n        \"\"\"\n        self.webserver = webserver\n        if projects is None:\n            projects = Projects(topic=\"nicegui\")\n            projects.load()\n        self.projects = projects\n        self.sorting = \"stars\"  # Set the default sorting method to \"Stars\"\n        self.cards_container = None\n        self.setup()\n\n    def setup(self):\n        \"\"\"Set up the UI elements to render the collection of projects as a searchable and sortable card layout in NiceGUI.\"\"\"\n        with ui.row():\n            self.last_update_label = ui.label()\n            self.update_button = ui.button(\"Update\", on_click=self.update_projects)\n            self.update_last_update_label()\n            self.progress_bar = NiceguiProgressbar(\n                total=100, desc=\"updating projects\", unit=\"projects\"\n            )\n\n        with ui.row():\n            # Filter input for searching projects\n            self.filter_input = ui.input(\n                placeholder=\"Search projects...\", on_change=self.update_view\n            )\n        # Radio buttons for sorting\n        sort_options = {\n            \"stars\": \"Stars\",\n            \"name\": \"Name\",\n            \"component_count\": \"Component Count\",\n            \"github_owner\": \"Owner\",\n        }\n        with ui.row():\n            ui.label(\"Sort by:\")\n            self.sort_radio_group = (\n                ui.radio(options=sort_options, on_change=self.update_view)\n                .props(\"inline\")\n                .bind_value(self, \"sorting\")\n            )\n\n        # Project cards container\n        self.cards_container = ui.grid(columns=4)\n        self.views = {}\n        # Initially display all projects\n        self.update_view()\n\n    def update_view(self):\n        \"\"\"Update the view to render the filtered and sorted projects.\"\"\"\n        if not self.cards_container:\n            return\n        search_term = self.filter_input.value.lower()\n        if search_term:\n            filtered_projects = [\n                comp\n                for comp in self.projects.projects\n                if search_term in comp.name.lower()\n            ]\n        else:\n            # Include all projects if search term is empty\n            filtered_projects = self.projects.projects\n\n        # Clear the current cards container\n        self.cards_container.clear()\n        if self.sorting:\n            sorted_projects = self.projects.sort_projects(\n                filtered_projects, self.sorting\n            )\n        else:\n            sorted_projects = filtered_projects\n        # Create a card for each project\n        for project in sorted_projects:\n            cv = ProjectView(project)\n            self.views[project.name] = cv\n            cv.setup(self.cards_container)\n\n    async def update_projects(self, p):\n        \"\"\"\n        update the projects\n        \"\"\"\n        # avoid multiple background runs\n        self.update_button.disable()\n        ui.notify(\"Updating projects ... this might take a few seconds\")\n\n        await run.io_bound(self.projects.update, progress_bar=self.progress_bar)\n        await run.io_bound(self.projects.save)\n\n        # Notify the user after completion (optional)\n        ui.notify(\"Projects updated successfully.\")\n        self.update_last_update_label()\n\n    def update_last_update_label(self):\n        \"\"\"Update the label showing the last update time.\"\"\"\n        min_to_wait = 60  # Set the waiting time in minutes\n        if self.projects.last_update_time:\n            last_update_str = self.projects.last_update_time.strftime(\n                \"%Y-%m-%d %H:%M:%S\"\n            )\n            self.last_update_label.set_text(f\"Last Update: {last_update_str}\")\n            # Enable or disable the refresh button based on the GitHub API limits\n            elapsed = datetime.now() - self.projects.last_update_time\n            if elapsed &lt; timedelta(minutes=min_to_wait):  # 60 calls per day?\n                self.update_button.disable()\n                # Calculate remaining minutes until the next update is possible\n                remaining_time = timedelta(minutes=min_to_wait) - elapsed\n                # Round up to the nearest whole minute\n                minutes_until_next_update = math.ceil(\n                    remaining_time.total_seconds() / 60\n                )\n\n                # Update the tooltip with the remaining minutes\n                self.update_button.tooltip(\n                    f\"{minutes_until_next_update} min until enabled\"\n                )\n\n            else:\n                self.update_button.enable()\n                self.update_button.tooltip(\"updating might take a few seconds\")\n        else:\n            self.last_update_label.set_text(\"Last Update: Not yet updated\")\n</code></pre>"},{"location":"#ngwidgets.projects_view.ProjectsView.__init__","title":"<code>__init__(webserver, projects=None)</code>","text":"<p>Initialize the ProjectsView with an optional collection of Projects.</p> <p>Parameters:</p> Name Type Description Default <code>webserver</code> <code>InputWebserver</code> <p>The webserver that serves the projects.</p> required <code>projects</code> <code>Projects</code> <p>The collection of software projects. If None, projects are loaded from storage.</p> <code>None</code> Source code in <code>ngwidgets/projects_view.py</code> <pre><code>def __init__(self, webserver: \"InputWebserver\", projects: Projects = None):\n    \"\"\"Initialize the ProjectsView with an optional collection of Projects.\n\n    Args:\n        webserver (InputWebserver): The webserver that serves the projects.\n        projects (Projects): The collection of software projects. If None, projects are loaded from storage.\n    \"\"\"\n    self.webserver = webserver\n    if projects is None:\n        projects = Projects(topic=\"nicegui\")\n        projects.load()\n    self.projects = projects\n    self.sorting = \"stars\"  # Set the default sorting method to \"Stars\"\n    self.cards_container = None\n    self.setup()\n</code></pre>"},{"location":"#ngwidgets.projects_view.ProjectsView.setup","title":"<code>setup()</code>","text":"<p>Set up the UI elements to render the collection of projects as a searchable and sortable card layout in NiceGUI.</p> Source code in <code>ngwidgets/projects_view.py</code> <pre><code>def setup(self):\n    \"\"\"Set up the UI elements to render the collection of projects as a searchable and sortable card layout in NiceGUI.\"\"\"\n    with ui.row():\n        self.last_update_label = ui.label()\n        self.update_button = ui.button(\"Update\", on_click=self.update_projects)\n        self.update_last_update_label()\n        self.progress_bar = NiceguiProgressbar(\n            total=100, desc=\"updating projects\", unit=\"projects\"\n        )\n\n    with ui.row():\n        # Filter input for searching projects\n        self.filter_input = ui.input(\n            placeholder=\"Search projects...\", on_change=self.update_view\n        )\n    # Radio buttons for sorting\n    sort_options = {\n        \"stars\": \"Stars\",\n        \"name\": \"Name\",\n        \"component_count\": \"Component Count\",\n        \"github_owner\": \"Owner\",\n    }\n    with ui.row():\n        ui.label(\"Sort by:\")\n        self.sort_radio_group = (\n            ui.radio(options=sort_options, on_change=self.update_view)\n            .props(\"inline\")\n            .bind_value(self, \"sorting\")\n        )\n\n    # Project cards container\n    self.cards_container = ui.grid(columns=4)\n    self.views = {}\n    # Initially display all projects\n    self.update_view()\n</code></pre>"},{"location":"#ngwidgets.projects_view.ProjectsView.update_last_update_label","title":"<code>update_last_update_label()</code>","text":"<p>Update the label showing the last update time.</p> Source code in <code>ngwidgets/projects_view.py</code> <pre><code>def update_last_update_label(self):\n    \"\"\"Update the label showing the last update time.\"\"\"\n    min_to_wait = 60  # Set the waiting time in minutes\n    if self.projects.last_update_time:\n        last_update_str = self.projects.last_update_time.strftime(\n            \"%Y-%m-%d %H:%M:%S\"\n        )\n        self.last_update_label.set_text(f\"Last Update: {last_update_str}\")\n        # Enable or disable the refresh button based on the GitHub API limits\n        elapsed = datetime.now() - self.projects.last_update_time\n        if elapsed &lt; timedelta(minutes=min_to_wait):  # 60 calls per day?\n            self.update_button.disable()\n            # Calculate remaining minutes until the next update is possible\n            remaining_time = timedelta(minutes=min_to_wait) - elapsed\n            # Round up to the nearest whole minute\n            minutes_until_next_update = math.ceil(\n                remaining_time.total_seconds() / 60\n            )\n\n            # Update the tooltip with the remaining minutes\n            self.update_button.tooltip(\n                f\"{minutes_until_next_update} min until enabled\"\n            )\n\n        else:\n            self.update_button.enable()\n            self.update_button.tooltip(\"updating might take a few seconds\")\n    else:\n        self.last_update_label.set_text(\"Last Update: Not yet updated\")\n</code></pre>"},{"location":"#ngwidgets.projects_view.ProjectsView.update_projects","title":"<code>update_projects(p)</code>  <code>async</code>","text":"<p>update the projects</p> Source code in <code>ngwidgets/projects_view.py</code> <pre><code>async def update_projects(self, p):\n    \"\"\"\n    update the projects\n    \"\"\"\n    # avoid multiple background runs\n    self.update_button.disable()\n    ui.notify(\"Updating projects ... this might take a few seconds\")\n\n    await run.io_bound(self.projects.update, progress_bar=self.progress_bar)\n    await run.io_bound(self.projects.save)\n\n    # Notify the user after completion (optional)\n    ui.notify(\"Projects updated successfully.\")\n    self.update_last_update_label()\n</code></pre>"},{"location":"#ngwidgets.projects_view.ProjectsView.update_view","title":"<code>update_view()</code>","text":"<p>Update the view to render the filtered and sorted projects.</p> Source code in <code>ngwidgets/projects_view.py</code> <pre><code>def update_view(self):\n    \"\"\"Update the view to render the filtered and sorted projects.\"\"\"\n    if not self.cards_container:\n        return\n    search_term = self.filter_input.value.lower()\n    if search_term:\n        filtered_projects = [\n            comp\n            for comp in self.projects.projects\n            if search_term in comp.name.lower()\n        ]\n    else:\n        # Include all projects if search term is empty\n        filtered_projects = self.projects.projects\n\n    # Clear the current cards container\n    self.cards_container.clear()\n    if self.sorting:\n        sorted_projects = self.projects.sort_projects(\n            filtered_projects, self.sorting\n        )\n    else:\n        sorted_projects = filtered_projects\n    # Create a card for each project\n    for project in sorted_projects:\n        cv = ProjectView(project)\n        self.views[project.name] = cv\n        cv.setup(self.cards_container)\n</code></pre>"},{"location":"#ngwidgets.tristate","title":"<code>tristate</code>","text":""},{"location":"#ngwidgets.tristate--tristatepy","title":"tristate.py","text":"<p>Created on 2023-12-10</p> <p>@author: WF @author: OpenAI Assistant (ChatGPT Version 4)</p> <p>This module provides a Tristate class for use in NiceGUI applications,  creating a tri-state toggle input that cycles through predefined icon sets.</p> <p>The implementation is inspired by examples and discussions from: - NiceGUI Custom Vue Component example: https://github.com/zauberzeug/nicegui/tree/main/examples/custom_vue_component - JSFiddle by WF: https://jsfiddle.net/wf_bitplan_com/941std72/8/ - Stack Overflow answer by WF: https://stackoverflow.com/a/27617418/1497139</p> <p>Prompts for Reproducing this Code: 1. \"Create a Python class Tristate in a module tristate for a NiceGUI component that serves as a tri-state toggle input.\" 2. \"Implement icon cycling within the Python class to handle state changes without relying on JavaScript logic.\" 3. \"Utilize Unicode icon sets within the Python class for the visual representation of each state.\" 4. \"Ensure the Python class handles the reactivity and updates the Vue component's props when the state changes.\" 5. \"Apply google style doc-strings and type hints for better code clarity and leverage black and isort for code formatting and import sorting.\" 6. \"Provide comprehensive documentation within the Python class to explain the functionality and usage of each method and property.\" 7. \"add proper authorship and iso-date of creation information in the module header\" 8. \"add a prompts for reproducing this code in the header comment section that will allow any proper LLM  to reproduce this code\" 9. \"Introduce an <code>update</code> method invocation within the state change logic to trigger a re-render of the component in NiceGUI. 10. \"add links to https://github.com/zauberzeug/nicegui/tree/main/examples/custom_vue_component, https://jsfiddle.net/wf_bitplan_com/941std72/8/ and https://stackoverflow.com/a/27617418/1497139 for proper reference\"  11. \"Include the following Unicode icon sets in the Tristate component for NiceGUI:  'arrows' with Left Arrow ('\u2190'), Up-Down Arrow ('\u2195\ufe0f'), and Right Arrow ('\u2192'); 'ballot' with Ballot Box ('\u2610'), Ballot Box with Check ('\u2611\ufe0f'), and Ballot Box with X ('\u2612\ufe0f'); 'check' with Checkbox ('\u2610'), Question Mark ('\u2754'), and Checkmark ('\u2714\ufe0f'); 'circles' with Circle ('\u2b58'), Bullseye ('\ud83c\udfaf'), and Fisheye ('\ud83d\udd18'); 'electrical' with Plug ('\ud83d\udd0c'), Battery Half ('\ud83d\udd0b'), and Lightning ('\u26a1'); 'faces' with Sad Face ('\u2639\ufe0f'), Neutral Face ('\ud83d\ude10'), and Happy Face ('\u263a\ufe0f'); 'hands' with Thumbs Down ('\ud83d\udc4e'), Hand ('\u270b'), and Thumbs Up ('\ud83d\udc4d'); 'hearts' with Empty Heart ('\u2661'), Half Heart ('\u2764\ufe0f'), and Full Heart ('\u2764\ufe0f'); 'locks' with Unlocked ('\ud83d\udd13'), Locked with Pen ('\ud83d\udd0f'), and Locked ('\ud83d\udd12'); 'marks' with Question Mark ('\u2753'), Check Mark ('\u2705'), and Cross Mark ('\u274c'); 'moons' with New Moon ('\ud83c\udf11'), Half Moon ('\ud83c\udf13'), and Full Moon ('\ud83c\udf15'); 'musical_notes' with Single Note ('\u266a'), Double Note ('\u266b'), and Multiple Notes ('\ud83c\udfb6'); 'stars' with Empty Star ('\u2606'), Half Star ('\u2605'), and Full Star ('\u2605'); 'traffic_lights' with Red ('\ud83d\udd34'), Yellow ('\ud83d\udfe1'), and Green ('\ud83d\udfe2'); 'weather' with Cloud ('\u2601\ufe0f'), Sun ('\u2600\ufe0f'), and Thunderstorm ('\u26c8\ufe0f').\"</p>"},{"location":"#ngwidgets.tristate.Tristate","title":"<code>Tristate</code>","text":"<p>               Bases: <code>Element</code></p> <p>A Tristate toggle component for NiceGUI.</p> <p>Attributes:</p> Name Type Description <code>icon_set</code> <code>str</code> <p>The name of the icon set to use.</p> <code>current_icon_index</code> <code>int</code> <p>The index of the current icon in the set.</p> <code>style</code> <code>str</code> <p>CSS styling for the input element.</p> Source code in <code>ngwidgets/tristate.py</code> <pre><code>class Tristate(Element, component=\"tristate.js\"):\n    \"\"\"\n    A Tristate toggle component for NiceGUI.\n\n    Attributes:\n        icon_set (str): The name of the icon set to use.\n        current_icon_index (int): The index of the current icon in the set.\n        style (str): CSS styling for the input element.\n    \"\"\"\n\n    ICON_SETS = {\n        \"arrows\": [\"\u2190\", \"\u2195\ufe0f\", \"\u2192\"],  # Left Arrow, Up-Down Arrow, Right Arrow\n        \"ballot\": [\n            \"\u2610\",\n            \"\u2611\ufe0f\",\n            \"\u2612\ufe0f\",\n        ],  # Ballot Box, Ballot Box with Check, Ballot Box with X\n        \"check\": [\"\u2610\", \"\u2754\", \"\u2714\ufe0f\"],  # Checkbox, Question Mark, Checkmark\n        \"circles\": [\"\u2b58\", \"\ud83c\udfaf\", \"\ud83d\udd18\"],  # Circle, Bullseye, Fisheye\n        \"electrical\": [\"\ud83d\udd0c\", \"\ud83d\udd0b\", \"\u26a1\"],  # Plug, Battery Half, Lightning\n        \"faces\": [\"\u2639\ufe0f\", \"\ud83d\ude10\", \"\u263a\ufe0f\"],  # Sad Face, Neutral Face, Happy Face\n        \"hands\": [\"\ud83d\udc4e\", \"\u270b\", \"\ud83d\udc4d\"],  # Thumbs Down, Hand, Thumbs Up\n        \"hearts\": [\"\u2661\", \"\u2764\ufe0f\", \"\u2764\ufe0f\"],  # Empty Heart, Half Heart, Full Heart\n        \"locks\": [\"\ud83d\udd13\", \"\ud83d\udd0f\", \"\ud83d\udd12\"],  # Unlocked, Locked with Pen, Locked\n        \"marks\": [\"\u2753\", \"\u2705\", \"\u274c\"],  # Question, Check, Cross\n        \"moons\": [\"\ud83c\udf11\", \"\ud83c\udf13\", \"\ud83c\udf15\"],  # New Moon, Half Moon, Full Moon\n        \"musical_notes\": [\"\u266a\", \"\u266b\", \"\ud83c\udfb6\"],  # Single Note, Double Note, Multiple Notes\n        \"stars\": [\"\u2606\", \"\u2605\", \"\u2605\"],  # Empty Star, Half Star, Full Star\n        \"traffic_lights\": [\"\ud83d\udd34\", \"\ud83d\udfe1\", \"\ud83d\udfe2\"],  # Red, Yellow, Green\n        \"weather\": [\"\u2601\ufe0f\", \"\u2600\ufe0f\", \"\u26c8\ufe0f\"],  # Cloud, Sun, Thunderstorm\n    }\n\n    def __init__(\n        self,\n        icon_set_name: str = \"marks\",\n        style: str = \"border: none;\",\n        on_change: Optional[Callable] = None,\n    ) -&gt; None:\n        \"\"\"\n        Initializes the Tristate component.\n\n        Args:\n            icon_set_name (str): The name of the icon set to use. Default is 'marks'.\n            style (str): CSS styling for the input element. Default is 'border: none;'.\n            on_change (Optional[Callable]): Callback function for state changes.\n        \"\"\"\n        super().__init__()\n        self.icon_set_name = icon_set_name\n        self.icon_set = Tristate.ICON_SETS[icon_set_name]\n        self.current_icon_index = 0\n        self.style = style\n        self.user_on_change = on_change\n        self.on(\"change\", self.on_change)\n\n        self.update_props()\n\n    def on_change(self, _=None) -&gt; None:\n        \"\"\"Handles the change event, cycles the icon, and calls user-defined callback if any.\"\"\"\n        self.cycle_icon()\n        if self.user_on_change is not None:\n            self.user_on_change()\n\n    def cycle_icon(self, _=None) -&gt; None:\n        \"\"\"Cycles through the icons in the set and updates the component.\"\"\"\n        self.current_icon_index = (self.current_icon_index + 1) % len(self.icon_set)\n        self.update_props()\n\n    def update_props(self) -&gt; None:\n        \"\"\"Updates the component properties with the current icon and style.\"\"\"\n        self.utf8_icon = self.icon_set[self.current_icon_index]\n        self._props[\"value\"] = self.utf8_icon\n        self._props[\"style\"] = self.style\n        self.update()\n</code></pre>"},{"location":"#ngwidgets.tristate.Tristate.__init__","title":"<code>__init__(icon_set_name='marks', style='border: none;', on_change=None)</code>","text":"<p>Initializes the Tristate component.</p> <p>Parameters:</p> Name Type Description Default <code>icon_set_name</code> <code>str</code> <p>The name of the icon set to use. Default is 'marks'.</p> <code>'marks'</code> <code>style</code> <code>str</code> <p>CSS styling for the input element. Default is 'border: none;'.</p> <code>'border: none;'</code> <code>on_change</code> <code>Optional[Callable]</code> <p>Callback function for state changes.</p> <code>None</code> Source code in <code>ngwidgets/tristate.py</code> <pre><code>def __init__(\n    self,\n    icon_set_name: str = \"marks\",\n    style: str = \"border: none;\",\n    on_change: Optional[Callable] = None,\n) -&gt; None:\n    \"\"\"\n    Initializes the Tristate component.\n\n    Args:\n        icon_set_name (str): The name of the icon set to use. Default is 'marks'.\n        style (str): CSS styling for the input element. Default is 'border: none;'.\n        on_change (Optional[Callable]): Callback function for state changes.\n    \"\"\"\n    super().__init__()\n    self.icon_set_name = icon_set_name\n    self.icon_set = Tristate.ICON_SETS[icon_set_name]\n    self.current_icon_index = 0\n    self.style = style\n    self.user_on_change = on_change\n    self.on(\"change\", self.on_change)\n\n    self.update_props()\n</code></pre>"},{"location":"#ngwidgets.tristate.Tristate.cycle_icon","title":"<code>cycle_icon(_=None)</code>","text":"<p>Cycles through the icons in the set and updates the component.</p> Source code in <code>ngwidgets/tristate.py</code> <pre><code>def cycle_icon(self, _=None) -&gt; None:\n    \"\"\"Cycles through the icons in the set and updates the component.\"\"\"\n    self.current_icon_index = (self.current_icon_index + 1) % len(self.icon_set)\n    self.update_props()\n</code></pre>"},{"location":"#ngwidgets.tristate.Tristate.on_change","title":"<code>on_change(_=None)</code>","text":"<p>Handles the change event, cycles the icon, and calls user-defined callback if any.</p> Source code in <code>ngwidgets/tristate.py</code> <pre><code>def on_change(self, _=None) -&gt; None:\n    \"\"\"Handles the change event, cycles the icon, and calls user-defined callback if any.\"\"\"\n    self.cycle_icon()\n    if self.user_on_change is not None:\n        self.user_on_change()\n</code></pre>"},{"location":"#ngwidgets.tristate.Tristate.update_props","title":"<code>update_props()</code>","text":"<p>Updates the component properties with the current icon and style.</p> Source code in <code>ngwidgets/tristate.py</code> <pre><code>def update_props(self) -&gt; None:\n    \"\"\"Updates the component properties with the current icon and style.\"\"\"\n    self.utf8_icon = self.icon_set[self.current_icon_index]\n    self._props[\"value\"] = self.utf8_icon\n    self._props[\"style\"] = self.style\n    self.update()\n</code></pre>"},{"location":"#ngwidgets.users","title":"<code>users</code>","text":"<p>Created on 2023-08-15</p> <p>@author: wf</p>"},{"location":"#ngwidgets.users.Users","title":"<code>Users</code>","text":"<p>A class to manage user credentials stored in a JSON file.</p> <p>Attributes:</p> Name Type Description <code>dir_path</code> <code>str</code> <p>The directory path where the JSON file resides.</p> <code>file_path</code> <code>str</code> <p>The full path to the JSON file.</p> Source code in <code>ngwidgets/users.py</code> <pre><code>class Users:\n    \"\"\"\n    A class to manage user credentials stored in a JSON file.\n\n    Attributes:\n        dir_path (str): The directory path where the JSON file resides.\n        file_path (str): The full path to the JSON file.\n    \"\"\"\n\n    def __init__(self, path_str: str):\n        \"\"\"\n        Initialize the Users class and set file paths.\n        \"\"\"\n        self.dir_path = os.path.expanduser(path_str)\n        self.file_path = os.path.join(self.dir_path, \"users.json\")\n        self._ensure_directory_exists()\n\n    def _ensure_directory_exists(self):\n        \"\"\"Create the directory if it doesn't exist.\"\"\"\n        if not os.path.exists(self.dir_path):\n            os.makedirs(self.dir_path)\n\n    def save_password_data(self, data):\n        \"\"\"\n        Save user data to the JSON file.\n\n        Args:\n            data (dict): Dictionary containing username: password pairs.\n        \"\"\"\n        with open(self.file_path, \"w\") as file:\n            json.dump(data, file, indent=4)\n\n    def load_password_data(self):\n        \"\"\"\n        Load user data from the JSON file.\n\n        Returns:\n            dict: Dictionary containing username: password pairs.\n        \"\"\"\n        if os.path.exists(self.file_path):\n            with open(self.file_path, \"r\") as file:\n                return json.load(file)\n        return {}\n\n    def add_user(self, username, password):\n        \"\"\"\n        Add a new user with a hashed password to the data file.\n\n        Args:\n            username (str): The username of the new user.\n            password (str): The password for the new user.\n        \"\"\"\n        hashed_password = bcrypt.hashpw(\n            password.encode(\"utf-8\"), bcrypt.gensalt()\n        ).decode(\"utf-8\")\n        data = self.load_password_data()\n        data[username] = hashed_password\n        self.save_password_data(data)\n\n    def check_password(self, username, password):\n        \"\"\"\n        Validate a password against its hashed version.\n\n        Args:\n            username (str): The username of the user.\n            password (str): The password to check.\n\n        Returns:\n            bool: True if the password matches, False otherwise.\n        \"\"\"\n        data = self.load_password_data()\n        hashed_password = data.get(username)\n        if not hashed_password:\n            return False\n        ok = bcrypt.checkpw(password.encode(\"utf-8\"), hashed_password.encode(\"utf-8\"))\n        return ok\n</code></pre>"},{"location":"#ngwidgets.users.Users.__init__","title":"<code>__init__(path_str)</code>","text":"<p>Initialize the Users class and set file paths.</p> Source code in <code>ngwidgets/users.py</code> <pre><code>def __init__(self, path_str: str):\n    \"\"\"\n    Initialize the Users class and set file paths.\n    \"\"\"\n    self.dir_path = os.path.expanduser(path_str)\n    self.file_path = os.path.join(self.dir_path, \"users.json\")\n    self._ensure_directory_exists()\n</code></pre>"},{"location":"#ngwidgets.users.Users.add_user","title":"<code>add_user(username, password)</code>","text":"<p>Add a new user with a hashed password to the data file.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the new user.</p> required <code>password</code> <code>str</code> <p>The password for the new user.</p> required Source code in <code>ngwidgets/users.py</code> <pre><code>def add_user(self, username, password):\n    \"\"\"\n    Add a new user with a hashed password to the data file.\n\n    Args:\n        username (str): The username of the new user.\n        password (str): The password for the new user.\n    \"\"\"\n    hashed_password = bcrypt.hashpw(\n        password.encode(\"utf-8\"), bcrypt.gensalt()\n    ).decode(\"utf-8\")\n    data = self.load_password_data()\n    data[username] = hashed_password\n    self.save_password_data(data)\n</code></pre>"},{"location":"#ngwidgets.users.Users.check_password","title":"<code>check_password(username, password)</code>","text":"<p>Validate a password against its hashed version.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the user.</p> required <code>password</code> <code>str</code> <p>The password to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the password matches, False otherwise.</p> Source code in <code>ngwidgets/users.py</code> <pre><code>def check_password(self, username, password):\n    \"\"\"\n    Validate a password against its hashed version.\n\n    Args:\n        username (str): The username of the user.\n        password (str): The password to check.\n\n    Returns:\n        bool: True if the password matches, False otherwise.\n    \"\"\"\n    data = self.load_password_data()\n    hashed_password = data.get(username)\n    if not hashed_password:\n        return False\n    ok = bcrypt.checkpw(password.encode(\"utf-8\"), hashed_password.encode(\"utf-8\"))\n    return ok\n</code></pre>"},{"location":"#ngwidgets.users.Users.load_password_data","title":"<code>load_password_data()</code>","text":"<p>Load user data from the JSON file.</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>Dictionary containing username: password pairs.</p> Source code in <code>ngwidgets/users.py</code> <pre><code>def load_password_data(self):\n    \"\"\"\n    Load user data from the JSON file.\n\n    Returns:\n        dict: Dictionary containing username: password pairs.\n    \"\"\"\n    if os.path.exists(self.file_path):\n        with open(self.file_path, \"r\") as file:\n            return json.load(file)\n    return {}\n</code></pre>"},{"location":"#ngwidgets.users.Users.save_password_data","title":"<code>save_password_data(data)</code>","text":"<p>Save user data to the JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary containing username: password pairs.</p> required Source code in <code>ngwidgets/users.py</code> <pre><code>def save_password_data(self, data):\n    \"\"\"\n    Save user data to the JSON file.\n\n    Args:\n        data (dict): Dictionary containing username: password pairs.\n    \"\"\"\n    with open(self.file_path, \"w\") as file:\n        json.dump(data, file, indent=4)\n</code></pre>"},{"location":"#ngwidgets.version","title":"<code>version</code>","text":"<p>Created on 2023-09-12</p> <p>@author: wf</p>"},{"location":"#ngwidgets.version.Version","title":"<code>Version</code>","text":"<p>Version handling for nicegui widgets</p> Source code in <code>ngwidgets/version.py</code> <pre><code>@lod_storable\nclass Version:\n    \"\"\"\n    Version handling for nicegui widgets\n    \"\"\"\n\n    name = \"ngwidgets\"\n    version = ngwidgets.__version__\n    date = \"2023-09-10\"\n    updated = \"2024-07-31\"\n    description = \"NiceGUI widgets\"\n\n    authors = \"Wolfgang Fahl\"\n\n    doc_url = \"https://wiki.bitplan.com/index.php/Nicegui_widgets\"\n    chat_url = \"https://github.com/WolfgangFahl/nicegui_widgets/discussions\"\n    cm_url = \"https://github.com/WolfgangFahl/nicegui_widgets\"\n\n    license = f\"\"\"Copyright 2023-2024 contributors. All rights reserved.\n\n  Licensed under the Apache License 2.0\n  http://www.apache.org/licenses/LICENSE-2.0\n\n  Distributed on an \"AS IS\" basis without warranties\n  or conditions of any kind, either express or implied.\"\"\"\n\n    longDescription = f\"\"\"{name} version {version}\n{description}\n\n  Created by {authors} on {date} last updated {updated}\"\"\"\n</code></pre>"},{"location":"#ngwidgets.webserver","title":"<code>webserver</code>","text":"<p>Created on 2023-09-10</p> <p>@author: wf</p>"},{"location":"#ngwidgets.webserver.NiceGuiWebserver","title":"<code>NiceGuiWebserver</code>","text":"<p>               Bases: <code>object</code></p> <p>a basic NiceGuiWebserver</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>class NiceGuiWebserver(object):\n    \"\"\"\n    a basic NiceGuiWebserver\n    \"\"\"\n\n    def __init__(self, config: WebserverConfig = None):\n        \"\"\"\n        Constructor\n        \"\"\"\n        self.debug = False\n        self.do_trace = True\n        if config is None:\n            config = WebserverConfig()\n        self.config = config\n        self.app = core.app\n\n    async def page(self, client: Client, wanted_action: Callable, *args, **kwargs):\n        \"\"\"\n        Handle a page request for a specific client. This method ensures that a specific type of WebSolution\n        (or its subclass) is created for each client and used throughout the client's interaction.\n\n        Args:\n            client (Client): The client making the request.\n            wanted_action(Callable): The function of the solution to perform. Might be overriden so we check the solution_instance\n            *args, **kwargs: Additional arguments to pass to the action.\n\n        Returns:\n            The result of the action performed.\n        \"\"\"\n        solution_class = self.config.solution_class\n        if not solution_class:\n            raise TypeError(\"no solution_class configured\")\n        solution_instance = solution_class(self, client)\n\n        # Check if the solution_instance is an instance of solution_class or its subclass\n        if not isinstance(solution_instance, solution_class):\n            raise TypeError(\n                f\"solution_instance must be an instance of {solution_class.__name__} or its subclass, not {type(solution_instance).__name__}.\"\n            )\n\n        # Check if the action_callable is a method of solution_instance\n        if not callable(wanted_action) or not hasattr(\n            solution_instance, wanted_action.__name__\n        ):\n            raise AttributeError(\n                f\"The provided callable {wanted_action.__qualname__} is not a method of {solution_instance.__class__.__name__}.\"\n            )\n        # replace action by the one from the instance for inheritance handling\n        action = getattr(solution_instance, wanted_action.__name__)\n\n        await solution_instance.prepare()\n\n        # call any preparation code needed before the actual nicegui.ui calls\n        # are done\n        solution_instance.prepare_ui()\n\n        return await action(*args, **kwargs)\n\n    @classmethod\n    def optionalDebug(self, args):\n        \"\"\"\n        start the remote debugger if the arguments specify so\n\n        Args:\n            args(): The command line arguments\n        \"\"\"\n        if args.debugServer:\n            import pydevd\n            from pydevd_file_utils import setup_client_server_paths\n            print(\n                f\"remotePath: {args.debugRemotePath} localPath:{args.debugLocalPath}\",\n                flush=True,\n            )\n            if args.debugRemotePath and args.debugLocalPath:\n                MY_PATHS_FROM_ECLIPSE_TO_PYTHON = [\n                    (args.debugRemotePath, args.debugLocalPath),\n                ]\n                setup_client_server_paths(MY_PATHS_FROM_ECLIPSE_TO_PYTHON)\n                # os.environ[\"PATHS_FROM_ECLIPSE_TO_PYTHON\"]='[[\"%s\", \"%s\"]]' % (remotePath,localPath)\n                # print(\"trying to debug with PATHS_FROM_ECLIPSE_TO_PYTHON=%s\" % os.environ[\"PATHS_FROM_ECLIPSE_TO_PYTHON\"]);\n\n            pydevd.settrace(\n                args.debugServer,\n                port=args.debugPort,\n                stdoutToServer=True,\n                stderrToServer=True,\n            )\n            print(f\"command line args are: {str(sys.argv)}\")\n\n    def run(self, args):\n        \"\"\"\n        Runs the UI of the web server.\n\n        Args:\n            args (list): The command line arguments.\n        \"\"\"\n        self.args = args\n        self.debug = args.debug\n        self.optionalDebug(args)\n        # allow app specific configuration steps\n        self.configure_run()\n        ui.run(\n            title=self.config.version.name,\n            host=args.host,\n            port=args.port,\n            show=args.client,\n            reload=False,\n            storage_secret=self.config.storage_secret,\n        )\n\n    def configure_run(self):\n        \"\"\"\n        Configures specific before run steps of a web server.\n        This method is intended to be overridden\n        by subclasses to provide custom run behavior.\n        The base method does nothing and can be extended in subclasses.\n        \"\"\"\n        pass\n\n    def stop(self):\n        \"\"\"\n        stop the server\n        \"\"\"\n</code></pre>"},{"location":"#ngwidgets.webserver.NiceGuiWebserver.__init__","title":"<code>__init__(config=None)</code>","text":"<p>Constructor</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def __init__(self, config: WebserverConfig = None):\n    \"\"\"\n    Constructor\n    \"\"\"\n    self.debug = False\n    self.do_trace = True\n    if config is None:\n        config = WebserverConfig()\n    self.config = config\n    self.app = core.app\n</code></pre>"},{"location":"#ngwidgets.webserver.NiceGuiWebserver.configure_run","title":"<code>configure_run()</code>","text":"<p>Configures specific before run steps of a web server. This method is intended to be overridden by subclasses to provide custom run behavior. The base method does nothing and can be extended in subclasses.</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def configure_run(self):\n    \"\"\"\n    Configures specific before run steps of a web server.\n    This method is intended to be overridden\n    by subclasses to provide custom run behavior.\n    The base method does nothing and can be extended in subclasses.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"#ngwidgets.webserver.NiceGuiWebserver.optionalDebug","title":"<code>optionalDebug(args)</code>  <code>classmethod</code>","text":"<p>start the remote debugger if the arguments specify so</p> <p>Parameters:</p> Name Type Description Default <code>args()</code> <p>The command line arguments</p> required Source code in <code>ngwidgets/webserver.py</code> <pre><code>@classmethod\ndef optionalDebug(self, args):\n    \"\"\"\n    start the remote debugger if the arguments specify so\n\n    Args:\n        args(): The command line arguments\n    \"\"\"\n    if args.debugServer:\n        import pydevd\n        from pydevd_file_utils import setup_client_server_paths\n        print(\n            f\"remotePath: {args.debugRemotePath} localPath:{args.debugLocalPath}\",\n            flush=True,\n        )\n        if args.debugRemotePath and args.debugLocalPath:\n            MY_PATHS_FROM_ECLIPSE_TO_PYTHON = [\n                (args.debugRemotePath, args.debugLocalPath),\n            ]\n            setup_client_server_paths(MY_PATHS_FROM_ECLIPSE_TO_PYTHON)\n            # os.environ[\"PATHS_FROM_ECLIPSE_TO_PYTHON\"]='[[\"%s\", \"%s\"]]' % (remotePath,localPath)\n            # print(\"trying to debug with PATHS_FROM_ECLIPSE_TO_PYTHON=%s\" % os.environ[\"PATHS_FROM_ECLIPSE_TO_PYTHON\"]);\n\n        pydevd.settrace(\n            args.debugServer,\n            port=args.debugPort,\n            stdoutToServer=True,\n            stderrToServer=True,\n        )\n        print(f\"command line args are: {str(sys.argv)}\")\n</code></pre>"},{"location":"#ngwidgets.webserver.NiceGuiWebserver.page","title":"<code>page(client, wanted_action, *args, **kwargs)</code>  <code>async</code>","text":"<p>Handle a page request for a specific client. This method ensures that a specific type of WebSolution (or its subclass) is created for each client and used throughout the client's interaction.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The client making the request.</p> required <code>wanted_action(Callable)</code> <p>The function of the solution to perform. Might be overriden so we check the solution_instance</p> required <code>*args,</code> <code>**kwargs</code> <p>Additional arguments to pass to the action.</p> required <p>Returns:</p> Type Description <p>The result of the action performed.</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>async def page(self, client: Client, wanted_action: Callable, *args, **kwargs):\n    \"\"\"\n    Handle a page request for a specific client. This method ensures that a specific type of WebSolution\n    (or its subclass) is created for each client and used throughout the client's interaction.\n\n    Args:\n        client (Client): The client making the request.\n        wanted_action(Callable): The function of the solution to perform. Might be overriden so we check the solution_instance\n        *args, **kwargs: Additional arguments to pass to the action.\n\n    Returns:\n        The result of the action performed.\n    \"\"\"\n    solution_class = self.config.solution_class\n    if not solution_class:\n        raise TypeError(\"no solution_class configured\")\n    solution_instance = solution_class(self, client)\n\n    # Check if the solution_instance is an instance of solution_class or its subclass\n    if not isinstance(solution_instance, solution_class):\n        raise TypeError(\n            f\"solution_instance must be an instance of {solution_class.__name__} or its subclass, not {type(solution_instance).__name__}.\"\n        )\n\n    # Check if the action_callable is a method of solution_instance\n    if not callable(wanted_action) or not hasattr(\n        solution_instance, wanted_action.__name__\n    ):\n        raise AttributeError(\n            f\"The provided callable {wanted_action.__qualname__} is not a method of {solution_instance.__class__.__name__}.\"\n        )\n    # replace action by the one from the instance for inheritance handling\n    action = getattr(solution_instance, wanted_action.__name__)\n\n    await solution_instance.prepare()\n\n    # call any preparation code needed before the actual nicegui.ui calls\n    # are done\n    solution_instance.prepare_ui()\n\n    return await action(*args, **kwargs)\n</code></pre>"},{"location":"#ngwidgets.webserver.NiceGuiWebserver.run","title":"<code>run(args)</code>","text":"<p>Runs the UI of the web server.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>list</code> <p>The command line arguments.</p> required Source code in <code>ngwidgets/webserver.py</code> <pre><code>def run(self, args):\n    \"\"\"\n    Runs the UI of the web server.\n\n    Args:\n        args (list): The command line arguments.\n    \"\"\"\n    self.args = args\n    self.debug = args.debug\n    self.optionalDebug(args)\n    # allow app specific configuration steps\n    self.configure_run()\n    ui.run(\n        title=self.config.version.name,\n        host=args.host,\n        port=args.port,\n        show=args.client,\n        reload=False,\n        storage_secret=self.config.storage_secret,\n    )\n</code></pre>"},{"location":"#ngwidgets.webserver.NiceGuiWebserver.stop","title":"<code>stop()</code>","text":"<p>stop the server</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def stop(self):\n    \"\"\"\n    stop the server\n    \"\"\"\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution","title":"<code>WebSolution</code>","text":"<p>the user/client specific web context of a solution</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>class WebSolution:\n    \"\"\"\n    the user/client specific web context of a solution\n    \"\"\"\n\n    def __init__(self, webserver: NiceGuiWebserver, client: Client):\n        \"\"\"\n        construct a client specific WebSolution\n        \"\"\"\n        self.webserver = webserver\n        self.config = self.webserver.config\n        self.args = self.webserver.args\n        self.client = client\n        self.log_view = None\n        self.container = None\n\n    def notify(self, msg: str):\n        \"\"\"\n        call ui.notify with a context\n        \"\"\"\n        with self.content_div:\n            ui.notify(msg)\n\n    async def prepare(self):\n        \"\"\"\n        make sure this solution context is ready for use\n        \"\"\"\n        timeout = self.config.timeout\n        if timeout is not None:\n            await self.client.connected(timeout=timeout)\n\n    def prepare_ui(self):\n        \"\"\"\n        call any code necessary before the first nicegui.ui call is\n        done e.g. handling command line arguments\n\n        The base method does nothing and serves as a placeholder for subclasses to define their own UI preparation logic.\n        \"\"\"\n        pass\n\n    def link_button(self, name: str, target: str, icon_name: str, new_tab: bool = True):\n        \"\"\"\n        Creates a button with a specified icon that opens a target URL upon being clicked.\n\n        Args:\n            name (str): The name to be displayed on the button.\n            target (str): The target URL that should be opened when the button is clicked.\n            icon_name (str): The name of the icon to be displayed on the button.\n            new_tab(bool): if True open link in new tab\n\n        Returns:\n            The button object.\n\n\n        see https://fonts.google.com/icons?icon.set=Material+Icons for potential icon names\n        \"\"\"\n        with ui.link(text=\" \", target=target, new_tab=new_tab) as link_btn:\n            ui.button(name, icon=icon_name)\n        return link_btn\n\n    def tool_button(\n        self, tooltip: str, icon: str, handler: callable = None, toggle_icon: str = None\n    ) -&gt; ui.button:\n        \"\"\"\n        Creates a button with icon that triggers a specified function upon being clicked.\n\n        Args:\n            tooltip (str): The tooltip to be displayed.\n            icon (str): The name of the icon to be displayed on the button.\n            handler (function): The function to be called when the button is clicked.\n            toggle_icon (str): The name of an alternative icon to be displayed when the button is clicked.\n\n        Returns:\n            ui.button: The icon button object.\n\n        valid icons may be found at:\n            https://fonts.google.com/icons\n        \"\"\"\n        icon_button = (\n            ui.button(\"\", icon=icon, color=\"primary\")\n            .tooltip(tooltip)\n            .on(\"click\", handler=handler)\n        )\n        icon_button.toggle_icon = toggle_icon\n        return icon_button\n\n    def toggle_icon(self, button: ui.button):\n        \"\"\"\n        toggle the icon of the given button\n\n        Args:\n            ui.button: the button that needs the icon to be toggled\n        \"\"\"\n        if hasattr(button, \"toggle_icon\"):\n            # exchange icon with toggle icon\n            toggle_icon = button._props[\"icon\"]\n            icon = button.toggle_icon\n            button._props[\"icon\"] = icon\n            button.toggle_icon = toggle_icon\n        button.update()\n\n    def round_label(\n        self, title: str, background_color: str = \"#e6e6e6\", **kwargs\n    ) -&gt; ui.label:\n        \"\"\"\n        Creates a label with rounded corners and optional background color.\n\n        Args:\n            title (str): The text to be displayed in the label.\n            background_color (str): Hex color code for the label's background.\n                                    Defaults to a light grey color (\"#e6e6e6\").\n            **kwargs: Additional keyword arguments passed to the select widget creation.\n\n        Returns:\n            ui.label: A NiceGUI label element with rounded corners and the specified background color.\n        \"\"\"\n        background_style = (\n            f\"background-color: {background_color};\" if background_color else \"\"\n        )\n        round_label = (\n            ui.label(title, **kwargs)\n            .classes(\"rounded p-2\")\n            .style(f\"margin-right: 10px; {background_style}\")\n        )\n        return round_label\n\n    def add_select(\n        self,\n        title: str,\n        selection: Union[List[Any], Dict[str, Any]],\n        background_color: str = \"#e6e6e6\",\n        **kwargs,\n    ) -&gt; Any:\n        \"\"\"\n        Add a select widget with a given title, selection options, and optional styling.\n\n        Args:\n            title (str): The title or label for the select widget.\n            selection (Union[List[Any], Dict[str, Any]]): The options available for selection.\n                - If a List, each element represents an option.\n                - If a Dict, keys are option labels and values are the corresponding values.\n            background_color (str, optional): Hex color code for the background of the label. Defaults to \"#e6e6e6\".\n            **kwargs: Additional keyword arguments passed to the select widget creation.\n\n        Returns:\n            Any: The created nicegui ui.select widget.\n        \"\"\"\n        with ui.element(\"div\").style(\"display: flex; align-items: center;\"):\n            self.round_label(title, background_color)\n            s = ui.select(selection, **kwargs)\n            # https://github.com/WolfgangFahl/nicegui_widgets/issues/64\n            # s.validation={}\n            return s\n\n    def do_read_input(self, input_str: str) -&gt; str:\n        \"\"\"Reads the given input.\n\n        Args:\n            input_str (str): The input string representing a URL or local path.\n\n        Returns:\n            str: the input content as a string\n        \"\"\"\n        if input_str.startswith(\"http://\") or input_str.startswith(\"https://\"):\n            with urllib.request.urlopen(input_str) as response:\n                text = response.read().decode(\"utf-8\")\n                return text\n        else:\n            if os.path.exists(input_str):\n                with open(input_str, \"r\") as file:\n                    return file.read()\n            else:\n                raise Exception(f\"File does not exist: {input_str}\")\n\n    def setup_menu(self, detailed: bool = None):\n        \"\"\"\n        set up the default menu home/settings and about\n\n        Args:\n            detailed(bool): if True add github,chat and help links\n        \"\"\"\n        version = self.config.version\n        if detailed is None:\n            detailed = self.config.detailed_menu\n        self.config.color_schema.apply()\n        with ui.header() as self.header:\n            self.link_button(\"home\", \"/\", \"home\", new_tab=False)\n            self.link_button(\"settings\", \"/settings\", \"settings\", new_tab=False)\n            self.configure_menu()\n            if detailed:\n                self.link_button(\"github\", version.cm_url, \"bug_report\")\n                self.link_button(\"chat\", version.chat_url, \"chat\")\n                self.link_button(\"help\", version.doc_url, \"help\")\n            self.link_button(\"about\", \"/about\", \"info\", new_tab=False)\n\n    async def setup_footer(self):\n        \"\"\"\n        setup the footer\n        \"\"\"\n        with ui.footer() as self.footer:\n            ui.label(self.config.copy_right)\n            ui.link(\"Powered by nicegui\", \"https://nicegui.io/\").style(\"color: #fff\")\n\n    async def setup_content_div(\n        self,\n        setup_content: Optional[Callable] = None,\n        with_exception_handling: bool = True,\n        **kwargs,\n    ):\n        \"\"\"\n        Sets up the content frame div of the web server's user interface.\n\n        Args:\n            setup_content (Optional[Callable]): A callable for setting up the main content.\n                                                 It can be a regular function or a coroutine.\n            with_exception_handling(bool): if True handle exceptions\n\n        Note:\n            This method is asynchronous and should be awaited when called.\n        \"\"\"\n        # Setting up the menu\n        self.setup_menu()\n\n        with ui.element(\"div\").classes(\"w-full h-full\") as self.content_div:\n            self.container = self.content_div\n            # Execute setup_content if provided\n            if setup_content:\n                try:\n                    if asyncio.iscoroutinefunction(setup_content):\n                        await setup_content(**kwargs)\n                    else:\n                        setup_content(**kwargs)\n                except Exception as ex:\n                    if with_exception_handling:\n                        self.handle_exception(ex)\n                    else:\n                        raise ex\n\n        await self.setup_footer()\n\n    def handle_exception(self, e: BaseException, trace: Optional[bool] = None):\n        \"\"\"Handles an exception by creating an error message.\n\n        Args:\n            e (BaseException): The exception to handle.\n            trace (bool, optional): Whether to include the traceback in the error message. Default is False.\n        \"\"\"\n        if trace is None and self.webserver:\n            trace = self.webserver.do_trace\n        if trace:\n            self.error_msg = str(e) + \"\\n\" + traceback.format_exc()\n        else:\n            self.error_msg = str(e)\n        if self.log_view:\n            self.log_view.push(self.error_msg)\n        print(self.error_msg, file=sys.stderr)\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.__init__","title":"<code>__init__(webserver, client)</code>","text":"<p>construct a client specific WebSolution</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def __init__(self, webserver: NiceGuiWebserver, client: Client):\n    \"\"\"\n    construct a client specific WebSolution\n    \"\"\"\n    self.webserver = webserver\n    self.config = self.webserver.config\n    self.args = self.webserver.args\n    self.client = client\n    self.log_view = None\n    self.container = None\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.add_select","title":"<code>add_select(title, selection, background_color='#e6e6e6', **kwargs)</code>","text":"<p>Add a select widget with a given title, selection options, and optional styling.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title or label for the select widget.</p> required <code>selection</code> <code>Union[List[Any], Dict[str, Any]]</code> <p>The options available for selection. - If a List, each element represents an option. - If a Dict, keys are option labels and values are the corresponding values.</p> required <code>background_color</code> <code>str</code> <p>Hex color code for the background of the label. Defaults to \"#e6e6e6\".</p> <code>'#e6e6e6'</code> <code>**kwargs</code> <p>Additional keyword arguments passed to the select widget creation.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The created nicegui ui.select widget.</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def add_select(\n    self,\n    title: str,\n    selection: Union[List[Any], Dict[str, Any]],\n    background_color: str = \"#e6e6e6\",\n    **kwargs,\n) -&gt; Any:\n    \"\"\"\n    Add a select widget with a given title, selection options, and optional styling.\n\n    Args:\n        title (str): The title or label for the select widget.\n        selection (Union[List[Any], Dict[str, Any]]): The options available for selection.\n            - If a List, each element represents an option.\n            - If a Dict, keys are option labels and values are the corresponding values.\n        background_color (str, optional): Hex color code for the background of the label. Defaults to \"#e6e6e6\".\n        **kwargs: Additional keyword arguments passed to the select widget creation.\n\n    Returns:\n        Any: The created nicegui ui.select widget.\n    \"\"\"\n    with ui.element(\"div\").style(\"display: flex; align-items: center;\"):\n        self.round_label(title, background_color)\n        s = ui.select(selection, **kwargs)\n        # https://github.com/WolfgangFahl/nicegui_widgets/issues/64\n        # s.validation={}\n        return s\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.do_read_input","title":"<code>do_read_input(input_str)</code>","text":"<p>Reads the given input.</p> <p>Parameters:</p> Name Type Description Default <code>input_str</code> <code>str</code> <p>The input string representing a URL or local path.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the input content as a string</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def do_read_input(self, input_str: str) -&gt; str:\n    \"\"\"Reads the given input.\n\n    Args:\n        input_str (str): The input string representing a URL or local path.\n\n    Returns:\n        str: the input content as a string\n    \"\"\"\n    if input_str.startswith(\"http://\") or input_str.startswith(\"https://\"):\n        with urllib.request.urlopen(input_str) as response:\n            text = response.read().decode(\"utf-8\")\n            return text\n    else:\n        if os.path.exists(input_str):\n            with open(input_str, \"r\") as file:\n                return file.read()\n        else:\n            raise Exception(f\"File does not exist: {input_str}\")\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.handle_exception","title":"<code>handle_exception(e, trace=None)</code>","text":"<p>Handles an exception by creating an error message.</p> <p>Parameters:</p> Name Type Description Default <code>e</code> <code>BaseException</code> <p>The exception to handle.</p> required <code>trace</code> <code>bool</code> <p>Whether to include the traceback in the error message. Default is False.</p> <code>None</code> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def handle_exception(self, e: BaseException, trace: Optional[bool] = None):\n    \"\"\"Handles an exception by creating an error message.\n\n    Args:\n        e (BaseException): The exception to handle.\n        trace (bool, optional): Whether to include the traceback in the error message. Default is False.\n    \"\"\"\n    if trace is None and self.webserver:\n        trace = self.webserver.do_trace\n    if trace:\n        self.error_msg = str(e) + \"\\n\" + traceback.format_exc()\n    else:\n        self.error_msg = str(e)\n    if self.log_view:\n        self.log_view.push(self.error_msg)\n    print(self.error_msg, file=sys.stderr)\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.link_button","title":"<code>link_button(name, target, icon_name, new_tab=True)</code>","text":"<p>Creates a button with a specified icon that opens a target URL upon being clicked.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to be displayed on the button.</p> required <code>target</code> <code>str</code> <p>The target URL that should be opened when the button is clicked.</p> required <code>icon_name</code> <code>str</code> <p>The name of the icon to be displayed on the button.</p> required <code>new_tab(bool)</code> <p>if True open link in new tab</p> required <p>Returns:</p> Type Description <p>The button object.</p> <p>see https://fonts.google.com/icons?icon.set=Material+Icons for potential icon names</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def link_button(self, name: str, target: str, icon_name: str, new_tab: bool = True):\n    \"\"\"\n    Creates a button with a specified icon that opens a target URL upon being clicked.\n\n    Args:\n        name (str): The name to be displayed on the button.\n        target (str): The target URL that should be opened when the button is clicked.\n        icon_name (str): The name of the icon to be displayed on the button.\n        new_tab(bool): if True open link in new tab\n\n    Returns:\n        The button object.\n\n\n    see https://fonts.google.com/icons?icon.set=Material+Icons for potential icon names\n    \"\"\"\n    with ui.link(text=\" \", target=target, new_tab=new_tab) as link_btn:\n        ui.button(name, icon=icon_name)\n    return link_btn\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.notify","title":"<code>notify(msg)</code>","text":"<p>call ui.notify with a context</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def notify(self, msg: str):\n    \"\"\"\n    call ui.notify with a context\n    \"\"\"\n    with self.content_div:\n        ui.notify(msg)\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.prepare","title":"<code>prepare()</code>  <code>async</code>","text":"<p>make sure this solution context is ready for use</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>async def prepare(self):\n    \"\"\"\n    make sure this solution context is ready for use\n    \"\"\"\n    timeout = self.config.timeout\n    if timeout is not None:\n        await self.client.connected(timeout=timeout)\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.prepare_ui","title":"<code>prepare_ui()</code>","text":"<p>call any code necessary before the first nicegui.ui call is done e.g. handling command line arguments</p> <p>The base method does nothing and serves as a placeholder for subclasses to define their own UI preparation logic.</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def prepare_ui(self):\n    \"\"\"\n    call any code necessary before the first nicegui.ui call is\n    done e.g. handling command line arguments\n\n    The base method does nothing and serves as a placeholder for subclasses to define their own UI preparation logic.\n    \"\"\"\n    pass\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.round_label","title":"<code>round_label(title, background_color='#e6e6e6', **kwargs)</code>","text":"<p>Creates a label with rounded corners and optional background color.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The text to be displayed in the label.</p> required <code>background_color</code> <code>str</code> <p>Hex color code for the label's background.                     Defaults to a light grey color (\"#e6e6e6\").</p> <code>'#e6e6e6'</code> <code>**kwargs</code> <p>Additional keyword arguments passed to the select widget creation.</p> <code>{}</code> <p>Returns:</p> Type Description <code>label</code> <p>ui.label: A NiceGUI label element with rounded corners and the specified background color.</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def round_label(\n    self, title: str, background_color: str = \"#e6e6e6\", **kwargs\n) -&gt; ui.label:\n    \"\"\"\n    Creates a label with rounded corners and optional background color.\n\n    Args:\n        title (str): The text to be displayed in the label.\n        background_color (str): Hex color code for the label's background.\n                                Defaults to a light grey color (\"#e6e6e6\").\n        **kwargs: Additional keyword arguments passed to the select widget creation.\n\n    Returns:\n        ui.label: A NiceGUI label element with rounded corners and the specified background color.\n    \"\"\"\n    background_style = (\n        f\"background-color: {background_color};\" if background_color else \"\"\n    )\n    round_label = (\n        ui.label(title, **kwargs)\n        .classes(\"rounded p-2\")\n        .style(f\"margin-right: 10px; {background_style}\")\n    )\n    return round_label\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.setup_content_div","title":"<code>setup_content_div(setup_content=None, with_exception_handling=True, **kwargs)</code>  <code>async</code>","text":"<p>Sets up the content frame div of the web server's user interface.</p> <p>Parameters:</p> Name Type Description Default <code>setup_content</code> <code>Optional[Callable]</code> <p>A callable for setting up the main content.                                  It can be a regular function or a coroutine.</p> <code>None</code> <code>with_exception_handling(bool)</code> <p>if True handle exceptions</p> required Note <p>This method is asynchronous and should be awaited when called.</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>async def setup_content_div(\n    self,\n    setup_content: Optional[Callable] = None,\n    with_exception_handling: bool = True,\n    **kwargs,\n):\n    \"\"\"\n    Sets up the content frame div of the web server's user interface.\n\n    Args:\n        setup_content (Optional[Callable]): A callable for setting up the main content.\n                                             It can be a regular function or a coroutine.\n        with_exception_handling(bool): if True handle exceptions\n\n    Note:\n        This method is asynchronous and should be awaited when called.\n    \"\"\"\n    # Setting up the menu\n    self.setup_menu()\n\n    with ui.element(\"div\").classes(\"w-full h-full\") as self.content_div:\n        self.container = self.content_div\n        # Execute setup_content if provided\n        if setup_content:\n            try:\n                if asyncio.iscoroutinefunction(setup_content):\n                    await setup_content(**kwargs)\n                else:\n                    setup_content(**kwargs)\n            except Exception as ex:\n                if with_exception_handling:\n                    self.handle_exception(ex)\n                else:\n                    raise ex\n\n    await self.setup_footer()\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.setup_footer","title":"<code>setup_footer()</code>  <code>async</code>","text":"<p>setup the footer</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>async def setup_footer(self):\n    \"\"\"\n    setup the footer\n    \"\"\"\n    with ui.footer() as self.footer:\n        ui.label(self.config.copy_right)\n        ui.link(\"Powered by nicegui\", \"https://nicegui.io/\").style(\"color: #fff\")\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.setup_menu","title":"<code>setup_menu(detailed=None)</code>","text":"<p>set up the default menu home/settings and about</p> <p>Parameters:</p> Name Type Description Default <code>detailed(bool)</code> <p>if True add github,chat and help links</p> required Source code in <code>ngwidgets/webserver.py</code> <pre><code>def setup_menu(self, detailed: bool = None):\n    \"\"\"\n    set up the default menu home/settings and about\n\n    Args:\n        detailed(bool): if True add github,chat and help links\n    \"\"\"\n    version = self.config.version\n    if detailed is None:\n        detailed = self.config.detailed_menu\n    self.config.color_schema.apply()\n    with ui.header() as self.header:\n        self.link_button(\"home\", \"/\", \"home\", new_tab=False)\n        self.link_button(\"settings\", \"/settings\", \"settings\", new_tab=False)\n        self.configure_menu()\n        if detailed:\n            self.link_button(\"github\", version.cm_url, \"bug_report\")\n            self.link_button(\"chat\", version.chat_url, \"chat\")\n            self.link_button(\"help\", version.doc_url, \"help\")\n        self.link_button(\"about\", \"/about\", \"info\", new_tab=False)\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.toggle_icon","title":"<code>toggle_icon(button)</code>","text":"<p>toggle the icon of the given button</p> <p>Parameters:</p> Name Type Description Default <code>ui.button</code> <p>the button that needs the icon to be toggled</p> required Source code in <code>ngwidgets/webserver.py</code> <pre><code>def toggle_icon(self, button: ui.button):\n    \"\"\"\n    toggle the icon of the given button\n\n    Args:\n        ui.button: the button that needs the icon to be toggled\n    \"\"\"\n    if hasattr(button, \"toggle_icon\"):\n        # exchange icon with toggle icon\n        toggle_icon = button._props[\"icon\"]\n        icon = button.toggle_icon\n        button._props[\"icon\"] = icon\n        button.toggle_icon = toggle_icon\n    button.update()\n</code></pre>"},{"location":"#ngwidgets.webserver.WebSolution.tool_button","title":"<code>tool_button(tooltip, icon, handler=None, toggle_icon=None)</code>","text":"<p>Creates a button with icon that triggers a specified function upon being clicked.</p> <p>Parameters:</p> Name Type Description Default <code>tooltip</code> <code>str</code> <p>The tooltip to be displayed.</p> required <code>icon</code> <code>str</code> <p>The name of the icon to be displayed on the button.</p> required <code>handler</code> <code>function</code> <p>The function to be called when the button is clicked.</p> <code>None</code> <code>toggle_icon</code> <code>str</code> <p>The name of an alternative icon to be displayed when the button is clicked.</p> <code>None</code> <p>Returns:</p> Type Description <code>button</code> <p>ui.button: The icon button object.</p> valid icons may be found at <p>https://fonts.google.com/icons</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def tool_button(\n    self, tooltip: str, icon: str, handler: callable = None, toggle_icon: str = None\n) -&gt; ui.button:\n    \"\"\"\n    Creates a button with icon that triggers a specified function upon being clicked.\n\n    Args:\n        tooltip (str): The tooltip to be displayed.\n        icon (str): The name of the icon to be displayed on the button.\n        handler (function): The function to be called when the button is clicked.\n        toggle_icon (str): The name of an alternative icon to be displayed when the button is clicked.\n\n    Returns:\n        ui.button: The icon button object.\n\n    valid icons may be found at:\n        https://fonts.google.com/icons\n    \"\"\"\n    icon_button = (\n        ui.button(\"\", icon=icon, color=\"primary\")\n        .tooltip(tooltip)\n        .on(\"click\", handler=handler)\n    )\n    icon_button.toggle_icon = toggle_icon\n    return icon_button\n</code></pre>"},{"location":"#ngwidgets.webserver.WebserverConfig","title":"<code>WebserverConfig</code>","text":"<p>configuration of a webserver</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>@lod_storable\nclass WebserverConfig:\n    \"\"\"\n    configuration of a webserver\n    \"\"\"\n\n    # the short name to be used e.g. for determining the default storage_path\n    short_name: str\n\n    # set your copyright string here\n    copy_right: Optional[str] = \"\"\n    default_port: int = 9860\n    version: Optional[Version] = None\n    color_schema: ColorSchema = field(default_factory=ColorSchema.indigo)\n    detailed_menu: bool = True\n    timeout: Optional[float] = None\n    storage_secret: Optional[str] = None\n    storage_path: Optional[str] = None\n    config_path: Optional[str] = None\n\n    def __post_init__(self):\n        \"\"\"\n        make sure the necessary fields exist\n        \"\"\"\n        self.config_path = self.base_path\n        self.storage_path = self.storage_path or os.path.join(self.base_path, \"storage\")\n        self.storage_secret = self.storage_secret or str(uuid.uuid4())\n        self.timeout = self.timeout if self.timeout is not None else 3.0\n\n    @property\n    def yaml_path(self) -&gt; str:\n        return os.path.join(self.config_path, f\"{self.short_name}_config.yaml\")\n\n    @property\n    def base_path(self) -&gt; str:\n        base_path = self.config_path or os.path.join(\n            os.path.expanduser(\"~\"), \".solutions\", self.short_name\n        )\n        return base_path\n\n    @classmethod\n    def get(cls, config: \"WebserverConfig\") -&gt; \"WebserverConfig\":\n        \"\"\"\n        Retrieves or initializes a WebserverConfig instance based on the provided 'config' parameter.\n        This method ensures that essential properties like 'storage_secret', 'config_path', and 'storage_path'\n        are set in the 'config' object. If a configuration file already exists at the 'yaml_path', it's loaded,\n        and its values are used to update the provided 'config'. However, certain key properties like 'version',\n        'short_name', and 'default_port' can still be overridden by the provided 'config' if they are set.\n\n        If the configuration file does not exist, this method will create the necessary directories and save\n        the provided 'config' as the initial configuration to the 'yaml_path', which is derived from 'config_path'\n        and 'short_name' and typically located under the user's home directory in the '.solutions' folder.\n\n        Args:\n            config (WebserverConfig): The configuration object with preferred or default settings.\n\n        Returns:\n            WebserverConfig: The configuration loaded from the YAML file, or the provided 'config'\n                             if the YAML file does not exist.\n        \"\"\"\n        if os.path.exists(config.yaml_path):\n            # Load the existing config\n            server_config = cls.load_from_yaml_file(config.yaml_path)\n            if config.version:\n                server_config.version = config.version\n            if config.copy_right:\n                server_config.copy_right = config.copy_right\n            if config.default_port != 9680:\n                server_config.default_port = config.default_port\n            if config.short_name != server_config.short_name:\n                _msg = f\"config short_name mismatch {config.short_name}!={server_config.short_name}\"\n                pass\n            server_config.short_name = config.short_name\n        else:\n            # Create the directories to make sure they  exist\n            os.makedirs(config.config_path, exist_ok=True)\n            os.makedirs(config.storage_path, exist_ok=True)\n\n            # Use the provided default_config as the initial configuration\n            server_config = config\n            server_config.save_to_yaml_file(config.yaml_path)\n\n        return server_config\n</code></pre>"},{"location":"#ngwidgets.webserver.WebserverConfig.__post_init__","title":"<code>__post_init__()</code>","text":"<p>make sure the necessary fields exist</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>def __post_init__(self):\n    \"\"\"\n    make sure the necessary fields exist\n    \"\"\"\n    self.config_path = self.base_path\n    self.storage_path = self.storage_path or os.path.join(self.base_path, \"storage\")\n    self.storage_secret = self.storage_secret or str(uuid.uuid4())\n    self.timeout = self.timeout if self.timeout is not None else 3.0\n</code></pre>"},{"location":"#ngwidgets.webserver.WebserverConfig.get","title":"<code>get(config)</code>  <code>classmethod</code>","text":"<p>Retrieves or initializes a WebserverConfig instance based on the provided 'config' parameter. This method ensures that essential properties like 'storage_secret', 'config_path', and 'storage_path' are set in the 'config' object. If a configuration file already exists at the 'yaml_path', it's loaded, and its values are used to update the provided 'config'. However, certain key properties like 'version', 'short_name', and 'default_port' can still be overridden by the provided 'config' if they are set.</p> <p>If the configuration file does not exist, this method will create the necessary directories and save the provided 'config' as the initial configuration to the 'yaml_path', which is derived from 'config_path' and 'short_name' and typically located under the user's home directory in the '.solutions' folder.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>WebserverConfig</code> <p>The configuration object with preferred or default settings.</p> required <p>Returns:</p> Name Type Description <code>WebserverConfig</code> <code>WebserverConfig</code> <p>The configuration loaded from the YAML file, or the provided 'config'              if the YAML file does not exist.</p> Source code in <code>ngwidgets/webserver.py</code> <pre><code>@classmethod\ndef get(cls, config: \"WebserverConfig\") -&gt; \"WebserverConfig\":\n    \"\"\"\n    Retrieves or initializes a WebserverConfig instance based on the provided 'config' parameter.\n    This method ensures that essential properties like 'storage_secret', 'config_path', and 'storage_path'\n    are set in the 'config' object. If a configuration file already exists at the 'yaml_path', it's loaded,\n    and its values are used to update the provided 'config'. However, certain key properties like 'version',\n    'short_name', and 'default_port' can still be overridden by the provided 'config' if they are set.\n\n    If the configuration file does not exist, this method will create the necessary directories and save\n    the provided 'config' as the initial configuration to the 'yaml_path', which is derived from 'config_path'\n    and 'short_name' and typically located under the user's home directory in the '.solutions' folder.\n\n    Args:\n        config (WebserverConfig): The configuration object with preferred or default settings.\n\n    Returns:\n        WebserverConfig: The configuration loaded from the YAML file, or the provided 'config'\n                         if the YAML file does not exist.\n    \"\"\"\n    if os.path.exists(config.yaml_path):\n        # Load the existing config\n        server_config = cls.load_from_yaml_file(config.yaml_path)\n        if config.version:\n            server_config.version = config.version\n        if config.copy_right:\n            server_config.copy_right = config.copy_right\n        if config.default_port != 9680:\n            server_config.default_port = config.default_port\n        if config.short_name != server_config.short_name:\n            _msg = f\"config short_name mismatch {config.short_name}!={server_config.short_name}\"\n            pass\n        server_config.short_name = config.short_name\n    else:\n        # Create the directories to make sure they  exist\n        os.makedirs(config.config_path, exist_ok=True)\n        os.makedirs(config.storage_path, exist_ok=True)\n\n        # Use the provided default_config as the initial configuration\n        server_config = config\n        server_config.save_to_yaml_file(config.yaml_path)\n\n    return server_config\n</code></pre>"},{"location":"#ngwidgets.webserver_test","title":"<code>webserver_test</code>","text":"<p>Created on 2023-11-03</p> <p>@author: wf</p>"},{"location":"#ngwidgets.webserver_test.ThreadedServerRunner","title":"<code>ThreadedServerRunner</code>","text":"<p>run the Nicegui Server in a thread</p> Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>class ThreadedServerRunner:\n    \"\"\"\n    run the Nicegui Server in a thread\n    \"\"\"\n\n    def __init__(\n        self,\n        ws: Any,\n        args: Optional[Namespace] = None,\n        shutdown_timeout: float = 5.0,\n        debug: bool = False,\n    ) -&gt; None:\n        \"\"\"\n        Initialize the ThreadedServerRunner with a web server instance, optional arguments, and a shutdown timeout.\n\n        Args:\n            ws: The web server instance to run.\n            args: Optional arguments to pass to the web server's run method.\n            shutdown_timeout: The maximum time in seconds to wait for the server to shutdown.\n            debug: sets the debugging mode\n        \"\"\"\n        self.debug = debug\n        self.ws = ws\n        self.args = args\n        self.shutdown_timeout = shutdown_timeout\n        self.thread = threading.Thread(target=self._run_server)\n        self.thread.daemon = True\n\n    def _run_server(self) -&gt; None:\n        \"\"\"Internal method to run the server.\"\"\"\n        # The run method will be called with the stored argparse.Namespace\n        self.ws.run(self.args)\n\n    def start(self) -&gt; None:\n        \"\"\"Start the web server thread.\"\"\"\n        self.thread.start()\n\n    def warn(self, msg: str):\n        \"\"\"\n        show the given warning message\n        \"\"\"\n        if self.debug:\n            print(msg, file=sys.stderr)\n\n    def stop(self) -&gt; None:\n        \"\"\"\n        Stop the web server thread, signaling the server to exit if it is still running.\n        \"\"\"\n        if self.thread.is_alive():\n            # Mark the start time of the shutdown\n            start_time = time.time()\n            # call the shutdown see https://github.com/zauberzeug/nicegui/discussions/1957\n            app.shutdown()\n            # Initialize the timer for timeout\n            end_time = start_time + self.shutdown_timeout\n\n            # Wait for the server to shut down, but only as long as the timeout\n            while self.thread.is_alive() and time.time() &lt; end_time:\n                time.sleep(0.05)  # Sleep to prevent busy waiting\n\n            # Calculate the total shutdown time\n            shutdown_time_taken = time.time() - start_time\n\n            if self.thread.is_alive():\n                # The server didn't shut down within the timeout, handle appropriately\n                if self.debug:\n                    self.warn(\n                        f\"Warning: The server did not shut down gracefully within the timeout period. Shutdown attempt took {shutdown_time_taken:.2f} seconds.\"\n                    )\n            else:\n                # If shutdown was successful, report the time taken\n                if self.debug:\n                    self.warn(\n                        f\"Server shutdown completed in {shutdown_time_taken:.2f} seconds.\"\n                    )\n</code></pre>"},{"location":"#ngwidgets.webserver_test.ThreadedServerRunner.__init__","title":"<code>__init__(ws, args=None, shutdown_timeout=5.0, debug=False)</code>","text":"<p>Initialize the ThreadedServerRunner with a web server instance, optional arguments, and a shutdown timeout.</p> <p>Parameters:</p> Name Type Description Default <code>ws</code> <code>Any</code> <p>The web server instance to run.</p> required <code>args</code> <code>Optional[Namespace]</code> <p>Optional arguments to pass to the web server's run method.</p> <code>None</code> <code>shutdown_timeout</code> <code>float</code> <p>The maximum time in seconds to wait for the server to shutdown.</p> <code>5.0</code> <code>debug</code> <code>bool</code> <p>sets the debugging mode</p> <code>False</code> Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>def __init__(\n    self,\n    ws: Any,\n    args: Optional[Namespace] = None,\n    shutdown_timeout: float = 5.0,\n    debug: bool = False,\n) -&gt; None:\n    \"\"\"\n    Initialize the ThreadedServerRunner with a web server instance, optional arguments, and a shutdown timeout.\n\n    Args:\n        ws: The web server instance to run.\n        args: Optional arguments to pass to the web server's run method.\n        shutdown_timeout: The maximum time in seconds to wait for the server to shutdown.\n        debug: sets the debugging mode\n    \"\"\"\n    self.debug = debug\n    self.ws = ws\n    self.args = args\n    self.shutdown_timeout = shutdown_timeout\n    self.thread = threading.Thread(target=self._run_server)\n    self.thread.daemon = True\n</code></pre>"},{"location":"#ngwidgets.webserver_test.ThreadedServerRunner.start","title":"<code>start()</code>","text":"<p>Start the web server thread.</p> Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start the web server thread.\"\"\"\n    self.thread.start()\n</code></pre>"},{"location":"#ngwidgets.webserver_test.ThreadedServerRunner.stop","title":"<code>stop()</code>","text":"<p>Stop the web server thread, signaling the server to exit if it is still running.</p> Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"\n    Stop the web server thread, signaling the server to exit if it is still running.\n    \"\"\"\n    if self.thread.is_alive():\n        # Mark the start time of the shutdown\n        start_time = time.time()\n        # call the shutdown see https://github.com/zauberzeug/nicegui/discussions/1957\n        app.shutdown()\n        # Initialize the timer for timeout\n        end_time = start_time + self.shutdown_timeout\n\n        # Wait for the server to shut down, but only as long as the timeout\n        while self.thread.is_alive() and time.time() &lt; end_time:\n            time.sleep(0.05)  # Sleep to prevent busy waiting\n\n        # Calculate the total shutdown time\n        shutdown_time_taken = time.time() - start_time\n\n        if self.thread.is_alive():\n            # The server didn't shut down within the timeout, handle appropriately\n            if self.debug:\n                self.warn(\n                    f\"Warning: The server did not shut down gracefully within the timeout period. Shutdown attempt took {shutdown_time_taken:.2f} seconds.\"\n                )\n        else:\n            # If shutdown was successful, report the time taken\n            if self.debug:\n                self.warn(\n                    f\"Server shutdown completed in {shutdown_time_taken:.2f} seconds.\"\n                )\n</code></pre>"},{"location":"#ngwidgets.webserver_test.ThreadedServerRunner.warn","title":"<code>warn(msg)</code>","text":"<p>show the given warning message</p> Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>def warn(self, msg: str):\n    \"\"\"\n    show the given warning message\n    \"\"\"\n    if self.debug:\n        print(msg, file=sys.stderr)\n</code></pre>"},{"location":"#ngwidgets.webserver_test.WebserverTest","title":"<code>WebserverTest</code>","text":"<p>               Bases: <code>Basetest</code></p> <p>a webserver test environment</p> <p>Attributes:</p> Name Type Description <code>ws</code> <p>An instance of the web server being tested.</p> <code>ws_thread</code> <p>The thread running the web server.</p> <code>client</code> <p>A test client for interacting with the web server.</p> Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>class WebserverTest(Basetest):\n    \"\"\"\n    a webserver test environment\n\n    Attributes:\n        ws: An instance of the web server being tested.\n        ws_thread: The thread running the web server.\n        client: A test client for interacting with the web server.\n    \"\"\"\n\n    def setUp(self, server_class, cmd_class, debug=False, profile=True):\n        \"\"\"\n        Create and start a test instance of a web server using the specified server and command classes.\n\n        Args:\n            server_class: The class of the server to be tested. This should be a class reference that\n                          includes a static `get_config()` method and an instance method `run()`.\n            cmd_class: The command class used to parse command-line arguments for the server.\n                       This class should have an initialization accepting `config` and `server_class`\n                       and a method `cmd_parse()` that accepts a list of arguments.\n\n        Returns:\n            An instance of WebserverTest containing the started server thread and test client.\n\n        Raises:\n            ValueError: If an invalid server_class or cmd_class is provided.\n\n        Example:\n            &gt;&gt;&gt; test_server = WebserverTest.get_webserver_test(MyServerClass, MyCommandClass)\n            &gt;&gt;&gt; test_server.client.get('/')\n            &lt;Response [200]&gt;\n        \"\"\"\n        Basetest.setUp(self, debug=debug, profile=profile)\n        self.config = (\n            server_class.get_config()\n        )  # Assumes `get_config()` is a class method of server_class\n        self.config.default_port += (\n            10000  # Use a different port for testing than for production\n        )\n\n        self.cmd = cmd_class(\n            self.config, server_class\n        )  # Instantiate the command class with config and server_class\n        argv = []\n        args = self.cmd.cmd_parse(\n            argv\n        )  # Parse the command-line arguments with no arguments passed\n\n        self.ws = server_class()  # Instantiate the server class\n        self.server_runner = ThreadedServerRunner(self.ws, args=args, debug=self.debug)\n        self.server_runner.start()  # start server in separate thread\n\n        self.client = TestClient(\n            self.ws.app\n        )  # Instantiate the test client with the server's app\n\n    def tearDown(self):\n        \"\"\"\n        tear Down everything\n        \"\"\"\n        super().tearDown()\n        # Stop the server using the ThreadedServerRunner\n        self.server_runner.stop()\n\n    def get_response(self, path: str, expected_status_code: int = 200) -&gt; Response:\n        \"\"\"\n        Sends a GET request to a specified path and verifies the response status code.\n\n        This method is used for testing purposes to ensure that a GET request to a\n        given path returns the expected status code. It returns the response object\n        for further inspection or testing if needed.\n\n        Args:\n            path (str): The URL path to which the GET request is sent.\n            expected_status_code (int): The expected HTTP status code for the response.\n                                        Defaults to 200.\n\n        Returns:\n            Response: The response object from the GET request.\n        \"\"\"\n        response = self.client.get(path)\n        self.assertEqual(response.status_code, expected_status_code)\n        return response\n\n    def get_html(self, path: str, expected_status_code=200) -&gt; str:\n        \"\"\"\n        get the html content for the given path\n        \"\"\"\n        response = self.get_response(path, expected_status_code)\n        self.assertTrue(response.content is not None)\n        html = response.content.decode()\n        if self.debug:\n            print(html)\n        return html\n\n    def getHtml(self, path: str) -&gt; str:\n        \"\"\"\n        get the html content for the given path\n        \"\"\"\n        html = self.get_html(path)\n        return html\n\n    def get_html_for_post(self, path: str, data) -&gt; str:\n        \"\"\"\n        get the html content for the given path by posting the given data\n        \"\"\"\n        response = self.client.post(path, json=data)\n        self.assertEqual(response.status_code, 200)\n        self.assertTrue(response.content is not None)\n        html = response.content.decode()\n        if self.debug:\n            print(html)\n        return html\n\n    def get_json(self, path: str, expected_status_code: int = 200) -&gt; Any:\n        \"\"\"\n        Sends a GET request to a specified path, verifies the response status code,\n        and returns the JSON content of the response.\n\n        This method is useful for testing API endpoints that return JSON data.\n        It ensures that the request to a given path returns the expected status code\n        and then parses and returns the JSON response.\n\n        Args:\n            path (str): The URL path to which the GET request is sent.\n            expected_status_code (int): The expected HTTP status code for the response.\n                                        Defaults to 200.\n\n        Returns:\n            Any: The parsed JSON data from the response.\n\n        Raises:\n            AssertionError: If the response status code does not match the expected status code.\n            JSONDecodeError: If the response body cannot be parsed as JSON.\n        \"\"\"\n        response = self.get_response(path, expected_status_code)\n        try:\n            json_data = response.json()\n            return json_data\n        except json.JSONDecodeError as e:\n            self.fail(\n                f\"Failed to decode JSON for request {path} from response: {str(e)}\"\n            )\n</code></pre>"},{"location":"#ngwidgets.webserver_test.WebserverTest.getHtml","title":"<code>getHtml(path)</code>","text":"<p>get the html content for the given path</p> Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>def getHtml(self, path: str) -&gt; str:\n    \"\"\"\n    get the html content for the given path\n    \"\"\"\n    html = self.get_html(path)\n    return html\n</code></pre>"},{"location":"#ngwidgets.webserver_test.WebserverTest.get_html","title":"<code>get_html(path, expected_status_code=200)</code>","text":"<p>get the html content for the given path</p> Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>def get_html(self, path: str, expected_status_code=200) -&gt; str:\n    \"\"\"\n    get the html content for the given path\n    \"\"\"\n    response = self.get_response(path, expected_status_code)\n    self.assertTrue(response.content is not None)\n    html = response.content.decode()\n    if self.debug:\n        print(html)\n    return html\n</code></pre>"},{"location":"#ngwidgets.webserver_test.WebserverTest.get_html_for_post","title":"<code>get_html_for_post(path, data)</code>","text":"<p>get the html content for the given path by posting the given data</p> Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>def get_html_for_post(self, path: str, data) -&gt; str:\n    \"\"\"\n    get the html content for the given path by posting the given data\n    \"\"\"\n    response = self.client.post(path, json=data)\n    self.assertEqual(response.status_code, 200)\n    self.assertTrue(response.content is not None)\n    html = response.content.decode()\n    if self.debug:\n        print(html)\n    return html\n</code></pre>"},{"location":"#ngwidgets.webserver_test.WebserverTest.get_json","title":"<code>get_json(path, expected_status_code=200)</code>","text":"<p>Sends a GET request to a specified path, verifies the response status code, and returns the JSON content of the response.</p> <p>This method is useful for testing API endpoints that return JSON data. It ensures that the request to a given path returns the expected status code and then parses and returns the JSON response.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The URL path to which the GET request is sent.</p> required <code>expected_status_code</code> <code>int</code> <p>The expected HTTP status code for the response.                         Defaults to 200.</p> <code>200</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The parsed JSON data from the response.</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If the response status code does not match the expected status code.</p> <code>JSONDecodeError</code> <p>If the response body cannot be parsed as JSON.</p> Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>def get_json(self, path: str, expected_status_code: int = 200) -&gt; Any:\n    \"\"\"\n    Sends a GET request to a specified path, verifies the response status code,\n    and returns the JSON content of the response.\n\n    This method is useful for testing API endpoints that return JSON data.\n    It ensures that the request to a given path returns the expected status code\n    and then parses and returns the JSON response.\n\n    Args:\n        path (str): The URL path to which the GET request is sent.\n        expected_status_code (int): The expected HTTP status code for the response.\n                                    Defaults to 200.\n\n    Returns:\n        Any: The parsed JSON data from the response.\n\n    Raises:\n        AssertionError: If the response status code does not match the expected status code.\n        JSONDecodeError: If the response body cannot be parsed as JSON.\n    \"\"\"\n    response = self.get_response(path, expected_status_code)\n    try:\n        json_data = response.json()\n        return json_data\n    except json.JSONDecodeError as e:\n        self.fail(\n            f\"Failed to decode JSON for request {path} from response: {str(e)}\"\n        )\n</code></pre>"},{"location":"#ngwidgets.webserver_test.WebserverTest.get_response","title":"<code>get_response(path, expected_status_code=200)</code>","text":"<p>Sends a GET request to a specified path and verifies the response status code.</p> <p>This method is used for testing purposes to ensure that a GET request to a given path returns the expected status code. It returns the response object for further inspection or testing if needed.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The URL path to which the GET request is sent.</p> required <code>expected_status_code</code> <code>int</code> <p>The expected HTTP status code for the response.                         Defaults to 200.</p> <code>200</code> <p>Returns:</p> Name Type Description <code>Response</code> <code>Response</code> <p>The response object from the GET request.</p> Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>def get_response(self, path: str, expected_status_code: int = 200) -&gt; Response:\n    \"\"\"\n    Sends a GET request to a specified path and verifies the response status code.\n\n    This method is used for testing purposes to ensure that a GET request to a\n    given path returns the expected status code. It returns the response object\n    for further inspection or testing if needed.\n\n    Args:\n        path (str): The URL path to which the GET request is sent.\n        expected_status_code (int): The expected HTTP status code for the response.\n                                    Defaults to 200.\n\n    Returns:\n        Response: The response object from the GET request.\n    \"\"\"\n    response = self.client.get(path)\n    self.assertEqual(response.status_code, expected_status_code)\n    return response\n</code></pre>"},{"location":"#ngwidgets.webserver_test.WebserverTest.setUp","title":"<code>setUp(server_class, cmd_class, debug=False, profile=True)</code>","text":"<p>Create and start a test instance of a web server using the specified server and command classes.</p> <p>Parameters:</p> Name Type Description Default <code>server_class</code> <p>The class of the server to be tested. This should be a class reference that           includes a static <code>get_config()</code> method and an instance method <code>run()</code>.</p> required <code>cmd_class</code> <p>The command class used to parse command-line arguments for the server.        This class should have an initialization accepting <code>config</code> and <code>server_class</code>        and a method <code>cmd_parse()</code> that accepts a list of arguments.</p> required <p>Returns:</p> Type Description <p>An instance of WebserverTest containing the started server thread and test client.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an invalid server_class or cmd_class is provided.</p> Example <p>test_server = WebserverTest.get_webserver_test(MyServerClass, MyCommandClass) test_server.client.get('/')  Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>def setUp(self, server_class, cmd_class, debug=False, profile=True):\n    \"\"\"\n    Create and start a test instance of a web server using the specified server and command classes.\n\n    Args:\n        server_class: The class of the server to be tested. This should be a class reference that\n                      includes a static `get_config()` method and an instance method `run()`.\n        cmd_class: The command class used to parse command-line arguments for the server.\n                   This class should have an initialization accepting `config` and `server_class`\n                   and a method `cmd_parse()` that accepts a list of arguments.\n\n    Returns:\n        An instance of WebserverTest containing the started server thread and test client.\n\n    Raises:\n        ValueError: If an invalid server_class or cmd_class is provided.\n\n    Example:\n        &gt;&gt;&gt; test_server = WebserverTest.get_webserver_test(MyServerClass, MyCommandClass)\n        &gt;&gt;&gt; test_server.client.get('/')\n        &lt;Response [200]&gt;\n    \"\"\"\n    Basetest.setUp(self, debug=debug, profile=profile)\n    self.config = (\n        server_class.get_config()\n    )  # Assumes `get_config()` is a class method of server_class\n    self.config.default_port += (\n        10000  # Use a different port for testing than for production\n    )\n\n    self.cmd = cmd_class(\n        self.config, server_class\n    )  # Instantiate the command class with config and server_class\n    argv = []\n    args = self.cmd.cmd_parse(\n        argv\n    )  # Parse the command-line arguments with no arguments passed\n\n    self.ws = server_class()  # Instantiate the server class\n    self.server_runner = ThreadedServerRunner(self.ws, args=args, debug=self.debug)\n    self.server_runner.start()  # start server in separate thread\n\n    self.client = TestClient(\n        self.ws.app\n    )  # Instantiate the test client with the server's app\n</code></pre>"},{"location":"#ngwidgets.webserver_test.WebserverTest.tearDown","title":"<code>tearDown()</code>","text":"<p>tear Down everything</p> Source code in <code>ngwidgets/webserver_test.py</code> <pre><code>def tearDown(self):\n    \"\"\"\n    tear Down everything\n    \"\"\"\n    super().tearDown()\n    # Stop the server using the ThreadedServerRunner\n    self.server_runner.stop()\n</code></pre>"},{"location":"#ngwidgets.widgets","title":"<code>widgets</code>","text":"<p>Created on 2023-09-10</p> <p>common nicegui widgets and tools</p> <p>@author: wf</p>"},{"location":"#ngwidgets.widgets.About","title":"<code>About</code>","text":"<p>               Bases: <code>element</code></p> <p>About Div for a given version</p> Source code in <code>ngwidgets/widgets.py</code> <pre><code>class About(ui.element):\n    \"\"\"\n    About Div for a given version\n    \"\"\"\n\n    def __init__(\n        self,\n        version,\n        font_size=24,\n        font_family=\"Helvetica, Arial, sans-serif\",\n        **kwargs,\n    ):\n        \"\"\"\n        construct an about Div for the given version\n        \"\"\"\n\n        def add(html, l, code):\n            html += f'&lt;div class=\"about_row\"&gt;&lt;div class=\"about_column1\"&gt;{l}:&lt;/div&gt;&lt;div class=\"about_column2\"&gt;{code}&lt;/div&gt;&lt;/div&gt;'\n            return html\n\n        super().__init__(tag=\"div\", **kwargs)\n        with self:\n            doc_link = Link.create(\n                url=version.doc_url, text=\"documentation\", target=\"_blank\"\n            )\n            disc_link = Link.create(\n                url=version.chat_url, text=\"discussion\", target=\"_blank\"\n            )\n            cm_link = Link.create(url=version.cm_url, text=\"source\", target=\"_blank\")\n            max_label_length = 7  # e.g. updated\n            column1_width = (\n                font_size * max_label_length\n            )  # Approximate width calculation\n\n            html = f\"\"\"&lt;style&gt;\n                    .about_row {{\n                        display: flex;\n                        align-items: baseline;\n                    }}\n                    .about_column1 {{\n                        font-weight: bold;\n                        font-size: {font_size}px;\n                        text-align: right;\n                        width: {column1_width}px; \n                        padding-right: 10px;\n                        font-family: {font_family};\n                    }}\n                    .about_column2 {{\n                        font-size: {font_size}px;\n                        font-family: {font_family};\n                    }}\n                    .about_column2 a {{\n                        color: blue;\n                        text-decoration: underline;\n                    }}\n               &lt;/style&gt;\"\"\"\n            html = add(html, \"name\", f\"{version.name}\")\n            html = add(html, \"purpose\", f\"{version.description}\")\n            html = add(html, \"version\", f\"{version.version}\")\n            html = add(html, \"since\", f\"{version.date}\")\n            html = add(html, \"updated\", f\"{version.updated}\")\n            html = add(html, \"authors\", f\"{version.authors}\")\n            html = add(html, \"docs\", doc_link)\n            html = add(html, \"chat\", disc_link)\n            html = add(html, \"source\", cm_link)\n            ui.html(html)\n</code></pre>"},{"location":"#ngwidgets.widgets.About.__init__","title":"<code>__init__(version, font_size=24, font_family='Helvetica, Arial, sans-serif', **kwargs)</code>","text":"<p>construct an about Div for the given version</p> Source code in <code>ngwidgets/widgets.py</code> <pre><code>def __init__(\n    self,\n    version,\n    font_size=24,\n    font_family=\"Helvetica, Arial, sans-serif\",\n    **kwargs,\n):\n    \"\"\"\n    construct an about Div for the given version\n    \"\"\"\n\n    def add(html, l, code):\n        html += f'&lt;div class=\"about_row\"&gt;&lt;div class=\"about_column1\"&gt;{l}:&lt;/div&gt;&lt;div class=\"about_column2\"&gt;{code}&lt;/div&gt;&lt;/div&gt;'\n        return html\n\n    super().__init__(tag=\"div\", **kwargs)\n    with self:\n        doc_link = Link.create(\n            url=version.doc_url, text=\"documentation\", target=\"_blank\"\n        )\n        disc_link = Link.create(\n            url=version.chat_url, text=\"discussion\", target=\"_blank\"\n        )\n        cm_link = Link.create(url=version.cm_url, text=\"source\", target=\"_blank\")\n        max_label_length = 7  # e.g. updated\n        column1_width = (\n            font_size * max_label_length\n        )  # Approximate width calculation\n\n        html = f\"\"\"&lt;style&gt;\n                .about_row {{\n                    display: flex;\n                    align-items: baseline;\n                }}\n                .about_column1 {{\n                    font-weight: bold;\n                    font-size: {font_size}px;\n                    text-align: right;\n                    width: {column1_width}px; \n                    padding-right: 10px;\n                    font-family: {font_family};\n                }}\n                .about_column2 {{\n                    font-size: {font_size}px;\n                    font-family: {font_family};\n                }}\n                .about_column2 a {{\n                    color: blue;\n                    text-decoration: underline;\n                }}\n           &lt;/style&gt;\"\"\"\n        html = add(html, \"name\", f\"{version.name}\")\n        html = add(html, \"purpose\", f\"{version.description}\")\n        html = add(html, \"version\", f\"{version.version}\")\n        html = add(html, \"since\", f\"{version.date}\")\n        html = add(html, \"updated\", f\"{version.updated}\")\n        html = add(html, \"authors\", f\"{version.authors}\")\n        html = add(html, \"docs\", doc_link)\n        html = add(html, \"chat\", disc_link)\n        html = add(html, \"source\", cm_link)\n        ui.html(html)\n</code></pre>"},{"location":"#ngwidgets.widgets.HideShow","title":"<code>HideShow</code>","text":"<p>A class representing a hideable/showable section in a NiceGUI application.</p> Source code in <code>ngwidgets/widgets.py</code> <pre><code>class HideShow:\n    \"\"\"\n    A class representing a hideable/showable section in a NiceGUI application.\n    \"\"\"\n\n    TRIANGLE_LEFT = \"\u25c0\"\n    TRIANGLE_DOWN = \"\u25bc\"\n\n    def __init__(\n        self,\n        hide_show_label: tuple[str, str] = None,\n        show_content: bool = True,\n        content_div=None,\n        lazy_init: bool = False,\n        **kwargs,\n    ):\n        \"\"\"\n        Initialize the HideShow component.\n\n        Args:\n            hide_show_label: Labels for shown/hidden states.\n            show_content: Initial visibility state (default True).\n            content_div: Div with content to hide/show.\n            lazy_init: If True, content_div initialized later.\n            **kwargs: Additional args for button element.\n        \"\"\"\n        self.label_if_shown, self.label_if_hidden = hide_show_label\n        self.show_content = show_content\n        self.btn = ui.button(\n            text=self._get_status_label(show_content),\n            on_click=self.toggle_hide_show,\n            **kwargs,\n        )\n\n        if not lazy_init:\n            self.content_div = content_div if content_div else ui.element()\n        else:\n            self.content_div = None\n\n        self._set_show_content(show_content)\n\n    def _set_show_content(self, show_content: bool):\n        \"\"\"\n        Set visibility of content.\n        \"\"\"\n        if self.content_div:\n            self.show_content = show_content\n            self.content_div.set_visibility(show_content)\n            self.btn.set_text(self._get_status_label(show_content))\n\n    def _get_status_label(self, show_content: bool) -&gt; str:\n        \"\"\"\n        Get label text based on visibility state.\n        \"\"\"\n        icon = self.TRIANGLE_DOWN if show_content else self.TRIANGLE_LEFT\n        label = (\n            self.label_if_shown\n            if show_content\n            else (self.label_if_hidden if self.label_if_hidden else self.label_if_shown)\n        )\n        return f\"{label} {icon}\"\n\n    def toggle_hide_show(self, _=None):\n        \"\"\"\n        Toggle visibility of content.\n        \"\"\"\n        self._set_show_content(not self.show_content)\n\n    def add(self, widget):\n        \"\"\"\n        Add a widget to content div.\n        \"\"\"\n        self.content_div.add(widget)\n\n    def update(self):\n        \"\"\"\n        Update the content div.\n        \"\"\"\n        self.content_div.update()\n\n    def set_content(self, content_div=None):\n        \"\"\"\n        Set or update content div.\n        \"\"\"\n        self.content_div = content_div if content_div else ui.element()\n        self._set_show_content(self.show_content)\n</code></pre>"},{"location":"#ngwidgets.widgets.HideShow.__init__","title":"<code>__init__(hide_show_label=None, show_content=True, content_div=None, lazy_init=False, **kwargs)</code>","text":"<p>Initialize the HideShow component.</p> <p>Parameters:</p> Name Type Description Default <code>hide_show_label</code> <code>tuple[str, str]</code> <p>Labels for shown/hidden states.</p> <code>None</code> <code>show_content</code> <code>bool</code> <p>Initial visibility state (default True).</p> <code>True</code> <code>content_div</code> <p>Div with content to hide/show.</p> <code>None</code> <code>lazy_init</code> <code>bool</code> <p>If True, content_div initialized later.</p> <code>False</code> <code>**kwargs</code> <p>Additional args for button element.</p> <code>{}</code> Source code in <code>ngwidgets/widgets.py</code> <pre><code>def __init__(\n    self,\n    hide_show_label: tuple[str, str] = None,\n    show_content: bool = True,\n    content_div=None,\n    lazy_init: bool = False,\n    **kwargs,\n):\n    \"\"\"\n    Initialize the HideShow component.\n\n    Args:\n        hide_show_label: Labels for shown/hidden states.\n        show_content: Initial visibility state (default True).\n        content_div: Div with content to hide/show.\n        lazy_init: If True, content_div initialized later.\n        **kwargs: Additional args for button element.\n    \"\"\"\n    self.label_if_shown, self.label_if_hidden = hide_show_label\n    self.show_content = show_content\n    self.btn = ui.button(\n        text=self._get_status_label(show_content),\n        on_click=self.toggle_hide_show,\n        **kwargs,\n    )\n\n    if not lazy_init:\n        self.content_div = content_div if content_div else ui.element()\n    else:\n        self.content_div = None\n\n    self._set_show_content(show_content)\n</code></pre>"},{"location":"#ngwidgets.widgets.HideShow.add","title":"<code>add(widget)</code>","text":"<p>Add a widget to content div.</p> Source code in <code>ngwidgets/widgets.py</code> <pre><code>def add(self, widget):\n    \"\"\"\n    Add a widget to content div.\n    \"\"\"\n    self.content_div.add(widget)\n</code></pre>"},{"location":"#ngwidgets.widgets.HideShow.set_content","title":"<code>set_content(content_div=None)</code>","text":"<p>Set or update content div.</p> Source code in <code>ngwidgets/widgets.py</code> <pre><code>def set_content(self, content_div=None):\n    \"\"\"\n    Set or update content div.\n    \"\"\"\n    self.content_div = content_div if content_div else ui.element()\n    self._set_show_content(self.show_content)\n</code></pre>"},{"location":"#ngwidgets.widgets.HideShow.toggle_hide_show","title":"<code>toggle_hide_show(_=None)</code>","text":"<p>Toggle visibility of content.</p> Source code in <code>ngwidgets/widgets.py</code> <pre><code>def toggle_hide_show(self, _=None):\n    \"\"\"\n    Toggle visibility of content.\n    \"\"\"\n    self._set_show_content(not self.show_content)\n</code></pre>"},{"location":"#ngwidgets.widgets.HideShow.update","title":"<code>update()</code>","text":"<p>Update the content div.</p> Source code in <code>ngwidgets/widgets.py</code> <pre><code>def update(self):\n    \"\"\"\n    Update the content div.\n    \"\"\"\n    self.content_div.update()\n</code></pre>"},{"location":"#ngwidgets.widgets.Lang","title":"<code>Lang</code>","text":"<p>A class representing languages, providing utility methods related to language data.</p> Source code in <code>ngwidgets/widgets.py</code> <pre><code>class Lang:\n    \"\"\"\n    A class representing languages, providing utility methods related to language data.\n    \"\"\"\n\n    @classmethod\n    def get_language_dict(cls) -&gt; dict:\n        \"\"\"\n        Get a dictionary of supported languages.\n\n        Returns:\n            dict[str, str]: A dictionary where the keys are language codes (e.g., \"en\" for English)\n                            and the values are the corresponding names/representations in HTML entity format.\n        \"\"\"\n        # see https://github.com/sahajsk21/Anvesha/blob/master/src/components/topnav.js\n        languages_list = [\n            [\"ar\", \"&amp;#1575;&amp;#1604;&amp;#1593;&amp;#1585;&amp;#1576;&amp;#1610;&amp;#1577;\"],\n            [\"arz\", \"&amp;#1605;&amp;#1589;&amp;#1585;&amp;#1609;\"],\n            [\"ast\", \"Asturianu\"],\n            [\"az\", \"Az&amp;#601;rbaycanca\"],\n            [\"azb\", \"&amp;#1578;&amp;#1734;&amp;#1585;&amp;#1705;&amp;#1580;&amp;#1607;\"],\n            [\n                \"be\",\n                \"&amp;#1041;&amp;#1077;&amp;#1083;&amp;#1072;&amp;#1088;&amp;#1091;&amp;#1089;&amp;#1082;&amp;#1072;&amp;#1103;\",\n            ],\n            [\"bg\", \"&amp;#1041;&amp;#1098;&amp;#1083;&amp;#1075;&amp;#1072;&amp;#1088;&amp;#1089;&amp;#1082;&amp;#1080;\"],\n            [\"bn\", \"&amp;#2476;&amp;#2494;&amp;#2434;&amp;#2482;&amp;#2494;\"],\n            [\"ca\", \"Catal&amp;agrave;\"],\n            [\"ce\", \"&amp;#1053;&amp;#1086;&amp;#1093;&amp;#1095;&amp;#1080;&amp;#1081;&amp;#1085;\"],\n            [\"ceb\", \"Sinugboanong Binisaya\"],\n            [\"cs\", \"&amp;#268;e&amp;scaron;tina\"],\n            [\"cy\", \"Cymraeg\"],\n            [\"da\", \"Dansk\"],\n            [\"de\", \"Deutsch\"],\n            [\"el\", \"&amp;Epsilon;&amp;lambda;&amp;lambda;&amp;eta;&amp;nu;&amp;iota;&amp;kappa;&amp;#940;\"],\n            [\"en\", \"English\"],\n            [\"eo\", \"Esperanto\"],\n            [\"es\", \"Espa&amp;ntilde;ol\"],\n            [\"et\", \"Eesti\"],\n            [\"eu\", \"Euskara\"],\n            [\"fa\", \"&amp;#1601;&amp;#1575;&amp;#1585;&amp;#1587;&amp;#1740;\"],\n            [\"fi\", \"Suomi\"],\n            [\"fr\", \"Fran&amp;ccedil;ais\"],\n            [\"gl\", \"Galego\"],\n            [\"he\", \"&amp;#1506;&amp;#1489;&amp;#1512;&amp;#1497;&amp;#1514;\"],\n            [\"hi\", \"&amp;#2361;&amp;#2367;&amp;#2344;&amp;#2381;&amp;#2342;&amp;#2368;\"],\n            [\"hr\", \"Hrvatski\"],\n            [\"hu\", \"Magyar\"],\n            [\"hy\", \"&amp;#1344;&amp;#1377;&amp;#1397;&amp;#1381;&amp;#1408;&amp;#1381;&amp;#1398;\"],\n            [\"id\", \"Bahasa Indonesia\"],\n            [\"it\", \"Italiano\"],\n            [\"ja\", \"&amp;#26085;&amp;#26412;&amp;#35486;\"],\n            [\"ka\", \"&amp;#4325;&amp;#4304;&amp;#4320;&amp;#4311;&amp;#4323;&amp;#4314;&amp;#4312;\"],\n            [\n                \"kk\",\n                \"&amp;#1178;&amp;#1072;&amp;#1079;&amp;#1072;&amp;#1179;&amp;#1096;&amp;#1072; / Qazaq&amp;#351;a / &amp;#1602;&amp;#1575;&amp;#1586;&amp;#1575;&amp;#1602;&amp;#1588;&amp;#1575;\",\n            ],\n            [\"ko\", \"&amp;#54620;&amp;#44397;&amp;#50612;\"],\n            [\"la\", \"Latina\"],\n            [\"lt\", \"Lietuvi&amp;#371;\"],\n            [\"lv\", \"Latvie&amp;scaron;u\"],\n            [\"min\", \"Bahaso Minangkabau\"],\n            [\"ms\", \"Bahasa Melayu\"],\n            [\"nan\", \"B&amp;acirc;n-l&amp;acirc;m-g&amp;uacute; / H&amp;#333;-l&amp;oacute;-o&amp;#275;\"],\n            [\"nb\", \"Norsk (bokm&amp;aring;l)\"],\n            [\"nl\", \"Nederlands\"],\n            [\"nn\", \"Norsk (nynorsk)\"],\n            [\"pl\", \"Polski\"],\n            [\"pt\", \"Portugu&amp;ecirc;s\"],\n            [\"ro\", \"Rom&amp;acirc;n&amp;#259;\"],\n            [\"ru\", \"&amp;#1056;&amp;#1091;&amp;#1089;&amp;#1089;&amp;#1082;&amp;#1080;&amp;#1081;\"],\n            [\n                \"sh\",\n                \"Srpskohrvatski / &amp;#1057;&amp;#1088;&amp;#1087;&amp;#1089;&amp;#1082;&amp;#1086;&amp;#1093;&amp;#1088;&amp;#1074;&amp;#1072;&amp;#1090;&amp;#1089;&amp;#1082;&amp;#1080;\",\n            ],\n            [\"sk\", \"Sloven&amp;#269;ina\"],\n            [\"sl\", \"Sloven&amp;scaron;&amp;#269;ina\"],\n            [\"sr\", \"&amp;#1057;&amp;#1088;&amp;#1087;&amp;#1089;&amp;#1082;&amp;#1080; / Srpski\"],\n            [\"sv\", \"Svenska\"],\n            [\"ta\", \"&amp;#2980;&amp;#2990;&amp;#3007;&amp;#2996;&amp;#3021;\"],\n            [\"tg\", \"&amp;#1058;&amp;#1086;&amp;#1207;&amp;#1080;&amp;#1082;&amp;#1251;\"],\n            [\"th\", \"&amp;#3616;&amp;#3634;&amp;#3625;&amp;#3634;&amp;#3652;&amp;#3607;&amp;#3618;\"],\n            [\"tr\", \"T&amp;uuml;rk&amp;ccedil;e\"],\n            [\n                \"tt\",\n                \"&amp;#1058;&amp;#1072;&amp;#1090;&amp;#1072;&amp;#1088;&amp;#1095;&amp;#1072; / Tatar&amp;ccedil;a\",\n            ],\n            [\n                \"uk\",\n                \"&amp;#1059;&amp;#1082;&amp;#1088;&amp;#1072;&amp;#1111;&amp;#1085;&amp;#1089;&amp;#1100;&amp;#1082;&amp;#1072;\",\n            ],\n            [\"ur\", \"&amp;#1575;&amp;#1585;&amp;#1583;&amp;#1608;\"],\n            [\n                \"uz\",\n                \"O&amp;#699;zbekcha / &amp;#1038;&amp;#1079;&amp;#1073;&amp;#1077;&amp;#1082;&amp;#1095;&amp;#1072;\",\n            ],\n            [\"vi\", \"Ti&amp;#7871;ng Vi&amp;#7879;t\"],\n            [\"vo\", \"Volap&amp;uuml;k\"],\n            [\"war\", \"Winaray\"],\n            [\"yue\", \"&amp;#31925;&amp;#35486;\"],\n            [\"zh\", \"&amp;#20013;&amp;#25991;\"],\n        ]\n        languages_dict = {}\n        for code, desc in languages_list:\n            desc = html.unescape(desc)\n            languages_dict[code] = desc\n\n        return languages_dict\n</code></pre>"},{"location":"#ngwidgets.widgets.Lang.get_language_dict","title":"<code>get_language_dict()</code>  <code>classmethod</code>","text":"<p>Get a dictionary of supported languages.</p> <p>Returns:</p> Type Description <code>dict</code> <p>dict[str, str]: A dictionary where the keys are language codes (e.g., \"en\" for English)             and the values are the corresponding names/representations in HTML entity format.</p> Source code in <code>ngwidgets/widgets.py</code> <pre><code>@classmethod\ndef get_language_dict(cls) -&gt; dict:\n    \"\"\"\n    Get a dictionary of supported languages.\n\n    Returns:\n        dict[str, str]: A dictionary where the keys are language codes (e.g., \"en\" for English)\n                        and the values are the corresponding names/representations in HTML entity format.\n    \"\"\"\n    # see https://github.com/sahajsk21/Anvesha/blob/master/src/components/topnav.js\n    languages_list = [\n        [\"ar\", \"&amp;#1575;&amp;#1604;&amp;#1593;&amp;#1585;&amp;#1576;&amp;#1610;&amp;#1577;\"],\n        [\"arz\", \"&amp;#1605;&amp;#1589;&amp;#1585;&amp;#1609;\"],\n        [\"ast\", \"Asturianu\"],\n        [\"az\", \"Az&amp;#601;rbaycanca\"],\n        [\"azb\", \"&amp;#1578;&amp;#1734;&amp;#1585;&amp;#1705;&amp;#1580;&amp;#1607;\"],\n        [\n            \"be\",\n            \"&amp;#1041;&amp;#1077;&amp;#1083;&amp;#1072;&amp;#1088;&amp;#1091;&amp;#1089;&amp;#1082;&amp;#1072;&amp;#1103;\",\n        ],\n        [\"bg\", \"&amp;#1041;&amp;#1098;&amp;#1083;&amp;#1075;&amp;#1072;&amp;#1088;&amp;#1089;&amp;#1082;&amp;#1080;\"],\n        [\"bn\", \"&amp;#2476;&amp;#2494;&amp;#2434;&amp;#2482;&amp;#2494;\"],\n        [\"ca\", \"Catal&amp;agrave;\"],\n        [\"ce\", \"&amp;#1053;&amp;#1086;&amp;#1093;&amp;#1095;&amp;#1080;&amp;#1081;&amp;#1085;\"],\n        [\"ceb\", \"Sinugboanong Binisaya\"],\n        [\"cs\", \"&amp;#268;e&amp;scaron;tina\"],\n        [\"cy\", \"Cymraeg\"],\n        [\"da\", \"Dansk\"],\n        [\"de\", \"Deutsch\"],\n        [\"el\", \"&amp;Epsilon;&amp;lambda;&amp;lambda;&amp;eta;&amp;nu;&amp;iota;&amp;kappa;&amp;#940;\"],\n        [\"en\", \"English\"],\n        [\"eo\", \"Esperanto\"],\n        [\"es\", \"Espa&amp;ntilde;ol\"],\n        [\"et\", \"Eesti\"],\n        [\"eu\", \"Euskara\"],\n        [\"fa\", \"&amp;#1601;&amp;#1575;&amp;#1585;&amp;#1587;&amp;#1740;\"],\n        [\"fi\", \"Suomi\"],\n        [\"fr\", \"Fran&amp;ccedil;ais\"],\n        [\"gl\", \"Galego\"],\n        [\"he\", \"&amp;#1506;&amp;#1489;&amp;#1512;&amp;#1497;&amp;#1514;\"],\n        [\"hi\", \"&amp;#2361;&amp;#2367;&amp;#2344;&amp;#2381;&amp;#2342;&amp;#2368;\"],\n        [\"hr\", \"Hrvatski\"],\n        [\"hu\", \"Magyar\"],\n        [\"hy\", \"&amp;#1344;&amp;#1377;&amp;#1397;&amp;#1381;&amp;#1408;&amp;#1381;&amp;#1398;\"],\n        [\"id\", \"Bahasa Indonesia\"],\n        [\"it\", \"Italiano\"],\n        [\"ja\", \"&amp;#26085;&amp;#26412;&amp;#35486;\"],\n        [\"ka\", \"&amp;#4325;&amp;#4304;&amp;#4320;&amp;#4311;&amp;#4323;&amp;#4314;&amp;#4312;\"],\n        [\n            \"kk\",\n            \"&amp;#1178;&amp;#1072;&amp;#1079;&amp;#1072;&amp;#1179;&amp;#1096;&amp;#1072; / Qazaq&amp;#351;a / &amp;#1602;&amp;#1575;&amp;#1586;&amp;#1575;&amp;#1602;&amp;#1588;&amp;#1575;\",\n        ],\n        [\"ko\", \"&amp;#54620;&amp;#44397;&amp;#50612;\"],\n        [\"la\", \"Latina\"],\n        [\"lt\", \"Lietuvi&amp;#371;\"],\n        [\"lv\", \"Latvie&amp;scaron;u\"],\n        [\"min\", \"Bahaso Minangkabau\"],\n        [\"ms\", \"Bahasa Melayu\"],\n        [\"nan\", \"B&amp;acirc;n-l&amp;acirc;m-g&amp;uacute; / H&amp;#333;-l&amp;oacute;-o&amp;#275;\"],\n        [\"nb\", \"Norsk (bokm&amp;aring;l)\"],\n        [\"nl\", \"Nederlands\"],\n        [\"nn\", \"Norsk (nynorsk)\"],\n        [\"pl\", \"Polski\"],\n        [\"pt\", \"Portugu&amp;ecirc;s\"],\n        [\"ro\", \"Rom&amp;acirc;n&amp;#259;\"],\n        [\"ru\", \"&amp;#1056;&amp;#1091;&amp;#1089;&amp;#1089;&amp;#1082;&amp;#1080;&amp;#1081;\"],\n        [\n            \"sh\",\n            \"Srpskohrvatski / &amp;#1057;&amp;#1088;&amp;#1087;&amp;#1089;&amp;#1082;&amp;#1086;&amp;#1093;&amp;#1088;&amp;#1074;&amp;#1072;&amp;#1090;&amp;#1089;&amp;#1082;&amp;#1080;\",\n        ],\n        [\"sk\", \"Sloven&amp;#269;ina\"],\n        [\"sl\", \"Sloven&amp;scaron;&amp;#269;ina\"],\n        [\"sr\", \"&amp;#1057;&amp;#1088;&amp;#1087;&amp;#1089;&amp;#1082;&amp;#1080; / Srpski\"],\n        [\"sv\", \"Svenska\"],\n        [\"ta\", \"&amp;#2980;&amp;#2990;&amp;#3007;&amp;#2996;&amp;#3021;\"],\n        [\"tg\", \"&amp;#1058;&amp;#1086;&amp;#1207;&amp;#1080;&amp;#1082;&amp;#1251;\"],\n        [\"th\", \"&amp;#3616;&amp;#3634;&amp;#3625;&amp;#3634;&amp;#3652;&amp;#3607;&amp;#3618;\"],\n        [\"tr\", \"T&amp;uuml;rk&amp;ccedil;e\"],\n        [\n            \"tt\",\n            \"&amp;#1058;&amp;#1072;&amp;#1090;&amp;#1072;&amp;#1088;&amp;#1095;&amp;#1072; / Tatar&amp;ccedil;a\",\n        ],\n        [\n            \"uk\",\n            \"&amp;#1059;&amp;#1082;&amp;#1088;&amp;#1072;&amp;#1111;&amp;#1085;&amp;#1089;&amp;#1100;&amp;#1082;&amp;#1072;\",\n        ],\n        [\"ur\", \"&amp;#1575;&amp;#1585;&amp;#1583;&amp;#1608;\"],\n        [\n            \"uz\",\n            \"O&amp;#699;zbekcha / &amp;#1038;&amp;#1079;&amp;#1073;&amp;#1077;&amp;#1082;&amp;#1095;&amp;#1072;\",\n        ],\n        [\"vi\", \"Ti&amp;#7871;ng Vi&amp;#7879;t\"],\n        [\"vo\", \"Volap&amp;uuml;k\"],\n        [\"war\", \"Winaray\"],\n        [\"yue\", \"&amp;#31925;&amp;#35486;\"],\n        [\"zh\", \"&amp;#20013;&amp;#25991;\"],\n    ]\n    languages_dict = {}\n    for code, desc in languages_list:\n        desc = html.unescape(desc)\n        languages_dict[code] = desc\n\n    return languages_dict\n</code></pre>"},{"location":"#ngwidgets.widgets.Link","title":"<code>Link</code>","text":"<p>a link</p> Source code in <code>ngwidgets/widgets.py</code> <pre><code>class Link:\n    \"\"\"\n    a link\n    \"\"\"\n\n    red = \"color: red;text-decoration: underline;\"\n    blue = \"color: blue;text-decoration: underline;\"\n\n    @staticmethod\n    def create(\n        url, text, tooltip=None, target=None, style: str = None, url_encode=False\n    ):\n        \"\"\"\n        Create a link for the given URL and text, with optional URL encoding.\n\n        Args:\n            url (str): The URL.\n            text (str): The link text.\n            tooltip (str): An optional tooltip.\n            target (str): Target attribute, e.g., _blank for opening the link in a new tab.\n            style (str): CSS style to be applied.\n            url_encode (bool): Flag to indicate if the URL needs encoding. default: False\n\n        Returns:\n            str: HTML anchor tag as a string.\n        \"\"\"\n        if url_encode:\n            url = quote(url)\n\n        title = \"\" if tooltip is None else f\" title='{tooltip}'\"\n        target = \"\" if target is None else f\" target='{target}'\"\n        if style is None:\n            style = Link.blue\n        style = f\" style='{style}'\"\n        link = f\"&lt;a href='{url}'{title}{target}{style}&gt;{text}&lt;/a&gt;\"\n        return link\n</code></pre>"},{"location":"#ngwidgets.widgets.Link.create","title":"<code>create(url, text, tooltip=None, target=None, style=None, url_encode=False)</code>  <code>staticmethod</code>","text":"<p>Create a link for the given URL and text, with optional URL encoding.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL.</p> required <code>text</code> <code>str</code> <p>The link text.</p> required <code>tooltip</code> <code>str</code> <p>An optional tooltip.</p> <code>None</code> <code>target</code> <code>str</code> <p>Target attribute, e.g., _blank for opening the link in a new tab.</p> <code>None</code> <code>style</code> <code>str</code> <p>CSS style to be applied.</p> <code>None</code> <code>url_encode</code> <code>bool</code> <p>Flag to indicate if the URL needs encoding. default: False</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <p>HTML anchor tag as a string.</p> Source code in <code>ngwidgets/widgets.py</code> <pre><code>@staticmethod\ndef create(\n    url, text, tooltip=None, target=None, style: str = None, url_encode=False\n):\n    \"\"\"\n    Create a link for the given URL and text, with optional URL encoding.\n\n    Args:\n        url (str): The URL.\n        text (str): The link text.\n        tooltip (str): An optional tooltip.\n        target (str): Target attribute, e.g., _blank for opening the link in a new tab.\n        style (str): CSS style to be applied.\n        url_encode (bool): Flag to indicate if the URL needs encoding. default: False\n\n    Returns:\n        str: HTML anchor tag as a string.\n    \"\"\"\n    if url_encode:\n        url = quote(url)\n\n    title = \"\" if tooltip is None else f\" title='{tooltip}'\"\n    target = \"\" if target is None else f\" target='{target}'\"\n    if style is None:\n        style = Link.blue\n    style = f\" style='{style}'\"\n    link = f\"&lt;a href='{url}'{title}{target}{style}&gt;{text}&lt;/a&gt;\"\n    return link\n</code></pre>"},{"location":"#ngwidgets.widgets_demo","title":"<code>widgets_demo</code>","text":"<p>Created on 2023-09-13</p> <p>@author: wf</p>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo","title":"<code>NiceGuiWidgetsDemo</code>","text":"<p>               Bases: <code>InputWebSolution</code></p> <p>Demonstration Solution</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>class NiceGuiWidgetsDemo(InputWebSolution):\n    \"\"\"\n    Demonstration Solution\n    \"\"\"\n\n    def __init__(self, webserver: \"NiceGuiWebserver\", client: Client):\n        \"\"\"\n        Initialize the NiceGuiWidgetsDemoContext.\n\n        Calls the constructor of the base class ClientWebContext to ensure proper initialization\n        and then performs any additional setup specific to NiceGuiWidgetsDemoContext.\n\n        Args:\n            webserver (NiceGuiWebserver): The webserver instance associated with this context.\n            client (Client): The client instance this context is associated with.\n        \"\"\"\n        super().__init__(webserver, client)  # Call to the superclass constructor\n        self.projects = self.webserver.projects\n\n    async def load_pdf(self):\n        self.pdf_viewer.load_pdf(self.pdf_url)\n\n    #    slider = ui.slider(min=1, max=max_pages, value=1)  # PDF pages usually start from 1\n    #    slider_label = ui.label().bind_text_from(slider, 'value')\n    # def update_page(e):\n    #    viewer.set_page(e.value)\n    async def show_components(self, solution_id):\n        def show():\n            project = self.projects.get_project4_solution_id(solution_id)\n            # Create a ComponentsView and display the components\n            components_view = ComponentsView(self, self.projects, project)\n            components_view.setup()\n\n        await self.setup_content_div(show)\n\n    async def show_solutions(self):\n        def show():\n            self.projects_view = ProjectsView(self)\n\n        await self.setup_content_div(show)\n\n    async def show_progress(self):\n        def show():\n            self.progress_bar = NiceguiProgressbar(\n                total=100, desc=\"working\", unit=\"step\"\n            )\n            self.progress_bar.progress.visible = True\n\n            def update_progress(step=1):\n                # Update the progress\n                self.progress_bar.update(step)\n                # Reset the progress bar if it reaches the total\n                if self.progress_bar.value &gt;= self.progress_bar.total:\n                    self.progress_bar.reset()\n\n            def toggle_auto():\n                if not hasattr(self, \"auto_timer\"):\n                    self.auto_timer = ui.timer(\n                        interval=0.3, callback=lambda: update_progress(), active=True\n                    )\n                else:\n                    self.auto_timer.active = not self.auto_timer.active\n\n            # Buttons for controlling the progress bar\n            with ui.row():\n                ui.button(\"--\", on_click=lambda: update_progress(-1))\n                ui.button(\"++\", on_click=lambda: update_progress(1))\n                ui.button(\"Auto\", on_click=toggle_auto)\n\n        await self.setup_content_div(show)\n\n    async def show_color_schema(self):\n        def show():\n            self.config.color_schema.display()\n            pass\n\n        await self.setup_content_div(show)\n\n    async def show_issue_1786(self):\n        \"\"\"\n        https://github.com/zauberzeug/nicegui/discussions/1786\n        \"\"\"\n\n        def foreground_no_slot(event):\n            ui.notify(f\"{event.sender.text} clicked\")\n\n        async def background_no_slot(event):\n            await run.io_bound(foreground_no_slot, event)\n\n        def foreground_with_slot(event):\n            with self.button_row:\n                ui.notify(f\"{event.sender.text} clicked\")\n\n        async def background_with_slot(event):\n            await run.io_bound(foreground_with_slot, event)\n\n        def show():\n            with ui.row() as self.button_row:\n                ui.button(\"foreground no slot\", on_click=foreground_no_slot)\n                ui.button(\"background no slot\", on_click=background_no_slot)\n                ui.button(\"foreground with slot\", on_click=foreground_with_slot)\n                ui.button(\"background with slot\", on_click=background_with_slot)\n\n        await self.setup_content_div(show)\n\n    async def show_langs(self):\n        \"\"\"\n        show languages selection\n        \"\"\"\n\n        def show():\n            # Default language set to English\n            default_lang = \"en\"\n\n            # Get available languages\n            languages = Lang.get_language_dict()\n            with ui.card().style(\"width: 12%\"):\n                with ui.row():\n                    ui.label(\"Lang code:\")\n                    # Create a label to display the chosen language with the default language\n                    lang_label = ui.label(default_lang)\n                with ui.row():\n                    ui.label(\"Select:\")\n                    # Create a dropdown for language selection with the default language selected\n                    # Bind the label text to the selection's value, so it updates automatically\n                    ui.select(languages, value=default_lang).bind_value(\n                        lang_label, \"text\"\n                    )\n\n        await self.setup_content_div(show)\n\n    async def show_pdf_viewer(self):\n        def show():\n            self.pdf_viewer = pdfviewer(debug=self.args.debug).classes(\"w-full h-96\")\n            self.tool_button(tooltip=\"reload\", icon=\"refresh\", handler=self.load_pdf)\n\n        await self.setup_content_div(show)\n\n    async def show_grid(self):\n        \"\"\"\n        show the lod grid\n        \"\"\"\n        next_name = [\n            0\n        ]  # Wrap next_name in a list to make it mutable from the nested function\n        self.names = [\n            \"Adam\",\n            \"Brian\",\n            \"Cindy\",\n            \"Diana\",\n            \"Evan\",\n            \"Fiona\",\n            \"George\",\n            \"Hannah\",\n            \"Ian\",\n            \"Jack\",\n            \"Kara\",\n            \"Liam\",\n            \"Mona\",\n            \"Nora\",\n            \"Oliver\",\n            \"Pam\",\n            \"Quincy\",\n            \"Rachel\",\n            \"Steve\",\n            \"Tina\",\n            \"Uma\",\n            \"Victor\",\n            \"Wendy\",\n            \"Xavier\",\n            \"Yvonne\",\n            \"Zane\",\n            \"Ashley\",\n            \"Ben\",\n            \"Charlotte\",\n            \"Derek\",  # Added more names for a total of 30\n        ]\n\n        def gen_name() -&gt; str:\n            \"\"\"\n            name generator\n            \"\"\"\n            new_name = self.names[next_name[0]]\n            next_name[0] += 1  # Increment the index\n            if next_name[0] &gt;= len(self.names):\n                next_name[\n                    0\n                ] = 0  # Reset the index if it reaches the end of the names list\n            return new_name\n\n        lod = [\n            {\n                \"name\": \"Alice\",\n                \"age\": 18,\n                \"parent\": \"David\",\n                \"married\": \"2023-05-24\",\n                \"weight\": 96.48,\n                \"member\": False,\n            },\n            {\n                \"name\": \"Bob\",\n                \"age\": 21,\n                \"parent\": \"Eve\",\n                \"married\": \"2023-01-05\",\n                \"weight\": 87.85,\n                \"member\": True,\n            },\n            {\n                \"name\": \"Carol\",\n                \"age\": 42,\n                \"parent\": \"Frank\",\n                \"married\": \"2007-09-27\",\n                \"weight\": 51.81,\n                \"member\": False,\n            },\n            {\n                \"name\": \"Dave\",\n                \"age\": 35,\n                \"parent\": \"Alice\",\n                \"married\": \"2019-04-12\",\n                \"weight\": 72.28,\n                \"member\": True,\n            },\n            {\n                \"name\": \"Ella\",\n                \"age\": 29,\n                \"parent\": \"Bob\",\n                \"married\": \"2013-06-26\",\n                \"weight\": 58.09,\n                \"member\": False,\n            },\n            {\n                \"name\": \"Frank\",\n                \"age\": 28,\n                \"parent\": \"Bob\",\n                \"married\": \"2027-05-25\",\n                \"weight\": 81.32,\n                \"member\": True,\n            },\n            {\n                \"name\": \"Grace\",\n                \"age\": 21,\n                \"parent\": \"Ella\",\n                \"married\": \"2023-07-02\",\n                \"weight\": 95.36,\n                \"member\": False,\n            },\n            {\n                \"name\": \"Hannah\",\n                \"age\": 49,\n                \"parent\": \"Frank\",\n                \"married\": \"1994-01-14\",\n                \"weight\": 66.14,\n                \"member\": True,\n            },\n            {\n                \"name\": \"Ian\",\n                \"age\": 43,\n                \"parent\": \"Bob\",\n                \"married\": \"2015-05-15\",\n                \"weight\": 66.94,\n                \"member\": False,\n            },\n            {\n                \"name\": \"Jill\",\n                \"age\": 22,\n                \"parent\": \"Carol\",\n                \"married\": \"2019-06-05\",\n                \"weight\": 75.45,\n                \"member\": False,\n            },\n            {\n                \"name\": \"Kevin\",\n                \"age\": 39,\n                \"parent\": \"Dave\",\n                \"married\": \"2008-12-09\",\n                \"weight\": 95.58,\n                \"member\": True,\n            },\n            {\n                \"name\": \"Liam\",\n                \"age\": 46,\n                \"parent\": \"Bob\",\n                \"married\": \"2001-09-15\",\n                \"weight\": 86.69,\n                \"member\": True,\n            },\n            {\n                \"name\": \"Mona\",\n                \"age\": 31,\n                \"parent\": \"Alice\",\n                \"married\": \"2023-07-01\",\n                \"weight\": 88.72,\n                \"member\": False,\n            },\n        ]\n\n        def show():\n            with ui.grid(columns=1) as self.grid_container:\n                grid_config = GridConfig(\n                    key_col=\"name\",\n                    keygen_callback=gen_name,  # Use name generator for new names\n                    editable=True,\n                    multiselect=True,\n                    with_buttons=True,\n                    debug=self.args.debug,\n                )\n                self.lod_grid = ListOfDictsGrid(lod=lod, config=grid_config)\n                self.lod_grid.set_checkbox_selection(\"name\")\n                self.lod_grid.set_checkbox_renderer(\"member\")\n\n                # setup some grid event listeners\n                # https://www.ag-grid.com/javascript-data-grid/grid-events/\n                self.lod_grid.ag_grid.on(\"cellClicked\", self.on_cell_clicked)\n                self.lod_grid.ag_grid.on(\n                    \"cellDoubleClicked\", self.on_cell_double_clicked\n                )\n                self.lod_grid.ag_grid.on(\"rowSelected\", self.on_row_selected)\n                self.lod_grid.ag_grid.on(\"selectionChanged\", self.on_selection_changed)\n                self.lod_grid.ag_grid.on(\"cellValueChanged\", self.on_cell_value_changed)\n\n        await self.setup_content_div(show)\n\n    async def on_cell_clicked(self, event):\n        await self.on_grid_event(event, \"cellClicked\")\n\n    async def on_cell_double_clicked(self, event):\n        await self.on_grid_event(event, \"cellDoubleClicked\")\n\n    async def on_row_selected(self, event):\n        await self.on_grid_event(event, \"rowSelected\")\n\n    async def on_selection_changed(self, event):\n        await self.on_grid_event(event, \"selectionChanged\")\n\n    async def on_cell_value_changed(self, event):\n        await self.on_grid_event(event, \"cellValueChanged\")\n\n    async def on_grid_event(self, event, source):\n        \"\"\"\n        React on ag_grid event\n        See https://www.ag-grid.com/javascript-data-grid/grid-events/\n\n        \"\"\"\n        args = event.args\n        # Custom logic or message formatting can be based on the source\n        if source in [\"cellDoubleClicked\", \"cellClicked\"]:\n            msg = f\"{source}: row:  {args['rowId']} column {args['colId']}\"\n        elif source == \"cellValueChanged\":\n            msg = f\"{source}: {args['oldValue']} \u2192 {args['newValue']} row:  {args['rowId']} column {args['colId']}\"\n        else:\n            msg = f\"grid event from {source}: {event.args}\"\n        # lambda event: ui.notify(f'selected row: {event.args[\"rowIndex\"]}'))\n        # lambda event: ui.notify(f'Cell value: {event.args[\"value\"]}'))\n        # self.on_property_grid_selection_change\n        print(msg)\n\n        ui.notify(msg)\n\n    async def show_dictedit(self):\n        \"\"\"\n        show the DictEdit examples\n        \"\"\"\n        # Updated sample_dict with a datetime field for enrollment_date\n        sample_dict = {\n            \"given_name\": \"Alice\",\n            \"family_name\": \"Wonderland\",\n            \"age\": 30,\n            \"is_student\": False,\n            \"enrollment_date\": datetime.now(),  # Set default to current time\n        }\n\n        sample_element = Element(\"hydrogen\", \"Q556\", 1)\n\n        def show():\n            customization = {\n                \"_form_\": {\"title\": \"Student\", \"icon\": \"person\"},\n                \"given_name\": {\"label\": \"Given Name\", \"size\": 50},\n                \"family_name\": {\"label\": \"Family Name\", \"size\": 50},\n                \"enrollment_date\": {\n                    \"label\": \"Enrollment Date\",\n                    \"widget\": \"datetime\",\n                },  # Customization for datetime\n            }\n            with ui.grid(columns=3):\n                self.dict_edit1 = DictEdit(sample_dict, customization=customization)\n                self.dict_edit1.expansion.open()\n                self.dict_edit2 = DictEdit(sample_element)\n                self.dict_edit2.expansion.open()\n\n        await self.setup_content_div(show)\n\n    async def show_debounce_demo(self):\n        \"\"\"\n        Show an input field and search wikipedia\n        \"\"\"\n\n        def show():\n            async def perform_search(query: str):\n                \"\"\"Perform a Wikipedia search and display the results.\"\"\"\n                with result_row:\n                    result_row.clear()\n                    ui.notify(\n                        f\"Searching... {query}\"\n                    )  # Notify user that search is happening\n                search_instance = WikipediaSearch(\n                    country=self.country\n                )  # Create an instance of WikipediaSearch\n                results = search_instance.search(query, limit=int(self.limit))\n                with result_row:\n                    result_row.clear()  # Clear the 'Searching...' label or previous results\n                    if results:\n                        for result in results:\n                            link = Link.create(result[\"url\"], result[\"title\"])\n                            html = f\"{link}:{result['summary']}&lt;br&gt;\"\n                            ui.html(html)\n                    else:\n                        ui.label(\"No results found.\")\n\n            async def on_input_change(_event=None):\n                await debouncer_ui.debounce(perform_search, search_input.value)\n\n            self.country = \"en\"\n            self.limit = 7\n            wikipedias = [\"en\", \"zh\", \"es\", \"de\", \"fr\", \"ru\", \"it\", \"pt\", \"hi\"]\n            with ui.row():\n                search_input = ui.input(\"Search Wikipedia:\", on_change=on_input_change)\n                _country_select = ui.select(\n                    wikipedias,\n                    label=\"wikipedia\",\n                    value=self.country,\n                    on_change=on_input_change,\n                ).bind_value_to(self, \"country\")\n                _limit_input = (\n                    ui.number(\n                        label=\"limit\", value=self.limit, on_change=on_input_change\n                    )\n                    .bind_value_to(self, \"limit\")\n                    .props(\"size=5\")\n                )\n\n            result_row = ui.row()  # This will be the container for search results\n            debouncer_ui = DebouncerUI(parent=result_row)\n\n        await self.setup_content_div(show)\n\n    async def show_hide_show_demo(self):\n        \"\"\"\n        Demonstrate the HideShow project.\n        \"\"\"\n\n        def show():\n            hide_show_section = HideShow((\"Hide\", \"Show More\"))\n            with hide_show_section.content_div:\n                ui.label(\n                    \"This is the hidden content. Click the button to hide/show this text.\"\n                )\n\n        await self.setup_content_div(show)\n\n    async def show_tristate_demo(self):\n        \"\"\"\n        Demonstrate the Tristate project.\n        \"\"\"\n\n        def on_change():\n            ui.notify(\n                f\"New State: {self.tristate.current_icon_index} ({self.tristate.utf8_icon})\"\n            )\n\n        def update_icon_set_label(icon_set_name: str):\n            # Update the label to show the icons of the new set\n            self.icon_set_label.set_text(\n                f'Icons in Set {icon_set_name}: {\" \".join(Tristate.ICON_SETS[icon_set_name])}'\n            )\n\n        def on_icon_set_change(event):\n            \"\"\"\n            react on change icon set\n            \"\"\"\n            new_icon_set = event.value\n            self.tristate.icon_set = Tristate.ICON_SETS[new_icon_set]\n            self.tristate.current_icon_index = 0  # Reset to first icon of new set\n            self.tristate.update_props()\n            update_icon_set_label(new_icon_set)\n\n        def show():\n            ui.label(\"Tristate Demo:\")\n            # Initialize Tristate component with the default icon set\n            default_icon_set_name = \"marks\"\n\n            # Label to display the icons in the current set\n            self.icon_set_label = ui.label()\n            update_icon_set_label(default_icon_set_name)\n\n            # Dropdown for selecting the icon set\n            icon_set_names = list(Tristate.ICON_SETS.keys())\n            self.add_select(\n                \"Choose Icon Set\", icon_set_names, on_change=on_icon_set_change\n            )\n\n            ui.label(\"Click to try:\")\n            self.tristate = Tristate(\n                icon_set_name=default_icon_set_name, on_change=on_change\n            )\n\n        await self.setup_content_div(show)\n\n\n    async def show_colormap_demo(self):\n        \"\"\"\n        Display the ColorMap demo interactively \n        allowing to set grid size, start and end color\n        and luminance and saturation parameters\n        \"\"\"\n\n        def update_grid(color_map, grid_container):\n            grid_container.clear()\n            with grid_container:\n                grid = ui.grid(columns=color_map.num_levels)\n                for row in range(color_map.num_levels):\n                    for col in range(color_map.num_levels):\n                        color = color_map.get_color(row, col)\n                        with grid:\n                            button=ui.button(color.hex_l,color=f\"{color.hex_l}\")\n                            button.style(\n                                f\"\"\"\n                                width: 50px;\n                                height: 50px;\n                                font-size: 8px;\n                                padding: 2px;\n                                \"\"\"\n                            )\n\n        def create_slider(label, min_val, max_val, value, step, on_change):\n            ui.label(f\"{label}:\")\n            slider = ui.slider(min=min_val, max=max_val, value=value, step=step).props('label-always')\n            slider.on('update:model-value', on_change)\n            return slider\n\n        def show():\n            color_map1 = ColorMap()\n\n            def refresh_color_map():\n                color_map = ColorMap(\n                    start_color=start.value,\n                    end_color=end.value,\n                    num_levels=int(levels.value),\n                    lum_min=lum_min.value,\n                    lum_max=lum_max.value,\n                    sat_f=sat.value\n                )\n                update_grid(color_map, grid_container)\n\n            with ui.row():\n                with ui.card().classes('w-1/3'):\n                    ui.label(\"ColorMap Demo\").classes(\"text-h4\")\n                    with ui.row():\n                        start = ui.color_input(\"Start Color\", value=color_map1.start_color.hex_l, on_change=refresh_color_map)\n                        end = ui.color_input(\"End Color\", value=color_map1.end_color.hex_l, on_change=refresh_color_map)                    \n                    with ui.grid(columns=2):  \n                        levels = create_slider(\"Levels\", 2, 10, 5, 1, refresh_color_map)\n                        lum_min = create_slider(\"Min Luminance\", 0, 1, color_map1.lum_min, 0.05, refresh_color_map)\n                        lum_max = create_slider(\"Max Luminance\", 0, 1, color_map1.lum_max, 0.02, refresh_color_map)\n                        sat = create_slider(\"Saturation\", 0, 1, color_map1.sat_f, 0.05, refresh_color_map)\n                    ui.button(\"Refresh\", on_click=refresh_color_map)\n\n                grid_container = ui.card().classes('w-1/3')\n\n                refresh_color_map()  # Initial display\n\n        await self.setup_content_div(show)\n\n    async def show_combobox_demo(self):\n        \"\"\"\n        Demo to showcase the ComboBox class with both predefined options and user input capability,\n        including a button to dynamically change the options using a list of chemical elements.\n        \"\"\"\n\n        def on_combobox_change(event):\n            \"\"\"Handle changes in the ComboBox selection.\"\"\"\n            selected_value = (\n                event.sender.value\n            )  # Fetching the current value from the combobox\n            ui.notify(f\"Selected: {selected_value}\")\n\n        def update_combobox_options():\n            \"\"\"Randomly modifies the list of chemical elements and updates the ComboBox options.\"\"\"\n            random_size = random.randint(10, len(self.elements))  # Random subset size\n            new_elements = random.sample(self.elements, random_size)\n            self.element_combobox.update_options(new_elements)\n            ui.notify(f\"Options have been updated to show {random_size} elements.\")\n\n        def show():\n            with ui.row():\n                # Initial list of chemical elements\n                self.elements = [\n                    \"Hydrogen\",\n                    \"Helium\",\n                    \"Lithium\",\n                    \"Beryllium\",\n                    \"Boron\",\n                    \"Carbon\",\n                    \"Nitrogen\",\n                    \"Oxygen\",\n                    \"Fluorine\",\n                    \"Neon\",\n                    \"Sodium\",\n                    \"Magnesium\",\n                    \"Aluminum\",\n                    \"Silicon\",\n                    \"Phosphorus\",\n                    \"Sulfur\",\n                    \"Chlorine\",\n                    \"Argon\",\n                    \"Potassium\",\n                    \"Calcium\",\n                    # Extended to cover more elements up to Zinc\n                    \"Scandium\",\n                    \"Titanium\",\n                    \"Vanadium\",\n                    \"Chromium\",\n                    \"Manganese\",\n                    \"Iron\",\n                    \"Cobalt\",\n                    \"Nickel\",\n                    \"Copper\",\n                    \"Zinc\",\n                ]\n                self.element_combobox = ComboBox(\n                    label=\"Select a Chemical Element\",\n                    width_chars=35,\n                    options=self.elements,\n                    clearable=True,\n                    new_value_mode=\"add-unique\",\n                    on_change=on_combobox_change,\n                )\n\n                # Button to update the options in the ComboBox\n                ui.button(\"Update Options\", on_click=update_combobox_options)\n\n        await self.setup_content_div(show)\n\n    async def home(self):\n        \"\"\"\n        provide the main content page\n        \"\"\"\n\n        def setup_home():\n            # Define the links and labels in a dictionary\n            links = {\n                \"nicegui solutions bazaar\": \"/solutions\",\n                \"ColorMap Demo\": \"/colormap\",\n                \"ColorSchema\": \"/color_schema\",\n                \"ComboBox Demo\": \"/combobox\",\n                \"Debounce Demo\": \"/stars\",\n                \"DictEdit\": \"/dictedit\",\n                \"HideShow Demo\": \"/hideshow\",\n                \"Lang\": \"/langs\",\n                \"ListOfDictsGrid\": \"/grid\",\n                \"Tristate Demo\": \"/tristate\",\n                \"pdfviewer\": \"/pdfviewer\",\n                \"Progressbar\": \"/progress\",\n            }\n\n            # Generate the HTML using the dictionary\n            html_content = \"&lt;ul&gt;\"\n            for label, link in links.items():\n                html_content += f'&lt;li&gt;&lt;a href=\"{link}\"&gt;{label}&lt;/a&gt;&lt;/li&gt;'\n            html_content += \"&lt;/ul&gt;\"\n\n            # html_content now contains the HTML code to render the list of links\n            ui.html(html_content)\n\n        await self.setup_content_div(setup_home)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo.__init__","title":"<code>__init__(webserver, client)</code>","text":"<p>Initialize the NiceGuiWidgetsDemoContext.</p> <p>Calls the constructor of the base class ClientWebContext to ensure proper initialization and then performs any additional setup specific to NiceGuiWidgetsDemoContext.</p> <p>Parameters:</p> Name Type Description Default <code>webserver</code> <code>NiceGuiWebserver</code> <p>The webserver instance associated with this context.</p> required <code>client</code> <code>Client</code> <p>The client instance this context is associated with.</p> required Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>def __init__(self, webserver: \"NiceGuiWebserver\", client: Client):\n    \"\"\"\n    Initialize the NiceGuiWidgetsDemoContext.\n\n    Calls the constructor of the base class ClientWebContext to ensure proper initialization\n    and then performs any additional setup specific to NiceGuiWidgetsDemoContext.\n\n    Args:\n        webserver (NiceGuiWebserver): The webserver instance associated with this context.\n        client (Client): The client instance this context is associated with.\n    \"\"\"\n    super().__init__(webserver, client)  # Call to the superclass constructor\n    self.projects = self.webserver.projects\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo.home","title":"<code>home()</code>  <code>async</code>","text":"<p>provide the main content page</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>async def home(self):\n    \"\"\"\n    provide the main content page\n    \"\"\"\n\n    def setup_home():\n        # Define the links and labels in a dictionary\n        links = {\n            \"nicegui solutions bazaar\": \"/solutions\",\n            \"ColorMap Demo\": \"/colormap\",\n            \"ColorSchema\": \"/color_schema\",\n            \"ComboBox Demo\": \"/combobox\",\n            \"Debounce Demo\": \"/stars\",\n            \"DictEdit\": \"/dictedit\",\n            \"HideShow Demo\": \"/hideshow\",\n            \"Lang\": \"/langs\",\n            \"ListOfDictsGrid\": \"/grid\",\n            \"Tristate Demo\": \"/tristate\",\n            \"pdfviewer\": \"/pdfviewer\",\n            \"Progressbar\": \"/progress\",\n        }\n\n        # Generate the HTML using the dictionary\n        html_content = \"&lt;ul&gt;\"\n        for label, link in links.items():\n            html_content += f'&lt;li&gt;&lt;a href=\"{link}\"&gt;{label}&lt;/a&gt;&lt;/li&gt;'\n        html_content += \"&lt;/ul&gt;\"\n\n        # html_content now contains the HTML code to render the list of links\n        ui.html(html_content)\n\n    await self.setup_content_div(setup_home)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo.on_grid_event","title":"<code>on_grid_event(event, source)</code>  <code>async</code>","text":"<p>React on ag_grid event See https://www.ag-grid.com/javascript-data-grid/grid-events/</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>async def on_grid_event(self, event, source):\n    \"\"\"\n    React on ag_grid event\n    See https://www.ag-grid.com/javascript-data-grid/grid-events/\n\n    \"\"\"\n    args = event.args\n    # Custom logic or message formatting can be based on the source\n    if source in [\"cellDoubleClicked\", \"cellClicked\"]:\n        msg = f\"{source}: row:  {args['rowId']} column {args['colId']}\"\n    elif source == \"cellValueChanged\":\n        msg = f\"{source}: {args['oldValue']} \u2192 {args['newValue']} row:  {args['rowId']} column {args['colId']}\"\n    else:\n        msg = f\"grid event from {source}: {event.args}\"\n    # lambda event: ui.notify(f'selected row: {event.args[\"rowIndex\"]}'))\n    # lambda event: ui.notify(f'Cell value: {event.args[\"value\"]}'))\n    # self.on_property_grid_selection_change\n    print(msg)\n\n    ui.notify(msg)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo.show_colormap_demo","title":"<code>show_colormap_demo()</code>  <code>async</code>","text":"<p>Display the ColorMap demo interactively  allowing to set grid size, start and end color and luminance and saturation parameters</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>async def show_colormap_demo(self):\n    \"\"\"\n    Display the ColorMap demo interactively \n    allowing to set grid size, start and end color\n    and luminance and saturation parameters\n    \"\"\"\n\n    def update_grid(color_map, grid_container):\n        grid_container.clear()\n        with grid_container:\n            grid = ui.grid(columns=color_map.num_levels)\n            for row in range(color_map.num_levels):\n                for col in range(color_map.num_levels):\n                    color = color_map.get_color(row, col)\n                    with grid:\n                        button=ui.button(color.hex_l,color=f\"{color.hex_l}\")\n                        button.style(\n                            f\"\"\"\n                            width: 50px;\n                            height: 50px;\n                            font-size: 8px;\n                            padding: 2px;\n                            \"\"\"\n                        )\n\n    def create_slider(label, min_val, max_val, value, step, on_change):\n        ui.label(f\"{label}:\")\n        slider = ui.slider(min=min_val, max=max_val, value=value, step=step).props('label-always')\n        slider.on('update:model-value', on_change)\n        return slider\n\n    def show():\n        color_map1 = ColorMap()\n\n        def refresh_color_map():\n            color_map = ColorMap(\n                start_color=start.value,\n                end_color=end.value,\n                num_levels=int(levels.value),\n                lum_min=lum_min.value,\n                lum_max=lum_max.value,\n                sat_f=sat.value\n            )\n            update_grid(color_map, grid_container)\n\n        with ui.row():\n            with ui.card().classes('w-1/3'):\n                ui.label(\"ColorMap Demo\").classes(\"text-h4\")\n                with ui.row():\n                    start = ui.color_input(\"Start Color\", value=color_map1.start_color.hex_l, on_change=refresh_color_map)\n                    end = ui.color_input(\"End Color\", value=color_map1.end_color.hex_l, on_change=refresh_color_map)                    \n                with ui.grid(columns=2):  \n                    levels = create_slider(\"Levels\", 2, 10, 5, 1, refresh_color_map)\n                    lum_min = create_slider(\"Min Luminance\", 0, 1, color_map1.lum_min, 0.05, refresh_color_map)\n                    lum_max = create_slider(\"Max Luminance\", 0, 1, color_map1.lum_max, 0.02, refresh_color_map)\n                    sat = create_slider(\"Saturation\", 0, 1, color_map1.sat_f, 0.05, refresh_color_map)\n                ui.button(\"Refresh\", on_click=refresh_color_map)\n\n            grid_container = ui.card().classes('w-1/3')\n\n            refresh_color_map()  # Initial display\n\n    await self.setup_content_div(show)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo.show_combobox_demo","title":"<code>show_combobox_demo()</code>  <code>async</code>","text":"<p>Demo to showcase the ComboBox class with both predefined options and user input capability, including a button to dynamically change the options using a list of chemical elements.</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>async def show_combobox_demo(self):\n    \"\"\"\n    Demo to showcase the ComboBox class with both predefined options and user input capability,\n    including a button to dynamically change the options using a list of chemical elements.\n    \"\"\"\n\n    def on_combobox_change(event):\n        \"\"\"Handle changes in the ComboBox selection.\"\"\"\n        selected_value = (\n            event.sender.value\n        )  # Fetching the current value from the combobox\n        ui.notify(f\"Selected: {selected_value}\")\n\n    def update_combobox_options():\n        \"\"\"Randomly modifies the list of chemical elements and updates the ComboBox options.\"\"\"\n        random_size = random.randint(10, len(self.elements))  # Random subset size\n        new_elements = random.sample(self.elements, random_size)\n        self.element_combobox.update_options(new_elements)\n        ui.notify(f\"Options have been updated to show {random_size} elements.\")\n\n    def show():\n        with ui.row():\n            # Initial list of chemical elements\n            self.elements = [\n                \"Hydrogen\",\n                \"Helium\",\n                \"Lithium\",\n                \"Beryllium\",\n                \"Boron\",\n                \"Carbon\",\n                \"Nitrogen\",\n                \"Oxygen\",\n                \"Fluorine\",\n                \"Neon\",\n                \"Sodium\",\n                \"Magnesium\",\n                \"Aluminum\",\n                \"Silicon\",\n                \"Phosphorus\",\n                \"Sulfur\",\n                \"Chlorine\",\n                \"Argon\",\n                \"Potassium\",\n                \"Calcium\",\n                # Extended to cover more elements up to Zinc\n                \"Scandium\",\n                \"Titanium\",\n                \"Vanadium\",\n                \"Chromium\",\n                \"Manganese\",\n                \"Iron\",\n                \"Cobalt\",\n                \"Nickel\",\n                \"Copper\",\n                \"Zinc\",\n            ]\n            self.element_combobox = ComboBox(\n                label=\"Select a Chemical Element\",\n                width_chars=35,\n                options=self.elements,\n                clearable=True,\n                new_value_mode=\"add-unique\",\n                on_change=on_combobox_change,\n            )\n\n            # Button to update the options in the ComboBox\n            ui.button(\"Update Options\", on_click=update_combobox_options)\n\n    await self.setup_content_div(show)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo.show_debounce_demo","title":"<code>show_debounce_demo()</code>  <code>async</code>","text":"<p>Show an input field and search wikipedia</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>async def show_debounce_demo(self):\n    \"\"\"\n    Show an input field and search wikipedia\n    \"\"\"\n\n    def show():\n        async def perform_search(query: str):\n            \"\"\"Perform a Wikipedia search and display the results.\"\"\"\n            with result_row:\n                result_row.clear()\n                ui.notify(\n                    f\"Searching... {query}\"\n                )  # Notify user that search is happening\n            search_instance = WikipediaSearch(\n                country=self.country\n            )  # Create an instance of WikipediaSearch\n            results = search_instance.search(query, limit=int(self.limit))\n            with result_row:\n                result_row.clear()  # Clear the 'Searching...' label or previous results\n                if results:\n                    for result in results:\n                        link = Link.create(result[\"url\"], result[\"title\"])\n                        html = f\"{link}:{result['summary']}&lt;br&gt;\"\n                        ui.html(html)\n                else:\n                    ui.label(\"No results found.\")\n\n        async def on_input_change(_event=None):\n            await debouncer_ui.debounce(perform_search, search_input.value)\n\n        self.country = \"en\"\n        self.limit = 7\n        wikipedias = [\"en\", \"zh\", \"es\", \"de\", \"fr\", \"ru\", \"it\", \"pt\", \"hi\"]\n        with ui.row():\n            search_input = ui.input(\"Search Wikipedia:\", on_change=on_input_change)\n            _country_select = ui.select(\n                wikipedias,\n                label=\"wikipedia\",\n                value=self.country,\n                on_change=on_input_change,\n            ).bind_value_to(self, \"country\")\n            _limit_input = (\n                ui.number(\n                    label=\"limit\", value=self.limit, on_change=on_input_change\n                )\n                .bind_value_to(self, \"limit\")\n                .props(\"size=5\")\n            )\n\n        result_row = ui.row()  # This will be the container for search results\n        debouncer_ui = DebouncerUI(parent=result_row)\n\n    await self.setup_content_div(show)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo.show_dictedit","title":"<code>show_dictedit()</code>  <code>async</code>","text":"<p>show the DictEdit examples</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>async def show_dictedit(self):\n    \"\"\"\n    show the DictEdit examples\n    \"\"\"\n    # Updated sample_dict with a datetime field for enrollment_date\n    sample_dict = {\n        \"given_name\": \"Alice\",\n        \"family_name\": \"Wonderland\",\n        \"age\": 30,\n        \"is_student\": False,\n        \"enrollment_date\": datetime.now(),  # Set default to current time\n    }\n\n    sample_element = Element(\"hydrogen\", \"Q556\", 1)\n\n    def show():\n        customization = {\n            \"_form_\": {\"title\": \"Student\", \"icon\": \"person\"},\n            \"given_name\": {\"label\": \"Given Name\", \"size\": 50},\n            \"family_name\": {\"label\": \"Family Name\", \"size\": 50},\n            \"enrollment_date\": {\n                \"label\": \"Enrollment Date\",\n                \"widget\": \"datetime\",\n            },  # Customization for datetime\n        }\n        with ui.grid(columns=3):\n            self.dict_edit1 = DictEdit(sample_dict, customization=customization)\n            self.dict_edit1.expansion.open()\n            self.dict_edit2 = DictEdit(sample_element)\n            self.dict_edit2.expansion.open()\n\n    await self.setup_content_div(show)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo.show_grid","title":"<code>show_grid()</code>  <code>async</code>","text":"<p>show the lod grid</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>async def show_grid(self):\n    \"\"\"\n    show the lod grid\n    \"\"\"\n    next_name = [\n        0\n    ]  # Wrap next_name in a list to make it mutable from the nested function\n    self.names = [\n        \"Adam\",\n        \"Brian\",\n        \"Cindy\",\n        \"Diana\",\n        \"Evan\",\n        \"Fiona\",\n        \"George\",\n        \"Hannah\",\n        \"Ian\",\n        \"Jack\",\n        \"Kara\",\n        \"Liam\",\n        \"Mona\",\n        \"Nora\",\n        \"Oliver\",\n        \"Pam\",\n        \"Quincy\",\n        \"Rachel\",\n        \"Steve\",\n        \"Tina\",\n        \"Uma\",\n        \"Victor\",\n        \"Wendy\",\n        \"Xavier\",\n        \"Yvonne\",\n        \"Zane\",\n        \"Ashley\",\n        \"Ben\",\n        \"Charlotte\",\n        \"Derek\",  # Added more names for a total of 30\n    ]\n\n    def gen_name() -&gt; str:\n        \"\"\"\n        name generator\n        \"\"\"\n        new_name = self.names[next_name[0]]\n        next_name[0] += 1  # Increment the index\n        if next_name[0] &gt;= len(self.names):\n            next_name[\n                0\n            ] = 0  # Reset the index if it reaches the end of the names list\n        return new_name\n\n    lod = [\n        {\n            \"name\": \"Alice\",\n            \"age\": 18,\n            \"parent\": \"David\",\n            \"married\": \"2023-05-24\",\n            \"weight\": 96.48,\n            \"member\": False,\n        },\n        {\n            \"name\": \"Bob\",\n            \"age\": 21,\n            \"parent\": \"Eve\",\n            \"married\": \"2023-01-05\",\n            \"weight\": 87.85,\n            \"member\": True,\n        },\n        {\n            \"name\": \"Carol\",\n            \"age\": 42,\n            \"parent\": \"Frank\",\n            \"married\": \"2007-09-27\",\n            \"weight\": 51.81,\n            \"member\": False,\n        },\n        {\n            \"name\": \"Dave\",\n            \"age\": 35,\n            \"parent\": \"Alice\",\n            \"married\": \"2019-04-12\",\n            \"weight\": 72.28,\n            \"member\": True,\n        },\n        {\n            \"name\": \"Ella\",\n            \"age\": 29,\n            \"parent\": \"Bob\",\n            \"married\": \"2013-06-26\",\n            \"weight\": 58.09,\n            \"member\": False,\n        },\n        {\n            \"name\": \"Frank\",\n            \"age\": 28,\n            \"parent\": \"Bob\",\n            \"married\": \"2027-05-25\",\n            \"weight\": 81.32,\n            \"member\": True,\n        },\n        {\n            \"name\": \"Grace\",\n            \"age\": 21,\n            \"parent\": \"Ella\",\n            \"married\": \"2023-07-02\",\n            \"weight\": 95.36,\n            \"member\": False,\n        },\n        {\n            \"name\": \"Hannah\",\n            \"age\": 49,\n            \"parent\": \"Frank\",\n            \"married\": \"1994-01-14\",\n            \"weight\": 66.14,\n            \"member\": True,\n        },\n        {\n            \"name\": \"Ian\",\n            \"age\": 43,\n            \"parent\": \"Bob\",\n            \"married\": \"2015-05-15\",\n            \"weight\": 66.94,\n            \"member\": False,\n        },\n        {\n            \"name\": \"Jill\",\n            \"age\": 22,\n            \"parent\": \"Carol\",\n            \"married\": \"2019-06-05\",\n            \"weight\": 75.45,\n            \"member\": False,\n        },\n        {\n            \"name\": \"Kevin\",\n            \"age\": 39,\n            \"parent\": \"Dave\",\n            \"married\": \"2008-12-09\",\n            \"weight\": 95.58,\n            \"member\": True,\n        },\n        {\n            \"name\": \"Liam\",\n            \"age\": 46,\n            \"parent\": \"Bob\",\n            \"married\": \"2001-09-15\",\n            \"weight\": 86.69,\n            \"member\": True,\n        },\n        {\n            \"name\": \"Mona\",\n            \"age\": 31,\n            \"parent\": \"Alice\",\n            \"married\": \"2023-07-01\",\n            \"weight\": 88.72,\n            \"member\": False,\n        },\n    ]\n\n    def show():\n        with ui.grid(columns=1) as self.grid_container:\n            grid_config = GridConfig(\n                key_col=\"name\",\n                keygen_callback=gen_name,  # Use name generator for new names\n                editable=True,\n                multiselect=True,\n                with_buttons=True,\n                debug=self.args.debug,\n            )\n            self.lod_grid = ListOfDictsGrid(lod=lod, config=grid_config)\n            self.lod_grid.set_checkbox_selection(\"name\")\n            self.lod_grid.set_checkbox_renderer(\"member\")\n\n            # setup some grid event listeners\n            # https://www.ag-grid.com/javascript-data-grid/grid-events/\n            self.lod_grid.ag_grid.on(\"cellClicked\", self.on_cell_clicked)\n            self.lod_grid.ag_grid.on(\n                \"cellDoubleClicked\", self.on_cell_double_clicked\n            )\n            self.lod_grid.ag_grid.on(\"rowSelected\", self.on_row_selected)\n            self.lod_grid.ag_grid.on(\"selectionChanged\", self.on_selection_changed)\n            self.lod_grid.ag_grid.on(\"cellValueChanged\", self.on_cell_value_changed)\n\n    await self.setup_content_div(show)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo.show_hide_show_demo","title":"<code>show_hide_show_demo()</code>  <code>async</code>","text":"<p>Demonstrate the HideShow project.</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>async def show_hide_show_demo(self):\n    \"\"\"\n    Demonstrate the HideShow project.\n    \"\"\"\n\n    def show():\n        hide_show_section = HideShow((\"Hide\", \"Show More\"))\n        with hide_show_section.content_div:\n            ui.label(\n                \"This is the hidden content. Click the button to hide/show this text.\"\n            )\n\n    await self.setup_content_div(show)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo.show_issue_1786","title":"<code>show_issue_1786()</code>  <code>async</code>","text":"<p>https://github.com/zauberzeug/nicegui/discussions/1786</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>async def show_issue_1786(self):\n    \"\"\"\n    https://github.com/zauberzeug/nicegui/discussions/1786\n    \"\"\"\n\n    def foreground_no_slot(event):\n        ui.notify(f\"{event.sender.text} clicked\")\n\n    async def background_no_slot(event):\n        await run.io_bound(foreground_no_slot, event)\n\n    def foreground_with_slot(event):\n        with self.button_row:\n            ui.notify(f\"{event.sender.text} clicked\")\n\n    async def background_with_slot(event):\n        await run.io_bound(foreground_with_slot, event)\n\n    def show():\n        with ui.row() as self.button_row:\n            ui.button(\"foreground no slot\", on_click=foreground_no_slot)\n            ui.button(\"background no slot\", on_click=background_no_slot)\n            ui.button(\"foreground with slot\", on_click=foreground_with_slot)\n            ui.button(\"background with slot\", on_click=background_with_slot)\n\n    await self.setup_content_div(show)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo.show_langs","title":"<code>show_langs()</code>  <code>async</code>","text":"<p>show languages selection</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>async def show_langs(self):\n    \"\"\"\n    show languages selection\n    \"\"\"\n\n    def show():\n        # Default language set to English\n        default_lang = \"en\"\n\n        # Get available languages\n        languages = Lang.get_language_dict()\n        with ui.card().style(\"width: 12%\"):\n            with ui.row():\n                ui.label(\"Lang code:\")\n                # Create a label to display the chosen language with the default language\n                lang_label = ui.label(default_lang)\n            with ui.row():\n                ui.label(\"Select:\")\n                # Create a dropdown for language selection with the default language selected\n                # Bind the label text to the selection's value, so it updates automatically\n                ui.select(languages, value=default_lang).bind_value(\n                    lang_label, \"text\"\n                )\n\n    await self.setup_content_div(show)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemo.show_tristate_demo","title":"<code>show_tristate_demo()</code>  <code>async</code>","text":"<p>Demonstrate the Tristate project.</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>async def show_tristate_demo(self):\n    \"\"\"\n    Demonstrate the Tristate project.\n    \"\"\"\n\n    def on_change():\n        ui.notify(\n            f\"New State: {self.tristate.current_icon_index} ({self.tristate.utf8_icon})\"\n        )\n\n    def update_icon_set_label(icon_set_name: str):\n        # Update the label to show the icons of the new set\n        self.icon_set_label.set_text(\n            f'Icons in Set {icon_set_name}: {\" \".join(Tristate.ICON_SETS[icon_set_name])}'\n        )\n\n    def on_icon_set_change(event):\n        \"\"\"\n        react on change icon set\n        \"\"\"\n        new_icon_set = event.value\n        self.tristate.icon_set = Tristate.ICON_SETS[new_icon_set]\n        self.tristate.current_icon_index = 0  # Reset to first icon of new set\n        self.tristate.update_props()\n        update_icon_set_label(new_icon_set)\n\n    def show():\n        ui.label(\"Tristate Demo:\")\n        # Initialize Tristate component with the default icon set\n        default_icon_set_name = \"marks\"\n\n        # Label to display the icons in the current set\n        self.icon_set_label = ui.label()\n        update_icon_set_label(default_icon_set_name)\n\n        # Dropdown for selecting the icon set\n        icon_set_names = list(Tristate.ICON_SETS.keys())\n        self.add_select(\n            \"Choose Icon Set\", icon_set_names, on_change=on_icon_set_change\n        )\n\n        ui.label(\"Click to try:\")\n        self.tristate = Tristate(\n            icon_set_name=default_icon_set_name, on_change=on_change\n        )\n\n    await self.setup_content_div(show)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemoWebserver","title":"<code>NiceGuiWidgetsDemoWebserver</code>","text":"<p>               Bases: <code>InputWebserver</code></p> <p>webserver to demonstrate ngwidgets capabilities</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>class NiceGuiWidgetsDemoWebserver(InputWebserver):\n    \"\"\"\n    webserver to demonstrate ngwidgets capabilities\n    \"\"\"\n\n    @classmethod\n    def get_config(cls) -&gt; WebserverConfig:\n        copy_right = \"(c)2023-2024 Wolfgang Fahl\"\n        config = WebserverConfig(\n            short_name=\"ngdemo\",\n            timeout=6.0,\n            copy_right=copy_right,\n            version=Version(),\n            default_port=9856,\n        )\n        server_config = WebserverConfig.get(config)\n        server_config.solution_class = NiceGuiWidgetsDemo\n        return server_config\n\n    def __init__(self):\n        \"\"\"\n        Constructor\n        \"\"\"\n        InputWebserver.__init__(self, config=NiceGuiWidgetsDemoWebserver.get_config())\n        # pdf_url = \"https://www.africau.edu/images/default/sample.pdf\"\n        self.pdf_url = \"https://raw.githubusercontent.com/mozilla/pdf.js/ba2edeae/web/compressed.tracemonkey-pldi-09.pdf\"\n        self.projects = Projects(topic=\"nicegui\")\n        self.projects.load()\n        pass\n\n        @app.get(\"/solutions.yaml\")\n        def get_solutions_yaml():\n            yaml_data = self.projects.to_yaml()\n            return Response(content=yaml_data, media_type=\"text/yaml\")\n\n        @ui.page(\"/solutions\")\n        async def show_solutions(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_solutions)\n\n        @ui.page(\"/colormap\")\n        async def show_colormap_demo(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_colormap_demo)\n\n        @ui.page(\"/combobox\")\n        async def show_combobox_demo(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_combobox_demo)\n\n        @ui.page(\"/components/{solution_id}\")\n        async def show_components(solution_id: str, client: Client):\n            return await self.page(\n                client, NiceGuiWidgetsDemo.show_components, solution_id\n            )\n\n        @ui.page(\"/progress\")\n        async def show_progress(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_progress)\n\n        @ui.page(\"/langs\")\n        async def show_langs(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_langs)\n\n        @ui.page(\"/color_schema\")\n        async def show_color_schema(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_color_schema)\n\n        @ui.page(\"/dictedit\")\n        async def show_dictedit(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_dictedit)\n\n        @ui.page(\"/grid\")\n        async def show_grid(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_grid)\n\n        @ui.page(\"/hideshow\")\n        async def show_hide_show(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_hide_show_demo)\n\n        @ui.page(\"/tristate\")\n        async def show_tristate_demo(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_tristate_demo)\n\n        @ui.page(\"/pdfviewer\")\n        async def show_pdf_viewer(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_pdf_viewer)\n\n        @ui.page(\"/issue1786\")\n        async def show_issue_1786(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_issue_1786)\n\n        @ui.page(\"/stars\")\n        async def show_debounce_demo(client: Client):\n            return await self.page(client, NiceGuiWidgetsDemo.show_debounce_demo)\n</code></pre>"},{"location":"#ngwidgets.widgets_demo.NiceGuiWidgetsDemoWebserver.__init__","title":"<code>__init__()</code>","text":"<p>Constructor</p> Source code in <code>ngwidgets/widgets_demo.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    Constructor\n    \"\"\"\n    InputWebserver.__init__(self, config=NiceGuiWidgetsDemoWebserver.get_config())\n    # pdf_url = \"https://www.africau.edu/images/default/sample.pdf\"\n    self.pdf_url = \"https://raw.githubusercontent.com/mozilla/pdf.js/ba2edeae/web/compressed.tracemonkey-pldi-09.pdf\"\n    self.projects = Projects(topic=\"nicegui\")\n    self.projects.load()\n    pass\n\n    @app.get(\"/solutions.yaml\")\n    def get_solutions_yaml():\n        yaml_data = self.projects.to_yaml()\n        return Response(content=yaml_data, media_type=\"text/yaml\")\n\n    @ui.page(\"/solutions\")\n    async def show_solutions(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_solutions)\n\n    @ui.page(\"/colormap\")\n    async def show_colormap_demo(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_colormap_demo)\n\n    @ui.page(\"/combobox\")\n    async def show_combobox_demo(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_combobox_demo)\n\n    @ui.page(\"/components/{solution_id}\")\n    async def show_components(solution_id: str, client: Client):\n        return await self.page(\n            client, NiceGuiWidgetsDemo.show_components, solution_id\n        )\n\n    @ui.page(\"/progress\")\n    async def show_progress(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_progress)\n\n    @ui.page(\"/langs\")\n    async def show_langs(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_langs)\n\n    @ui.page(\"/color_schema\")\n    async def show_color_schema(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_color_schema)\n\n    @ui.page(\"/dictedit\")\n    async def show_dictedit(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_dictedit)\n\n    @ui.page(\"/grid\")\n    async def show_grid(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_grid)\n\n    @ui.page(\"/hideshow\")\n    async def show_hide_show(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_hide_show_demo)\n\n    @ui.page(\"/tristate\")\n    async def show_tristate_demo(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_tristate_demo)\n\n    @ui.page(\"/pdfviewer\")\n    async def show_pdf_viewer(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_pdf_viewer)\n\n    @ui.page(\"/issue1786\")\n    async def show_issue_1786(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_issue_1786)\n\n    @ui.page(\"/stars\")\n    async def show_debounce_demo(client: Client):\n        return await self.page(client, NiceGuiWidgetsDemo.show_debounce_demo)\n</code></pre>"},{"location":"#ngwidgets.wikipedia","title":"<code>wikipedia</code>","text":"<p>wikipedia.py Conduct detailed searches against the Wikipedia API using the 'query' action to fetch article titles, summaries, and direct URLs.</p> <p>Created on 2024-06-22 @author: wf</p>"},{"location":"#ngwidgets.wikipedia.WikipediaSearch","title":"<code>WikipediaSearch</code>","text":"<p>A class for performing search queries against Wikipedia. This class leverages the MediaWiki API to obtain detailed article information including titles, summaries, and direct URLs.</p> Source code in <code>ngwidgets/wikipedia.py</code> <pre><code>class WikipediaSearch:\n    \"\"\"\n    A class for performing search queries against Wikipedia. This class leverages the MediaWiki API\n    to obtain detailed article information including titles, summaries, and direct URLs.\n    \"\"\"\n\n    def __init__(self, country=\"en\"):\n        \"\"\"\n        Initializes the WikipediaSearch class with the base URL for the Wikipedia API tailored to the specified language.\n\n        Args:\n            country (str): country code to configure the API URL, defaults to 'en' for English.\n        \"\"\"\n        self.country = country\n        self.base_url = f\"https://{country}.wikipedia.org/w/api.php\"\n        self.session = (\n            requests.Session()\n        )  # Using a session for connection pooling to enhance performance.\n\n    def search(self, query, limit=10, explain_text=False):\n        \"\"\"\n        Performs a detailed search on Wikipedia by leveraging the 'query' action to fetch summaries,\n        in addition to using the 'opensearch' API for quick search results.\n\n        Args:\n            query (str): The search string to query Wikipedia with.\n            limit (int): The maximum number of search results to return. Default is 10.\n            explain_text (bool): If True, return extracts as plain text. Default is True.\n\n        Returns:\n            list: A list of dictionaries, each containing the title, summary, and direct URL of an article.\n        \"\"\"\n\n        # Setup parameters for the query action to fetch detailed information\n        params = {\n            \"action\": \"query\",\n            \"list\": \"search\",\n            \"srsearch\": query,\n            \"format\": \"json\",\n            \"utf8\": 1,\n            \"prop\": \"info|extracts\",  # Fetch page info and extracts\n            \"inprop\": \"url\",  # Include the direct URL of each page\n            \"exintro\": True,  # Only the introduction of each page\n            \"explaintext\": explain_text,  # Return extracts as plain text\n            \"exlimit\": \"max\",  # Maximum number of extracts\n            \"srlimit\": limit,  # Limit the number of search results\n        }\n        response = self.session.get(self.base_url, params=params)\n        search_results = response.json().get(\"query\", {}).get(\"search\", [])\n\n        # Formulate results including summaries and URLs\n        detailed_results = []\n        for result in search_results:\n            # Fetch page details with the correct use of parameters\n            page_id = result[\"pageid\"]\n            page_params = {\n                \"action\": \"query\",\n                \"prop\": \"info\",\n                \"pageids\": str(page_id),\n                \"inprop\": \"url\",\n                \"format\": \"json\",\n            }\n            page_response = self.session.get(self.base_url, params=page_params)\n            page_info = page_response.json()[\"query\"][\"pages\"][str(page_id)]\n            url = page_info[\"fullurl\"]  # Direct URL from the API\n\n            detailed_result = {\n                \"title\": result[\"title\"],\n                \"summary\": result.get(\"snippet\", \"No summary available.\"),\n                \"url\": url,\n            }\n            detailed_results.append(detailed_result)\n\n        return detailed_results\n</code></pre>"},{"location":"#ngwidgets.wikipedia.WikipediaSearch.__init__","title":"<code>__init__(country='en')</code>","text":"<p>Initializes the WikipediaSearch class with the base URL for the Wikipedia API tailored to the specified language.</p> <p>Parameters:</p> Name Type Description Default <code>country</code> <code>str</code> <p>country code to configure the API URL, defaults to 'en' for English.</p> <code>'en'</code> Source code in <code>ngwidgets/wikipedia.py</code> <pre><code>def __init__(self, country=\"en\"):\n    \"\"\"\n    Initializes the WikipediaSearch class with the base URL for the Wikipedia API tailored to the specified language.\n\n    Args:\n        country (str): country code to configure the API URL, defaults to 'en' for English.\n    \"\"\"\n    self.country = country\n    self.base_url = f\"https://{country}.wikipedia.org/w/api.php\"\n    self.session = (\n        requests.Session()\n    )  # Using a session for connection pooling to enhance performance.\n</code></pre>"},{"location":"#ngwidgets.wikipedia.WikipediaSearch.search","title":"<code>search(query, limit=10, explain_text=False)</code>","text":"<p>Performs a detailed search on Wikipedia by leveraging the 'query' action to fetch summaries, in addition to using the 'opensearch' API for quick search results.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>The search string to query Wikipedia with.</p> required <code>limit</code> <code>int</code> <p>The maximum number of search results to return. Default is 10.</p> <code>10</code> <code>explain_text</code> <code>bool</code> <p>If True, return extracts as plain text. Default is True.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>list</code> <p>A list of dictionaries, each containing the title, summary, and direct URL of an article.</p> Source code in <code>ngwidgets/wikipedia.py</code> <pre><code>def search(self, query, limit=10, explain_text=False):\n    \"\"\"\n    Performs a detailed search on Wikipedia by leveraging the 'query' action to fetch summaries,\n    in addition to using the 'opensearch' API for quick search results.\n\n    Args:\n        query (str): The search string to query Wikipedia with.\n        limit (int): The maximum number of search results to return. Default is 10.\n        explain_text (bool): If True, return extracts as plain text. Default is True.\n\n    Returns:\n        list: A list of dictionaries, each containing the title, summary, and direct URL of an article.\n    \"\"\"\n\n    # Setup parameters for the query action to fetch detailed information\n    params = {\n        \"action\": \"query\",\n        \"list\": \"search\",\n        \"srsearch\": query,\n        \"format\": \"json\",\n        \"utf8\": 1,\n        \"prop\": \"info|extracts\",  # Fetch page info and extracts\n        \"inprop\": \"url\",  # Include the direct URL of each page\n        \"exintro\": True,  # Only the introduction of each page\n        \"explaintext\": explain_text,  # Return extracts as plain text\n        \"exlimit\": \"max\",  # Maximum number of extracts\n        \"srlimit\": limit,  # Limit the number of search results\n    }\n    response = self.session.get(self.base_url, params=params)\n    search_results = response.json().get(\"query\", {}).get(\"search\", [])\n\n    # Formulate results including summaries and URLs\n    detailed_results = []\n    for result in search_results:\n        # Fetch page details with the correct use of parameters\n        page_id = result[\"pageid\"]\n        page_params = {\n            \"action\": \"query\",\n            \"prop\": \"info\",\n            \"pageids\": str(page_id),\n            \"inprop\": \"url\",\n            \"format\": \"json\",\n        }\n        page_response = self.session.get(self.base_url, params=page_params)\n        page_info = page_response.json()[\"query\"][\"pages\"][str(page_id)]\n        url = page_info[\"fullurl\"]  # Direct URL from the API\n\n        detailed_result = {\n            \"title\": result[\"title\"],\n            \"summary\": result.get(\"snippet\", \"No summary available.\"),\n            \"url\": url,\n        }\n        detailed_results.append(detailed_result)\n\n    return detailed_results\n</code></pre>"},{"location":"#ngwidgets.yamlable","title":"<code>yamlable</code>","text":"<p>Created on 2023-12-08, Extended on 2023-16-12 and 2024-01-25</p> <p>@author: wf, ChatGPT</p> <p>Prompts for the development and extension of the 'YamlAble' class within the 'yamable' module:</p> <ol> <li>Develop 'YamlAble' class in 'yamable' module. It    should convert dataclass instances to/from YAML.</li> <li>Implement methods for YAML block scalar style and    exclude None values in 'YamlAble' class.</li> <li>Add functionality to remove None values from    dataclass instances before YAML conversion.</li> <li>Ensure 'YamlAble' processes only dataclass instances,    with error handling for non-dataclass objects.</li> <li>Extend 'YamlAble' for JSON serialization and    deserialization.</li> <li>Add methods for saving/loading dataclass instances    to/from YAML and JSON files in 'YamlAble'.</li> <li>Implement loading of dataclass instances from URLs    for both YAML and JSON in 'YamlAble'.</li> <li>Write tests for 'YamlAble' within the pyLodStorage context.     Use 'samples 2' example from pyLoDStorage     https://github.com/WolfgangFahl/pyLoDStorage/blob/master/lodstorage/sample2.py    as a reference. </li> <li>Ensure tests cover YAML/JSON serialization, deserialization,     and file I/O operations, using the sample-based approach..</li> <li>Use Google-style docstrings, comments, and type hints    in 'YamlAble' class and tests.</li> <li>Adhere to instructions and seek clarification for     any uncertainties.</li> <li>Add @lod_storable annotation support that will automatically     YamlAble support and add @dataclass and @dataclass_json      prerequisite behavior to a class</li> </ol>"},{"location":"#ngwidgets.yamlable.DateConvert","title":"<code>DateConvert</code>","text":"<p>date converter</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>class DateConvert:\n    \"\"\"\n    date converter\n    \"\"\"\n\n    @classmethod\n    def iso_date_to_datetime(cls, iso_date: str) -&gt; datetime.date:\n        date = datetime.strptime(iso_date, \"%Y-%m-%d\").date() if iso_date else None\n        return date\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble","title":"<code>YamlAble</code>","text":"<p>               Bases: <code>Generic[T]</code></p> <p>An extended YAML handler class for converting dataclass objects to and from YAML format, and handling loading from and saving to files and URLs.</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>class YamlAble(Generic[T]):\n    \"\"\"\n    An extended YAML handler class for converting dataclass objects to and from YAML format,\n    and handling loading from and saving to files and URLs.\n    \"\"\"\n\n    def _yaml_setup(self):\n        \"\"\"\n        Initializes the YamAble handler, setting up custom representers and preparing it for various operations.\n        \"\"\"\n        if not is_dataclass(self):\n            raise ValueError(\"I must be a dataclass instance.\")\n        if not hasattr(self, \"_yaml_dumper\"):\n            self._yaml_dumper = yaml.Dumper\n            self._yaml_dumper.ignore_aliases = lambda *_args: True\n            self._yaml_dumper.add_representer(type(None), self.represent_none)\n            self._yaml_dumper.add_representer(str, self.represent_literal)\n\n    def represent_none(self, _, __) -&gt; yaml.Node:\n        \"\"\"\n        Custom representer for ignoring None values in the YAML output.\n        \"\"\"\n        return self._yaml_dumper.represent_scalar(\"tag:yaml.org,2002:null\", \"\")\n\n    def represent_literal(self, dumper: yaml.Dumper, data: str) -&gt; yaml.Node:\n        \"\"\"\n        Custom representer for block scalar style for strings.\n        \"\"\"\n        if \"\\n\" in data:\n            return dumper.represent_scalar(\"tag:yaml.org,2002:str\", data, style=\"|\")\n        return dumper.represent_scalar(\"tag:yaml.org,2002:str\", data)\n\n    def to_yaml(\n        self,\n        ignore_none: bool = True,\n        ignore_underscore: bool = True,\n        allow_unicode: bool = True,\n        sort_keys: bool = False,\n    ) -&gt; str:\n        \"\"\"\n        Converts this dataclass object to a YAML string, with options to omit None values and/or underscore-prefixed variables,\n        and using block scalar style for strings.\n\n        Args:\n            ignore_none: Flag to indicate whether None values should be removed from the YAML output.\n            ignore_underscore: Flag to indicate whether attributes starting with an underscore should be excluded from the YAML output.\n            allow_unicode: Flag to indicate whether to allow unicode characters in the output.\n            sort_keys: Flag to indicate whether to sort the dictionary keys in the output.\n\n        Returns:\n            A string representation of the dataclass object in YAML format.\n        \"\"\"\n        obj_dict = asdict(self)\n        self._yaml_setup()\n        clean_dict = self.remove_ignored_values(\n            obj_dict, ignore_none, ignore_underscore\n        )\n        yaml_str = yaml.dump(\n            clean_dict,\n            Dumper=self._yaml_dumper,\n            default_flow_style=False,\n            allow_unicode=allow_unicode,\n            sort_keys=sort_keys,\n        )\n        return yaml_str\n\n    @classmethod\n    def from_yaml(cls: Type[T], yaml_str: str) -&gt; T:\n        \"\"\"\n        Deserializes a YAML string to a dataclass instance.\n\n        Args:\n            yaml_str (str): A string containing YAML formatted data.\n\n        Returns:\n            T: An instance of the dataclass.\n        \"\"\"\n        data: dict[str, Any] = yaml.safe_load(yaml_str)\n        instance: T = cls.from_dict(data)\n        return instance\n\n    @classmethod\n    def load_from_yaml_file(cls: Type[T], filename: str) -&gt; T:\n        \"\"\"\n        Loads a dataclass instance from a YAML file.\n\n        Args:\n            filename (str): The path to the YAML file.\n\n        Returns:\n            T: An instance of the dataclass.\n        \"\"\"\n        with open(filename, \"r\") as file:\n            yaml_str: str = file.read()\n        instance: T = cls.from_yaml(yaml_str)\n        return instance\n\n    @classmethod\n    def load_from_yaml_url(cls: Type[T], url: str) -&gt; T:\n        \"\"\"\n        Loads a dataclass instance from a YAML string obtained from a URL.\n\n        Args:\n            url (str): The URL pointing to the YAML data.\n\n        Returns:\n            T: An instance of the dataclass.\n        \"\"\"\n        yaml_str: str = cls.read_from_url(url)\n        instance: T = cls.from_yaml(yaml_str)\n        return instance\n\n    def save_to_yaml_file(self, filename: str):\n        \"\"\"\n        Saves the current dataclass instance to a YAML file.\n\n        Args:\n            filename (str): The path where the YAML file will be saved.\n        \"\"\"\n        yaml_content: str = self.to_yaml()\n        with open(filename, \"w\") as file:\n            file.write(yaml_content)\n\n    @classmethod\n    def load_from_json_file(cls: Type[T], filename: str) -&gt; T:\n        \"\"\"\n        Loads a dataclass instance from a JSON file.\n\n        Args:\n            filename (str): The path to the JSON file.\n\n        Returns:\n            T: An instance of the dataclass.\n        \"\"\"\n        with open(filename, \"r\") as file:\n            json_str: str = file.read()\n        instance: T = cls.from_json(json_str)\n        return instance\n\n    @classmethod\n    def load_from_json_url(cls: Type[T], url: str) -&gt; T:\n        \"\"\"\n        Loads a dataclass instance from a JSON string obtained from a URL.\n\n        Args:\n            url (str): The URL pointing to the JSON data.\n\n        Returns:\n            T: An instance of the dataclass.\n        \"\"\"\n        json_str: str = cls.read_from_url(url)\n        instance: T = cls.from_json(json_str)\n        return instance\n\n    def save_to_json_file(self, filename: str, **kwargs):\n        \"\"\"\n        Saves the current dataclass instance to a JSON file.\n\n        Args:\n            filename (str): The path where the JSON file will be saved.\n            **kwargs: Additional keyword arguments for the `to_json` method.\n        \"\"\"\n        json_content: str = self.to_json(**kwargs)\n        with open(filename, \"w\") as file:\n            file.write(json_content)\n\n    @classmethod\n    def read_from_url(cls, url: str) -&gt; str:\n        \"\"\"\n        Helper method to fetch content from a URL.\n        \"\"\"\n        with urllib.request.urlopen(url) as response:\n            if response.status == 200:\n                return response.read().decode()\n            else:\n                raise Exception(f\"Unable to load data from URL: {url}\")\n\n    @classmethod\n    def remove_ignored_values(\n        cls,\n        value: Any,\n        ignore_none: bool = True,\n        ignore_underscore: bool = False,\n        ignore_empty: bool = True,\n    ) -&gt; Any:\n        \"\"\"\n        Recursively removes specified types of values from a dictionary or list.\n        By default, it removes keys with None values. Optionally, it can also remove keys starting with an underscore.\n\n        Args:\n            value: The value to process (dictionary, list, or other).\n            ignore_none: Flag to indicate whether None values should be removed.\n            ignore_underscore: Flag to indicate whether keys starting with an underscore should be removed.\n            ignore_empty: Flag to indicate whether empty collections should be removed.\n        \"\"\"\n\n        def is_valid(v):\n            \"\"\"Check if the value is valid based on the specified flags.\"\"\"\n            if ignore_none and v is None:\n                return False\n            if ignore_empty:\n                if isinstance(v, Mapping) and not v:\n                    return False  # Empty dictionary\n                if (\n                    isinstance(v, Iterable)\n                    and not isinstance(v, (str, bytes))\n                    and not v\n                ):\n                    return (\n                        False  # Empty list, set, tuple, etc., but not string or bytes\n                    )\n            return True\n\n        if isinstance(value, Mapping):\n            value = {\n                k: YamlAble.remove_ignored_values(\n                    v, ignore_none, ignore_underscore, ignore_empty\n                )\n                for k, v in value.items()\n                if is_valid(v) and (not ignore_underscore or not k.startswith(\"_\"))\n            }\n        elif isinstance(value, Iterable) and not isinstance(value, (str, bytes)):\n            value = [\n                YamlAble.remove_ignored_values(\n                    v, ignore_none, ignore_underscore, ignore_empty\n                )\n                for v in value\n                if is_valid(v)\n            ]\n        return value\n\n    @classmethod\n    def from_dict2(cls: Type[T], data: dict) -&gt; T:\n        \"\"\"\n        Creates an instance of a dataclass from a dictionary, typically used in deserialization.\n        \"\"\"\n        if not data:\n            return None\n        instance = from_dict(data_class=cls, data=data)\n        return instance\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.from_dict2","title":"<code>from_dict2(data)</code>  <code>classmethod</code>","text":"<p>Creates an instance of a dataclass from a dictionary, typically used in deserialization.</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>@classmethod\ndef from_dict2(cls: Type[T], data: dict) -&gt; T:\n    \"\"\"\n    Creates an instance of a dataclass from a dictionary, typically used in deserialization.\n    \"\"\"\n    if not data:\n        return None\n    instance = from_dict(data_class=cls, data=data)\n    return instance\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.from_yaml","title":"<code>from_yaml(yaml_str)</code>  <code>classmethod</code>","text":"<p>Deserializes a YAML string to a dataclass instance.</p> <p>Parameters:</p> Name Type Description Default <code>yaml_str</code> <code>str</code> <p>A string containing YAML formatted data.</p> required <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>An instance of the dataclass.</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>@classmethod\ndef from_yaml(cls: Type[T], yaml_str: str) -&gt; T:\n    \"\"\"\n    Deserializes a YAML string to a dataclass instance.\n\n    Args:\n        yaml_str (str): A string containing YAML formatted data.\n\n    Returns:\n        T: An instance of the dataclass.\n    \"\"\"\n    data: dict[str, Any] = yaml.safe_load(yaml_str)\n    instance: T = cls.from_dict(data)\n    return instance\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.load_from_json_file","title":"<code>load_from_json_file(filename)</code>  <code>classmethod</code>","text":"<p>Loads a dataclass instance from a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The path to the JSON file.</p> required <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>An instance of the dataclass.</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>@classmethod\ndef load_from_json_file(cls: Type[T], filename: str) -&gt; T:\n    \"\"\"\n    Loads a dataclass instance from a JSON file.\n\n    Args:\n        filename (str): The path to the JSON file.\n\n    Returns:\n        T: An instance of the dataclass.\n    \"\"\"\n    with open(filename, \"r\") as file:\n        json_str: str = file.read()\n    instance: T = cls.from_json(json_str)\n    return instance\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.load_from_json_url","title":"<code>load_from_json_url(url)</code>  <code>classmethod</code>","text":"<p>Loads a dataclass instance from a JSON string obtained from a URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL pointing to the JSON data.</p> required <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>An instance of the dataclass.</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>@classmethod\ndef load_from_json_url(cls: Type[T], url: str) -&gt; T:\n    \"\"\"\n    Loads a dataclass instance from a JSON string obtained from a URL.\n\n    Args:\n        url (str): The URL pointing to the JSON data.\n\n    Returns:\n        T: An instance of the dataclass.\n    \"\"\"\n    json_str: str = cls.read_from_url(url)\n    instance: T = cls.from_json(json_str)\n    return instance\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.load_from_yaml_file","title":"<code>load_from_yaml_file(filename)</code>  <code>classmethod</code>","text":"<p>Loads a dataclass instance from a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The path to the YAML file.</p> required <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>An instance of the dataclass.</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>@classmethod\ndef load_from_yaml_file(cls: Type[T], filename: str) -&gt; T:\n    \"\"\"\n    Loads a dataclass instance from a YAML file.\n\n    Args:\n        filename (str): The path to the YAML file.\n\n    Returns:\n        T: An instance of the dataclass.\n    \"\"\"\n    with open(filename, \"r\") as file:\n        yaml_str: str = file.read()\n    instance: T = cls.from_yaml(yaml_str)\n    return instance\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.load_from_yaml_url","title":"<code>load_from_yaml_url(url)</code>  <code>classmethod</code>","text":"<p>Loads a dataclass instance from a YAML string obtained from a URL.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL pointing to the YAML data.</p> required <p>Returns:</p> Name Type Description <code>T</code> <code>T</code> <p>An instance of the dataclass.</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>@classmethod\ndef load_from_yaml_url(cls: Type[T], url: str) -&gt; T:\n    \"\"\"\n    Loads a dataclass instance from a YAML string obtained from a URL.\n\n    Args:\n        url (str): The URL pointing to the YAML data.\n\n    Returns:\n        T: An instance of the dataclass.\n    \"\"\"\n    yaml_str: str = cls.read_from_url(url)\n    instance: T = cls.from_yaml(yaml_str)\n    return instance\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.read_from_url","title":"<code>read_from_url(url)</code>  <code>classmethod</code>","text":"<p>Helper method to fetch content from a URL.</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>@classmethod\ndef read_from_url(cls, url: str) -&gt; str:\n    \"\"\"\n    Helper method to fetch content from a URL.\n    \"\"\"\n    with urllib.request.urlopen(url) as response:\n        if response.status == 200:\n            return response.read().decode()\n        else:\n            raise Exception(f\"Unable to load data from URL: {url}\")\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.remove_ignored_values","title":"<code>remove_ignored_values(value, ignore_none=True, ignore_underscore=False, ignore_empty=True)</code>  <code>classmethod</code>","text":"<p>Recursively removes specified types of values from a dictionary or list. By default, it removes keys with None values. Optionally, it can also remove keys starting with an underscore.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to process (dictionary, list, or other).</p> required <code>ignore_none</code> <code>bool</code> <p>Flag to indicate whether None values should be removed.</p> <code>True</code> <code>ignore_underscore</code> <code>bool</code> <p>Flag to indicate whether keys starting with an underscore should be removed.</p> <code>False</code> <code>ignore_empty</code> <code>bool</code> <p>Flag to indicate whether empty collections should be removed.</p> <code>True</code> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>@classmethod\ndef remove_ignored_values(\n    cls,\n    value: Any,\n    ignore_none: bool = True,\n    ignore_underscore: bool = False,\n    ignore_empty: bool = True,\n) -&gt; Any:\n    \"\"\"\n    Recursively removes specified types of values from a dictionary or list.\n    By default, it removes keys with None values. Optionally, it can also remove keys starting with an underscore.\n\n    Args:\n        value: The value to process (dictionary, list, or other).\n        ignore_none: Flag to indicate whether None values should be removed.\n        ignore_underscore: Flag to indicate whether keys starting with an underscore should be removed.\n        ignore_empty: Flag to indicate whether empty collections should be removed.\n    \"\"\"\n\n    def is_valid(v):\n        \"\"\"Check if the value is valid based on the specified flags.\"\"\"\n        if ignore_none and v is None:\n            return False\n        if ignore_empty:\n            if isinstance(v, Mapping) and not v:\n                return False  # Empty dictionary\n            if (\n                isinstance(v, Iterable)\n                and not isinstance(v, (str, bytes))\n                and not v\n            ):\n                return (\n                    False  # Empty list, set, tuple, etc., but not string or bytes\n                )\n        return True\n\n    if isinstance(value, Mapping):\n        value = {\n            k: YamlAble.remove_ignored_values(\n                v, ignore_none, ignore_underscore, ignore_empty\n            )\n            for k, v in value.items()\n            if is_valid(v) and (not ignore_underscore or not k.startswith(\"_\"))\n        }\n    elif isinstance(value, Iterable) and not isinstance(value, (str, bytes)):\n        value = [\n            YamlAble.remove_ignored_values(\n                v, ignore_none, ignore_underscore, ignore_empty\n            )\n            for v in value\n            if is_valid(v)\n        ]\n    return value\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.represent_literal","title":"<code>represent_literal(dumper, data)</code>","text":"<p>Custom representer for block scalar style for strings.</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>def represent_literal(self, dumper: yaml.Dumper, data: str) -&gt; yaml.Node:\n    \"\"\"\n    Custom representer for block scalar style for strings.\n    \"\"\"\n    if \"\\n\" in data:\n        return dumper.represent_scalar(\"tag:yaml.org,2002:str\", data, style=\"|\")\n    return dumper.represent_scalar(\"tag:yaml.org,2002:str\", data)\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.represent_none","title":"<code>represent_none(_, __)</code>","text":"<p>Custom representer for ignoring None values in the YAML output.</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>def represent_none(self, _, __) -&gt; yaml.Node:\n    \"\"\"\n    Custom representer for ignoring None values in the YAML output.\n    \"\"\"\n    return self._yaml_dumper.represent_scalar(\"tag:yaml.org,2002:null\", \"\")\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.save_to_json_file","title":"<code>save_to_json_file(filename, **kwargs)</code>","text":"<p>Saves the current dataclass instance to a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The path where the JSON file will be saved.</p> required <code>**kwargs</code> <p>Additional keyword arguments for the <code>to_json</code> method.</p> <code>{}</code> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>def save_to_json_file(self, filename: str, **kwargs):\n    \"\"\"\n    Saves the current dataclass instance to a JSON file.\n\n    Args:\n        filename (str): The path where the JSON file will be saved.\n        **kwargs: Additional keyword arguments for the `to_json` method.\n    \"\"\"\n    json_content: str = self.to_json(**kwargs)\n    with open(filename, \"w\") as file:\n        file.write(json_content)\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.save_to_yaml_file","title":"<code>save_to_yaml_file(filename)</code>","text":"<p>Saves the current dataclass instance to a YAML file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The path where the YAML file will be saved.</p> required Source code in <code>ngwidgets/yamlable.py</code> <pre><code>def save_to_yaml_file(self, filename: str):\n    \"\"\"\n    Saves the current dataclass instance to a YAML file.\n\n    Args:\n        filename (str): The path where the YAML file will be saved.\n    \"\"\"\n    yaml_content: str = self.to_yaml()\n    with open(filename, \"w\") as file:\n        file.write(yaml_content)\n</code></pre>"},{"location":"#ngwidgets.yamlable.YamlAble.to_yaml","title":"<code>to_yaml(ignore_none=True, ignore_underscore=True, allow_unicode=True, sort_keys=False)</code>","text":"<p>Converts this dataclass object to a YAML string, with options to omit None values and/or underscore-prefixed variables, and using block scalar style for strings.</p> <p>Parameters:</p> Name Type Description Default <code>ignore_none</code> <code>bool</code> <p>Flag to indicate whether None values should be removed from the YAML output.</p> <code>True</code> <code>ignore_underscore</code> <code>bool</code> <p>Flag to indicate whether attributes starting with an underscore should be excluded from the YAML output.</p> <code>True</code> <code>allow_unicode</code> <code>bool</code> <p>Flag to indicate whether to allow unicode characters in the output.</p> <code>True</code> <code>sort_keys</code> <code>bool</code> <p>Flag to indicate whether to sort the dictionary keys in the output.</p> <code>False</code> <p>Returns:</p> Type Description <code>str</code> <p>A string representation of the dataclass object in YAML format.</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>def to_yaml(\n    self,\n    ignore_none: bool = True,\n    ignore_underscore: bool = True,\n    allow_unicode: bool = True,\n    sort_keys: bool = False,\n) -&gt; str:\n    \"\"\"\n    Converts this dataclass object to a YAML string, with options to omit None values and/or underscore-prefixed variables,\n    and using block scalar style for strings.\n\n    Args:\n        ignore_none: Flag to indicate whether None values should be removed from the YAML output.\n        ignore_underscore: Flag to indicate whether attributes starting with an underscore should be excluded from the YAML output.\n        allow_unicode: Flag to indicate whether to allow unicode characters in the output.\n        sort_keys: Flag to indicate whether to sort the dictionary keys in the output.\n\n    Returns:\n        A string representation of the dataclass object in YAML format.\n    \"\"\"\n    obj_dict = asdict(self)\n    self._yaml_setup()\n    clean_dict = self.remove_ignored_values(\n        obj_dict, ignore_none, ignore_underscore\n    )\n    yaml_str = yaml.dump(\n        clean_dict,\n        Dumper=self._yaml_dumper,\n        default_flow_style=False,\n        allow_unicode=allow_unicode,\n        sort_keys=sort_keys,\n    )\n    return yaml_str\n</code></pre>"},{"location":"#ngwidgets.yamlable.lod_storable","title":"<code>lod_storable(cls)</code>","text":"<p>Decorator to make a class LoDStorable by inheriting from YamlAble. This decorator also ensures the class is a dataclass and has JSON serialization/deserialization capabilities.</p> Source code in <code>ngwidgets/yamlable.py</code> <pre><code>def lod_storable(cls):\n    \"\"\"\n    Decorator to make a class LoDStorable by\n    inheriting from YamlAble.\n    This decorator also ensures the class is a\n    dataclass and has JSON serialization/deserialization\n    capabilities.\n    \"\"\"\n    cls = dataclass(cls)  # Apply the @dataclass decorator\n    cls = dataclass_json(cls)  # Apply the @dataclass_json decorator\n\n    class LoDStorable(YamlAble, cls):\n        \"\"\"\n        decorator class\n        \"\"\"\n\n        __qualname__ = cls.__qualname__\n        pass\n\n    LoDStorable.__name__ = cls.__name__\n    LoDStorable.__doc__ = cls.__doc__\n\n    return LoDStorable\n</code></pre>"}]}